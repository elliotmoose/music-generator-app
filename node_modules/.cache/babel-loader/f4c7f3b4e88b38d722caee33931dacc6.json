{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConstantSourceNodeRendererFactory = function createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConstantSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createConstantSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeConstantSourceNode, nativeConstantSourceNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeConstantSourceNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n                if (!nativeConstantSourceNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                  };\n                  nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                  }\n\n                  if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                  }\n                }\n\n                renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n                if (nativeConstantSourceNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createConstantSourceNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/constant-source-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,uCAAuC,GAA8C,SAArF,uCAAqF,CAC9F,iBAD8F,EAE9F,8BAF8F,EAG9F,kBAH8F,EAI9F,gBAJ8F,EAK9F,uBAL8F,EAM9F;AACA,SAAO,YAAmE;AACtE,QAAM,iCAAiC,GAAG,IAAI,OAAJ,EAA1C;AAEA,QAAI,KAAK,GAAkB,IAA3B;AACA,QAAI,IAAI,GAAkB,IAA1B;;AAEA,QAAM,wBAAwB;AAAA,0EAAG,iBAC7B,KAD6B,EAE7B,yBAF6B,EAG7B,KAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKzB,gBAAA,wBALyB,GAKE,kBAAkB,CAA+B,KAA/B,CALpB;AAO7B;;;AAGG;;AACG,gBAAA,wCAXuB,GAWoB,gBAAgB,CAAC,wBAAD,EAA2B,yBAA3B,CAXpC;;AAa7B,oBAAI,CAAC,wCAAL,EAA+C;AACrC,kBAAA,OADqC,GAC3B;AACZ,oBAAA,YAAY,EAAE,wBAAwB,CAAC,YAD3B;AAEZ,oBAAA,gBAAgB,EAAE,wBAAwB,CAAC,gBAF/B;AAGZ,oBAAA,qBAAqB,EAAE,wBAAwB,CAAC,qBAHpC;AAIZ,oBAAA,MAAM,EAAE,wBAAwB,CAAC,MAAzB,CAAgC;AAJ5B,mBAD2B;AAQ3C,kBAAA,wBAAwB,GAAG,8BAA8B,CAAC,yBAAD,EAA4B,OAA5B,CAAzD;;AAEA,sBAAI,KAAK,KAAK,IAAd,EAAoB;AAChB,oBAAA,wBAAwB,CAAC,KAAzB,CAA+B,KAA/B;AACH;;AAED,sBAAI,IAAI,KAAK,IAAb,EAAmB;AACf,oBAAA,wBAAwB,CAAC,IAAzB,CAA8B,IAA9B;AACH;AACJ;;AAED,gBAAA,iCAAiC,CAAC,GAAlC,CAAsC,yBAAtC,EAAiE,wBAAjE;;AAhC6B,oBAkCxB,wCAlCwB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmCnB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,MAAlC,EAA0C,wBAAwB,CAAC,MAAnE,EAA2E,KAA3E,CAnCG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAqCnB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,MAAlC,EAA0C,wBAAwB,CAAC,MAAnE,EAA2E,KAA3E,CArCE;;AAAA;AAAA;AAAA,uBAwCvB,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,wBAAnC,EAA6D,KAA7D,CAxCA;;AAAA;AAAA,iDA0CtB,wBA1CsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAxB,wBAAwB;AAAA;AAAA;AAAA,OAA9B;;AA6CA,WAAO;AACH,UAAI,KAAJ,CAAU,KAAV,EAAuB;AACnB,QAAA,KAAK,GAAG,KAAR;AACH,OAHE;;AAIH,UAAI,IAAJ,CAAS,KAAT,EAAsB;AAClB,QAAA,IAAI,GAAG,KAAP;AACH,OANE;;AAOH,MAAA,MAPG,kBAQC,KARD,EASC,yBATD,EAUC,KAVD,EAUgC;AAE/B,YAAM,gCAAgC,GAAG,iCAAiC,CAAC,GAAlC,CAAsC,yBAAtC,CAAzC;;AAEA,YAAI,gCAAgC,KAAK,SAAzC,EAAoD;AAChD,iBAAO,OAAO,CAAC,OAAR,CAAgB,gCAAhB,CAAP;AACH;;AAED,eAAO,wBAAwB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAA/B;AACH;AAnBE,KAAP;AAqBH,GAxED;AAyEH,CAhFM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=constant-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}