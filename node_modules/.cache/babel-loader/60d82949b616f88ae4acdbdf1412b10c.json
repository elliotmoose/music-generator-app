{"ast":null,"code":"import * as Tone from 'tone';\nimport { Midi } from '@tonejs/midi';\nlet i = 0;\nexport default class Player {\n  setup() {\n    Tone.start();\n    this.sampler = new Tone.Sampler({\n      urls: {\n        \"C1\": \"C1.mp3\",\n        \"C2\": \"C2.mp3\",\n        \"C3\": \"C3.mp3\",\n        \"C4\": \"C4.mp3\",\n        \"D#4\": \"Ds4.mp3\",\n        \"F#4\": \"Fs4.mp3\",\n        \"A4\": \"A4.mp3\",\n        \"C5\": \"C5.mp3\",\n        \"C6\": \"C6.mp3\"\n      },\n      baseUrl: \"https://tonejs.github.io/audio/salamander/\"\n    }).toDestination();\n  }\n\n  async notesFromMidiFile(fileName) {\n    const midi = await Midi.fromUrl(\"/\" + fileName);\n    console.log(midi);\n    let notes = [];\n    let objTime = 0;\n\n    for (let track of midi.tracks) {\n      for (let note of track.notes) {\n        console.log('add note: ' + note.name);\n        objTime += note.time;\n        note.objTime = objTime;\n        notes.push(note);\n      }\n    }\n\n    return notes;\n  }\n\n  async playMidiFile(fileName) {\n    let notes = await this.notesFromMidiFile(fileName);\n\n    for (let note of notes) {\n      this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n      console.log('play note: ' + note.name);\n    }\n  }\n\n  async pauseMidiFile(fileName) {\n    let notes = [];\n\n    for (let note of notes) {\n      this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n      console.log('play note: ' + note.name);\n    }\n  }\n\n  async stopMidiFile() {\n    this.sampler.dispose();\n  }\n\n}","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/src/Player.js"],"names":["Tone","Midi","i","Player","setup","start","sampler","Sampler","urls","baseUrl","toDestination","notesFromMidiFile","fileName","midi","fromUrl","console","log","notes","objTime","track","tracks","note","name","time","push","playMidiFile","triggerAttackRelease","duration","velocity","pauseMidiFile","stopMidiFile","dispose"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,IAAIC,CAAC,GAAG,CAAR;AACA,eAAe,MAAMC,MAAN,CAAa;AACxBC,EAAAA,KAAK,GAAG;AACJJ,IAAAA,IAAI,CAACK,KAAL;AACA,SAAKC,OAAL,GAAe,IAAIN,IAAI,CAACO,OAAT,CAAiB;AAC5BC,MAAAA,IAAI,EAAE;AACF,cAAM,QADJ;AAEF,cAAM,QAFJ;AAGF,cAAM,QAHJ;AAIF,cAAM,QAJJ;AAKF,eAAO,SALL;AAMF,eAAO,SANL;AAOF,cAAM,QAPJ;AAQF,cAAM,QARJ;AASF,cAAM;AATJ,OADsB;AAY5BC,MAAAA,OAAO,EAAE;AAZmB,KAAjB,EAaZC,aAbY,EAAf;AAcH;;AAED,QAAMC,iBAAN,CAAwBC,QAAxB,EAAkC;AAC9B,UAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAa,MAAMF,QAAnB,CAAnB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAII,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,KAAT,IAAkBN,IAAI,CAACO,MAAvB,EAA+B;AAC3B,WAAK,IAAIC,IAAT,IAAiBF,KAAK,CAACF,KAAvB,EAA8B;AAC1BF,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeK,IAAI,CAACC,IAAhC;AACAJ,QAAAA,OAAO,IAAIG,IAAI,CAACE,IAAhB;AACAF,QAAAA,IAAI,CAACH,OAAL,GAAeA,OAAf;AACAD,QAAAA,KAAK,CAACO,IAAN,CAAWH,IAAX;AACH;AACJ;;AAGD,WAAOJ,KAAP;AACH;;AACD,QAAMQ,YAAN,CAAmBb,QAAnB,EAA6B;AACzB,QAAIK,KAAK,GAAG,MAAM,KAAKN,iBAAL,CAAuBC,QAAvB,CAAlB;;AACA,SAAK,IAAIS,IAAT,IAAiBJ,KAAjB,EAAwB;AACpB,WAAKX,OAAL,CAAaoB,oBAAb,CAAkC,CAACL,IAAI,CAACC,IAAN,CAAlC,EAA+CD,IAAI,CAACM,QAApD,EAA8DN,IAAI,CAACE,IAAnE,EAAyEF,IAAI,CAACO,QAA9E;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBK,IAAI,CAACC,IAAjC;AACH;AAEJ;;AACD,QAAMO,aAAN,CAAoBjB,QAApB,EAA8B;AAC1B,QAAIK,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAII,IAAT,IAAiBJ,KAAjB,EAAwB;AACpB,WAAKX,OAAL,CAAaoB,oBAAb,CAAkC,CAACL,IAAI,CAACC,IAAN,CAAlC,EAA+CD,IAAI,CAACM,QAApD,EAA8DN,IAAI,CAACE,IAAnE,EAAyEF,IAAI,CAACO,QAA9E;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBK,IAAI,CAACC,IAAjC;AACH;AAEJ;;AACD,QAAMQ,YAAN,GAAqB;AACjB,SAAKxB,OAAL,CAAayB,OAAb;AAEH;;AAvDuB","sourcesContent":["import * as Tone from 'tone'\nimport { Midi } from '@tonejs/midi'\n\nlet i = 0\nexport default class Player {\n    setup() {\n        Tone.start()\n        this.sampler = new Tone.Sampler({\n            urls: {\n                \"C1\": \"C1.mp3\",\n                \"C2\": \"C2.mp3\",\n                \"C3\": \"C3.mp3\",\n                \"C4\": \"C4.mp3\",\n                \"D#4\": \"Ds4.mp3\",\n                \"F#4\": \"Fs4.mp3\",\n                \"A4\": \"A4.mp3\",\n                \"C5\": \"C5.mp3\",\n                \"C6\": \"C6.mp3\",\n            },\n            baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n        }).toDestination()\n    }\n\n    async notesFromMidiFile(fileName) {\n        const midi = await Midi.fromUrl(\"/\" + fileName);\n        console.log(midi)\n        let notes = []\n        let objTime = 0\n        for (let track of midi.tracks) {\n            for (let note of track.notes) {\n                console.log('add note: ' + note.name)\n                objTime += note.time;\n                note.objTime = objTime;\n                notes.push(note);\n            }\n        }\n\n        \n        return notes\n    }\n    async playMidiFile(fileName) {\n        let notes = await this.notesFromMidiFile(fileName)\n        for (let note of notes) {\n            this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n            console.log('play note: ' + note.name)\n        }\n\n    }\n    async pauseMidiFile(fileName) {\n        let notes = []\n        for (let note of notes) {\n            this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n            console.log('play note: ' + note.name)\n        }\n\n    }\n    async stopMidiFile() {\n        this.sampler.dispose();\n\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}