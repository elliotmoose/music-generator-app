{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\n\nexport var StereoFeedbackEffect = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(StereoFeedbackEffect, _StereoEffect);\n\n  var _super = _createSuper(StereoFeedbackEffect);\n\n  function StereoFeedbackEffect(options) {\n    var _this;\n\n    _classCallCheck(this, StereoFeedbackEffect);\n\n    _this = _super.call(this, options);\n    _this.feedback = new Signal({\n      context: _this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    _this._feedbackL = new Gain({\n      context: _this.context\n    });\n    _this._feedbackR = new Gain({\n      context: _this.context\n    });\n    _this._feedbackSplit = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._feedbackMerge = new Merge({\n      context: _this.context,\n      channels: 2\n    });\n\n    _this._merge.connect(_this._feedbackSplit);\n\n    _this._feedbackMerge.connect(_this._split); // the left output connected to the left input\n\n\n    _this._feedbackSplit.connect(_this._feedbackL, 0, 0);\n\n    _this._feedbackL.connect(_this._feedbackMerge, 0, 0); // the right output connected to the right input\n\n\n    _this._feedbackSplit.connect(_this._feedbackR, 1, 0);\n\n    _this._feedbackR.connect(_this._feedbackMerge, 0, 1); // the feedback control\n\n\n    _this.feedback.fan(_this._feedbackL.gain, _this._feedbackR.gain);\n\n    readOnly(_assertThisInitialized(_this), [\"feedback\"]);\n    return _this;\n  }\n\n  _createClass(StereoFeedbackEffect, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoFeedbackEffect.prototype), \"dispose\", this).call(this);\n\n      this.feedback.dispose();\n\n      this._feedbackL.dispose();\n\n      this._feedbackR.dispose();\n\n      this._feedbackSplit.dispose();\n\n      this._feedbackMerge.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        feedback: 0.5\n      });\n    }\n  }]);\n\n  return StereoFeedbackEffect;\n}(StereoEffect);","map":{"version":3,"sources":["../../../Tone/effect/StereoFeedbackEffect.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,YAAT,QAAkD,gBAAlD;AAEA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AAMA;;AAEG;;AACH,WAAa,oBAAb;AAAA;;AAAA;;AA6BC,gCAAY,OAAZ,EAAgD;AAAA;;AAAA;;AAE/C,8BAAM,OAAN;AAEA,UAAK,QAAL,GAAgB,IAAI,MAAJ,CAAW;AAC1B,MAAA,OAAO,EAAE,MAAK,OADY;AAE1B,MAAA,KAAK,EAAE,OAAO,CAAC,QAFW;AAG1B,MAAA,KAAK,EAAE;AAHmB,KAAX,CAAhB;AAKA,UAAK,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAlB;AACA,UAAK,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAlB;AAEA,UAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,MAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;AACA,UAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,MAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;;AAEA,UAAK,MAAL,CAAY,OAAZ,CAAoB,MAAK,cAAzB;;AACA,UAAK,cAAL,CAAoB,OAApB,CAA4B,MAAK,MAAjC,EAhB+C,CAkB/C;;;AACA,UAAK,cAAL,CAAoB,OAApB,CAA4B,MAAK,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EApB+C,CAsB/C;;;AACA,UAAK,cAAL,CAAoB,OAApB,CAA4B,MAAK,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EAxB+C,CA0B/C;;;AACA,UAAK,QAAL,CAAc,GAAd,CAAkB,MAAK,UAAL,CAAgB,IAAlC,EAAwC,MAAK,UAAL,CAAgB,IAAxD;;AACA,IAAA,QAAQ,gCAAO,CAAC,UAAD,CAAP,CAAR;AA5B+C;AA6B/C;;AA1DF;AAAA;AAAA,8BAkEQ;AACN;;AACA,WAAK,QAAL,CAAc,OAAd;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,WAAK,cAAL,CAAoB,OAApB;;AACA,WAAK,cAAL,CAAoB,OAApB;;AACA,aAAO,IAAP;AACA;AA1EF;AAAA;AAAA,kCA4DmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,YAAY,CAAC,WAAb,EAAd,EAA0C;AAChD,QAAA,QAAQ,EAAE;AADsC,OAA1C,CAAP;AAGA;AAhEF;;AAAA;AAAA,EAAuF,YAAvF","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect extends StereoEffect {\n    constructor(options) {\n        super(options);\n        this.feedback = new Signal({\n            context: this.context,\n            value: options.feedback,\n            units: \"normalRange\"\n        });\n        this._feedbackL = new Gain({ context: this.context });\n        this._feedbackR = new Gain({ context: this.context });\n        this._feedbackSplit = new Split({ context: this.context, channels: 2 });\n        this._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n        this._merge.connect(this._feedbackSplit);\n        this._feedbackMerge.connect(this._split);\n        // the left output connected to the left input\n        this._feedbackSplit.connect(this._feedbackL, 0, 0);\n        this._feedbackL.connect(this._feedbackMerge, 0, 0);\n        // the right output connected to the right input\n        this._feedbackSplit.connect(this._feedbackR, 1, 0);\n        this._feedbackR.connect(this._feedbackMerge, 0, 1);\n        // the feedback control\n        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n        readOnly(this, [\"feedback\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            feedback: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.feedback.dispose();\n        this._feedbackL.dispose();\n        this._feedbackR.dispose();\n        this._feedbackSplit.dispose();\n        this._feedbackMerge.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoFeedbackEffect.js.map"]},"metadata":{},"sourceType":"module"}