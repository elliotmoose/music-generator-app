{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport var deactivateActiveAudioNodeInputConnections = function deactivateActiveAudioNodeInputConnections(audioNode, trace) {\n  var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n      activeInputs = _getAudioNodeConnecti.activeInputs;\n\n  activeInputs.forEach(function (connections) {\n    return connections.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          source = _ref2[0];\n\n      if (!trace.includes(audioNode)) {\n        deactivateActiveAudioNodeInputConnections(source, [].concat(_toConsumableArray(trace), [audioNode]));\n      }\n    });\n  });\n  var audioParams = isAudioBufferSourceNode(audioNode) ? [// Bug #149: Safari does not yet support the detune AudioParam.\n  audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n\n  var _iterator = _createForOfIteratorHelper(audioParams),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var audioParam = _step.value;\n      var audioParamConnections = getAudioParamConnections(audioParam);\n\n      if (audioParamConnections !== undefined) {\n        audioParamConnections.activeInputs.forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              source = _ref4[0];\n\n          return deactivateActiveAudioNodeInputConnections(source, trace);\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (isActiveAudioNode(audioNode)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","map":{"version":3,"sources":["../../../src/helpers/deactivate-active-audio-node-input-connections.ts"],"names":[],"mappings":";;;AAAA,SAAS,uBAAT,QAAwC,oCAAxC;AACA,SAAS,kBAAT,QAAmC,8BAAnC;AACA,SAAS,kBAAT,QAAmC,8BAAnC;AACA,SAAS,oBAAT,QAAqC,gCAArC;AACA,SAAS,UAAT,QAA2B,qBAA3B;AACA,SAAS,gBAAT,QAAiC,2BAAjC;AACA,SAAS,kBAAT,QAAmC,8BAAnC;AAGA,SAAS,uBAAT,QAAwC,8BAAxC;AACA,SAAS,wBAAT,QAAyC,+BAAzC;AACA,SAAS,iBAAT,QAAkC,wBAAlC;AACA,SAAS,yBAAT,QAA0C,iCAA1C;AAEA,OAAO,IAAM,yCAAyC,GAAG,SAA5C,yCAA4C,CACrD,SADqD,EAErD,KAFqD,EAGrD;AAAA,8BACyB,uBAAuB,CAAC,SAAD,CADhD;AAAA,MACQ,YADR,yBACQ,YADR;;AAGA,EAAA,YAAY,CAAC,OAAb,CAAqB,UAAC,WAAD;AAAA,WACjB,WAAW,CAAC,OAAZ,CAAoB,gBAAa;AAAA;AAAA,UAAX,MAAW;;AAC7B,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC5B,QAAA,yCAAyC,CAAC,MAAD,+BAAa,KAAb,IAAoB,SAApB,GAAzC;AACH;AACJ,KAJD,CADiB;AAAA,GAArB;AAQA,MAAM,WAAW,GAAG,uBAAuB,CAAC,SAAD,CAAvB,GACd,CACI;AACA,EAAA,SAAS,CAAC,YAFd,CADc,GAKd,kBAAkB,CAAC,SAAD,CAAlB,GACA,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,UAAV,CAAqB,MAArB,EAAX,CADA,GAEA,kBAAkB,CAAC,SAAD,CAAlB,GACA,CAAC,SAAS,CAAC,CAAX,EAAc,SAAS,CAAC,MAAxB,EAAgC,SAAS,CAAC,SAA1C,EAAqD,SAAS,CAAC,IAA/D,CADA,GAEA,oBAAoB,CAAC,SAAD,CAApB,GACA,CAAC,SAAS,CAAC,MAAX,CADA,GAEA,UAAU,CAAC,SAAD,CAAV,GACA,CAAC,SAAS,CAAC,IAAX,CADA,GAEA,gBAAgB,CAAC,SAAD,CAAhB,GACA,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,SAA7B,CADA,GAEA,kBAAkB,CAAC,SAAD,CAAlB,GACA,CAAC,SAAS,CAAC,GAAX,CADA,GAEA,EAjBN;;AAXA,6CA8ByB,WA9BzB;AAAA;;AAAA;AA8BA,wDAAsC;AAAA,UAA3B,UAA2B;AAClC,UAAM,qBAAqB,GAAG,wBAAwB,CAAI,UAAJ,CAAtD;;AAEA,UAAI,qBAAqB,KAAK,SAA9B,EAAyC;AACrC,QAAA,qBAAqB,CAAC,YAAtB,CAAmC,OAAnC,CAA2C;AAAA;AAAA,cAAE,MAAF;;AAAA,iBAAc,yCAAyC,CAAC,MAAD,EAAS,KAAT,CAAvD;AAAA,SAA3C;AACH;AACJ;AApCD;AAAA;AAAA;AAAA;AAAA;;AAsCA,MAAI,iBAAiB,CAAC,SAAD,CAArB,EAAkC;AAC9B,IAAA,yBAAyB,CAAC,SAAD,CAAzB;AACH;AACJ,CA5CM","sourceRoot":"","sourcesContent":["import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n    activeInputs.forEach((connections) => connections.forEach(([source]) => {\n        if (!trace.includes(audioNode)) {\n            deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n        }\n    }));\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n            // Bug #149: Safari does not yet support the detune AudioParam.\n            audioNode.playbackRate\n        ]\n        : isAudioWorkletNode(audioNode)\n            ? Array.from(audioNode.parameters.values())\n            : isBiquadFilterNode(audioNode)\n                ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n                : isConstantSourceNode(audioNode)\n                    ? [audioNode.offset]\n                    : isGainNode(audioNode)\n                        ? [audioNode.gain]\n                        : isOscillatorNode(audioNode)\n                            ? [audioNode.detune, audioNode.frequency]\n                            : isStereoPannerNode(audioNode)\n                                ? [audioNode.pan]\n                                : [];\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=deactivate-active-audio-node-input-connections.js.map"]},"metadata":{},"sourceType":"module"}