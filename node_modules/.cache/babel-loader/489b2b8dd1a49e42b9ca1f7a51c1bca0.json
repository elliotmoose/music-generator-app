{"ast":null,"code":"import _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nexport var ModulationSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(ModulationSynth, _Monophonic);\n\n  var _super = _createSuper(ModulationSynth);\n\n  function ModulationSynth() {\n    var _this;\n\n    _classCallCheck(this, ModulationSynth);\n\n    _this = _super.call(this, optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    _this.name = \"ModulationSynth\";\n    var options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    _this._carrier = new Synth({\n      context: _this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: function onsilence() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      },\n      volume: -10\n    });\n    _this._modulator = new Synth({\n      context: _this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    _this.oscillator = _this._carrier.oscillator;\n    _this.envelope = _this._carrier.envelope;\n    _this.modulation = _this._modulator.oscillator;\n    _this.modulationEnvelope = _this._modulator.envelope;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    _this._modulationNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(ModulationSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n\n    /**\n     * Trigger the attack portion of the note\n     */\n    value: function _triggerEnvelopeAttack(time, velocity) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n      this._modulator._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n      this._modulator._triggerEnvelopeRelease(time);\n\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ModulationSynth.prototype), \"dispose\", this).call(this);\n\n      this._carrier.dispose();\n\n      this._modulator.dispose();\n\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n\n      this._modulationNode.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Monophonic.getDefaults(), {\n        harmonicity: 3,\n        oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"sine\"\n        }),\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.01,\n          decay: 0.01,\n          sustain: 1,\n          release: 0.5\n        }),\n        modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"square\"\n        }),\n        modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.5,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        })\n      });\n    }\n  }]);\n\n  return ModulationSynth;\n}(Monophonic);","map":{"version":3,"sources":["../../../Tone/instrument/ModulationSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\nexport class ModulationSynth extends Monophonic {\n    constructor() {\n        super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n        this.name = \"ModulationSynth\";\n        const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n        this._carrier = new Synth({\n            context: this.context,\n            oscillator: options.oscillator,\n            envelope: options.envelope,\n            onsilence: () => this.onsilence(this),\n            volume: -10,\n        });\n        this._modulator = new Synth({\n            context: this.context,\n            oscillator: options.modulation,\n            envelope: options.modulationEnvelope,\n            volume: -10,\n        });\n        this.oscillator = this._carrier.oscillator;\n        this.envelope = this._carrier.envelope;\n        this.modulation = this._modulator.oscillator;\n        this.modulationEnvelope = this._modulator.envelope;\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n        });\n        this.detune = new Signal({\n            context: this.context,\n            value: options.detune,\n            units: \"cents\"\n        });\n        this.harmonicity = new Multiply({\n            context: this.context,\n            value: options.harmonicity,\n            minValue: 0,\n        });\n        this._modulationNode = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Monophonic.getDefaults(), {\n            harmonicity: 3,\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [\n                ...Object.keys(Source.getDefaults()),\n                \"frequency\",\n                \"detune\"\n            ]), {\n                type: \"sine\"\n            }),\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.01,\n                decay: 0.01,\n                sustain: 1,\n                release: 0.5\n            }),\n            modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [\n                ...Object.keys(Source.getDefaults()),\n                \"frequency\",\n                \"detune\"\n            ]), {\n                type: \"square\"\n            }),\n            modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.5,\n                decay: 0.0,\n                sustain: 1,\n                release: 0.5\n            })\n        });\n    }\n    /**\n     * Trigger the attack portion of the note\n     */\n    _triggerEnvelopeAttack(time, velocity) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeAttack(time, velocity);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n    _triggerEnvelopeRelease(time) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeRelease(time);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeRelease(time);\n        return this;\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    }\n    dispose() {\n        super.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._modulationNode.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ModulationSynth.js.map"]},"metadata":{},"sourceType":"module"}