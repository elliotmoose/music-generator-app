{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\n\nexport var Compressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Compressor, _ToneAudioNode);\n\n  var _super = _createSuper(Compressor);\n\n  function Compressor() {\n    var _this;\n\n    _classCallCheck(this, Compressor);\n\n    _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    _this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    _this._compressor = _this.context.createDynamicsCompressor();\n    _this.input = _this._compressor;\n    _this.output = _this._compressor;\n    var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    _this.threshold = new Param({\n      minValue: _this._compressor.threshold.minValue,\n      maxValue: _this._compressor.threshold.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    _this.attack = new Param({\n      minValue: _this._compressor.attack.minValue,\n      maxValue: _this._compressor.attack.maxValue,\n      context: _this.context,\n      param: _this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    _this.release = new Param({\n      minValue: _this._compressor.release.minValue,\n      maxValue: _this._compressor.release.maxValue,\n      context: _this.context,\n      param: _this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    _this.knee = new Param({\n      minValue: _this._compressor.knee.minValue,\n      maxValue: _this._compressor.knee.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    _this.ratio = new Param({\n      minValue: _this._compressor.ratio.minValue,\n      maxValue: _this._compressor.ratio.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(_assertThisInitialized(_this), [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    return _this;\n  }\n\n  _createClass(Compressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Compressor.prototype), \"dispose\", this).call(this);\n\n      this._compressor.disconnect();\n\n      this.attack.dispose();\n      this.release.dispose();\n      this.threshold.dispose();\n      this.ratio.dispose();\n      this.knee.dispose();\n      return this;\n    }\n  }, {\n    key: \"reduction\",\n\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    get: function get() {\n      return this._compressor.reduction;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        attack: 0.003,\n        knee: 30,\n        ratio: 12,\n        release: 0.25,\n        threshold: -24\n      });\n    }\n  }]);\n\n  return Compressor;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Compressor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n        this.name = \"Compressor\";\n        /**\n         * the compressor node\n         */\n        this._compressor = this.context.createDynamicsCompressor();\n        this.input = this._compressor;\n        this.output = this._compressor;\n        const options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n        this.threshold = new Param({\n            minValue: this._compressor.threshold.minValue,\n            maxValue: this._compressor.threshold.maxValue,\n            context: this.context,\n            convert: false,\n            param: this._compressor.threshold,\n            units: \"decibels\",\n            value: options.threshold,\n        });\n        this.attack = new Param({\n            minValue: this._compressor.attack.minValue,\n            maxValue: this._compressor.attack.maxValue,\n            context: this.context,\n            param: this._compressor.attack,\n            units: \"time\",\n            value: options.attack,\n        });\n        this.release = new Param({\n            minValue: this._compressor.release.minValue,\n            maxValue: this._compressor.release.maxValue,\n            context: this.context,\n            param: this._compressor.release,\n            units: \"time\",\n            value: options.release,\n        });\n        this.knee = new Param({\n            minValue: this._compressor.knee.minValue,\n            maxValue: this._compressor.knee.maxValue,\n            context: this.context,\n            convert: false,\n            param: this._compressor.knee,\n            units: \"decibels\",\n            value: options.knee,\n        });\n        this.ratio = new Param({\n            minValue: this._compressor.ratio.minValue,\n            maxValue: this._compressor.ratio.maxValue,\n            context: this.context,\n            convert: false,\n            param: this._compressor.ratio,\n            units: \"positive\",\n            value: options.ratio,\n        });\n        // set the defaults\n        readOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            attack: 0.003,\n            knee: 30,\n            ratio: 12,\n            release: 0.25,\n            threshold: -24,\n        });\n    }\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    get reduction() {\n        return this._compressor.reduction;\n    }\n    dispose() {\n        super.dispose();\n        this._compressor.disconnect();\n        this.attack.dispose();\n        this.release.dispose();\n        this.threshold.dispose();\n        this.ratio.dispose();\n        this.knee.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Compressor.js.map"]},"metadata":{},"sourceType":"module"}