{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\n\nexport var MultibandCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandCompressor, _ToneAudioNode);\n\n  var _super = _createSuper(MultibandCompressor);\n\n  function MultibandCompressor() {\n    var _this;\n\n    _classCallCheck(this, MultibandCompressor);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n    _this.name = \"MultibandCompressor\";\n    var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    _this._splitter = _this.input = new MultibandSplit({\n      context: _this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    _this.lowFrequency = _this._splitter.lowFrequency;\n    _this.highFrequency = _this._splitter.highFrequency;\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.low = new Compressor(Object.assign(options.low, {\n      context: _this.context\n    }));\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.high = new Compressor(Object.assign(options.high, {\n      context: _this.context\n    })); // connect the compressor\n\n    _this._splitter.low.chain(_this.low, _this.output);\n\n    _this._splitter.mid.chain(_this.mid, _this.output);\n\n    _this._splitter.high.chain(_this.high, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandCompressor.prototype), \"dispose\", this).call(this);\n\n      this._splitter.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.output.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        lowFrequency: 250,\n        highFrequency: 2000,\n        low: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        },\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        high: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        }\n      });\n    }\n  }]);\n\n  return MultibandCompressor;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/dynamics/MultibandCompressor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\nexport class MultibandCompressor extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n        this.name = \"MultibandCompressor\";\n        const options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n        this._splitter = this.input = new MultibandSplit({\n            context: this.context,\n            lowFrequency: options.lowFrequency,\n            highFrequency: options.highFrequency\n        });\n        this.lowFrequency = this._splitter.lowFrequency;\n        this.highFrequency = this._splitter.highFrequency;\n        this.output = new Gain({ context: this.context });\n        this.low = new Compressor(Object.assign(options.low, { context: this.context }));\n        this.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n        this.high = new Compressor(Object.assign(options.high, { context: this.context }));\n        // connect the compressor\n        this._splitter.low.chain(this.low, this.output);\n        this._splitter.mid.chain(this.mid, this.output);\n        this._splitter.high.chain(this.high, this.output);\n        readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            lowFrequency: 250,\n            highFrequency: 2000,\n            low: {\n                ratio: 6,\n                threshold: -30,\n                release: 0.25,\n                attack: 0.03,\n                knee: 10\n            },\n            mid: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n            high: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._splitter.dispose();\n        this.low.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.output.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MultibandCompressor.js.map"]},"metadata":{},"sourceType":"module"}