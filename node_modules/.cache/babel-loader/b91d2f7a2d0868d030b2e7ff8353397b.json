{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5);\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\n\nexport var Chorus = /*#__PURE__*/function (_StereoFeedbackEffect) {\n  _inherits(Chorus, _StereoFeedbackEffect);\n\n  var _super = _createSuper(Chorus);\n\n  function Chorus() {\n    var _this;\n\n    _classCallCheck(this, Chorus);\n\n    _this = _super.call(this, optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n    _this.name = \"Chorus\";\n    var options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    _this._depth = options.depth;\n    _this._delayTime = options.delayTime / 1000;\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._delayNodeL = new Delay({\n      context: _this.context\n    });\n    _this._delayNodeR = new Delay({\n      context: _this.context\n    });\n    _this.frequency = _this._lfoL.frequency;\n    readOnly(_assertThisInitialized(_this), [\"frequency\"]); // have one LFO frequency control the other\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // connections\n\n\n    _this.connectEffectLeft(_this._delayNodeL);\n\n    _this.connectEffectRight(_this._delayNodeR); // lfo setup\n\n\n    _this._lfoL.connect(_this._delayNodeL.delayTime);\n\n    _this._lfoR.connect(_this._delayNodeR.delayTime); // set the initial values\n\n\n    _this.depth = _this._depth;\n    _this.type = options.type;\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  _createClass(Chorus, [{\n    key: \"start\",\n\n    /**\n     * Start the effect.\n     */\n    value: function start(time) {\n      this._lfoL.start(time);\n\n      this._lfoR.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the lfo\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n\n      this._lfoR.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n\n      this._lfoR.sync();\n\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n\n      this._lfoR.unsync();\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Chorus.prototype), \"dispose\", this).call(this);\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._delayNodeL.dispose();\n\n      this._delayNodeR.dispose();\n\n      this.frequency.dispose();\n      return this;\n    }\n  }, {\n    key: \"depth\",\n\n    /**\n     * The depth of the effect. A depth of 1 makes the delayTime\n     * modulate between 0 and 2*delayTime (centered around the delayTime).\n     */\n    get: function get() {\n      return this._depth;\n    },\n    set: function set(depth) {\n      this._depth = depth;\n      var deviation = this._delayTime * depth;\n      this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoL.max = this._delayTime + deviation;\n      this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoR.max = this._delayTime + deviation;\n    }\n    /**\n     * The delayTime in milliseconds of the chorus. A larger delayTime\n     * will give a more pronounced effect. Nominal range a delayTime\n     * is between 2 and 20ms.\n     */\n\n  }, {\n    key: \"delayTime\",\n    get: function get() {\n      return this._delayTime * 1000;\n    },\n    set: function set(delayTime) {\n      this._delayTime = delayTime / 1000;\n      this.depth = this._depth;\n    }\n    /**\n     * The oscillator type of the LFO.\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase;\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoFeedbackEffect.getDefaults(), {\n        frequency: 1.5,\n        delayTime: 3.5,\n        depth: 0.7,\n        type: \"sine\",\n        spread: 180,\n        feedback: 0,\n        wet: 0.5\n      });\n    }\n  }]);\n\n  return Chorus;\n}(StereoFeedbackEffect);","map":{"version":3,"sources":["../../../Tone/effect/Chorus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5);\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect {\n    constructor() {\n        super(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n        this.name = \"Chorus\";\n        const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n        this._depth = options.depth;\n        this._delayTime = options.delayTime / 1000;\n        this._lfoL = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n        });\n        this._lfoR = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n            phase: 180\n        });\n        this._delayNodeL = new Delay({ context: this.context });\n        this._delayNodeR = new Delay({ context: this.context });\n        this.frequency = this._lfoL.frequency;\n        readOnly(this, [\"frequency\"]);\n        // have one LFO frequency control the other\n        this._lfoL.frequency.connect(this._lfoR.frequency);\n        // connections\n        this.connectEffectLeft(this._delayNodeL);\n        this.connectEffectRight(this._delayNodeR);\n        // lfo setup\n        this._lfoL.connect(this._delayNodeL.delayTime);\n        this._lfoR.connect(this._delayNodeR.delayTime);\n        // set the initial values\n        this.depth = this._depth;\n        this.type = options.type;\n        this.spread = options.spread;\n    }\n    static getDefaults() {\n        return Object.assign(StereoFeedbackEffect.getDefaults(), {\n            frequency: 1.5,\n            delayTime: 3.5,\n            depth: 0.7,\n            type: \"sine\",\n            spread: 180,\n            feedback: 0,\n            wet: 0.5,\n        });\n    }\n    /**\n     * The depth of the effect. A depth of 1 makes the delayTime\n     * modulate between 0 and 2*delayTime (centered around the delayTime).\n     */\n    get depth() {\n        return this._depth;\n    }\n    set depth(depth) {\n        this._depth = depth;\n        const deviation = this._delayTime * depth;\n        this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n        this._lfoL.max = this._delayTime + deviation;\n        this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n        this._lfoR.max = this._delayTime + deviation;\n    }\n    /**\n     * The delayTime in milliseconds of the chorus. A larger delayTime\n     * will give a more pronounced effect. Nominal range a delayTime\n     * is between 2 and 20ms.\n     */\n    get delayTime() {\n        return this._delayTime * 1000;\n    }\n    set delayTime(delayTime) {\n        this._delayTime = delayTime / 1000;\n        this.depth = this._depth;\n    }\n    /**\n     * The oscillator type of the LFO.\n     */\n    get type() {\n        return this._lfoL.type;\n    }\n    set type(type) {\n        this._lfoL.type = type;\n        this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get spread() {\n        return this._lfoR.phase - this._lfoL.phase;\n    }\n    set spread(spread) {\n        this._lfoL.phase = 90 - (spread / 2);\n        this._lfoR.phase = (spread / 2) + 90;\n    }\n    /**\n     * Start the effect.\n     */\n    start(time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    }\n    /**\n     * Stop the lfo\n     */\n    stop(time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n    sync() {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n    unsync() {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._delayNodeL.dispose();\n        this._delayNodeR.dispose();\n        this.frequency.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Chorus.js.map"]},"metadata":{},"sourceType":"module"}