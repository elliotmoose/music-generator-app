{"ast":null,"code":"var math = require('../math'),\n    DisplayObject = require('./DisplayObject'),\n    RenderTexture = require('../textures/RenderTexture'),\n    _tempMatrix = new math.Matrix();\n/**\n * A Container represents a collection of display objects.\n * It is the base class of all display objects that act as a container for other objects.\n *\n *```js\n * var container = new PIXI.Container();\n * container.addChild(sprite);\n * ```\n * @class\n * @extends PIXI.DisplayObject\n * @memberof PIXI\n */\n\n\nfunction Container() {\n  DisplayObject.call(this);\n  /**\n   * The array of children of this container.\n   *\n   * @member {DisplayObject[]}\n   * @readonly\n   */\n\n  this.children = [];\n} // constructor\n\n\nContainer.prototype = Object.create(DisplayObject.prototype);\nContainer.prototype.constructor = Container;\nmodule.exports = Container;\nObject.defineProperties(Container.prototype, {\n  /**\n   * The width of the Container, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   * @memberof PIXI.Container#\n   */\n  width: {\n    get: function () {\n      return this.scale.x * this.getLocalBounds().width;\n    },\n    set: function (value) {\n      var width = this.getLocalBounds().width;\n\n      if (width !== 0) {\n        this.scale.x = value / width;\n      } else {\n        this.scale.x = 1;\n      }\n\n      this._width = value;\n    }\n  },\n\n  /**\n   * The height of the Container, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   * @memberof PIXI.Container#\n   */\n  height: {\n    get: function () {\n      return this.scale.y * this.getLocalBounds().height;\n    },\n    set: function (value) {\n      var height = this.getLocalBounds().height;\n\n      if (height !== 0) {\n        this.scale.y = value / height;\n      } else {\n        this.scale.y = 1;\n      }\n\n      this._height = value;\n    }\n  }\n});\n/**\n * Adds a child to the container.\n *\n * @param child {DisplayObject} The DisplayObject to add to the container\n * @return {DisplayObject} The child that was added.\n */\n\nContainer.prototype.addChild = function (child) {\n  return this.addChildAt(child, this.children.length);\n};\n/**\n * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n *\n * @param child {DisplayObject} The child to add\n * @param index {Number} The index to place the child in\n * @return {DisplayObject} The child that was added.\n */\n\n\nContainer.prototype.addChildAt = function (child, index) {\n  // prevent adding self as child\n  if (child === this) {\n    return child;\n  }\n\n  if (index >= 0 && index <= this.children.length) {\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n\n    child.parent = this;\n    this.children.splice(index, 0, child);\n    child.emit('added', this);\n    return child;\n  } else {\n    throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);\n  }\n};\n/**\n * Swaps the position of 2 Display Objects within this container.\n *\n * @param child {DisplayObject}\n * @param child2 {DisplayObject}\n */\n\n\nContainer.prototype.swapChildren = function (child, child2) {\n  if (child === child2) {\n    return;\n  }\n\n  var index1 = this.getChildIndex(child);\n  var index2 = this.getChildIndex(child2);\n\n  if (index1 < 0 || index2 < 0) {\n    throw new Error('swapChildren: Both the supplied DisplayObjects must be children of the caller.');\n  }\n\n  this.children[index1] = child2;\n  this.children[index2] = child;\n};\n/**\n * Returns the index position of a child DisplayObject instance\n *\n * @param child {DisplayObject} The DisplayObject instance to identify\n * @return {Number} The index position of the child display object to identify\n */\n\n\nContainer.prototype.getChildIndex = function (child) {\n  var index = this.children.indexOf(child);\n\n  if (index === -1) {\n    throw new Error('The supplied DisplayObject must be a child of the caller');\n  }\n\n  return index;\n};\n/**\n * Changes the position of an existing child in the display object container\n *\n * @param child {DisplayObject} The child DisplayObject instance for which you want to change the index number\n * @param index {Number} The resulting index number for the child display object\n */\n\n\nContainer.prototype.setChildIndex = function (child, index) {\n  if (index < 0 || index >= this.children.length) {\n    throw new Error('The supplied index is out of bounds');\n  }\n\n  var currentIndex = this.getChildIndex(child);\n  this.children.splice(currentIndex, 1); //remove from old position\n\n  this.children.splice(index, 0, child); //add at new position\n};\n/**\n * Returns the child at the specified index\n *\n * @param index {Number} The index to get the child at\n * @return {DisplayObject} The child at the given index, if any.\n */\n\n\nContainer.prototype.getChildAt = function (index) {\n  if (index < 0 || index >= this.children.length) {\n    throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject is not a child of the caller');\n  }\n\n  return this.children[index];\n};\n/**\n * Removes a child from the container.\n *\n * @param child {DisplayObject} The DisplayObject to remove\n * @return {DisplayObject} The child that was removed.\n */\n\n\nContainer.prototype.removeChild = function (child) {\n  var index = this.children.indexOf(child);\n\n  if (index === -1) {\n    return;\n  }\n\n  return this.removeChildAt(index);\n};\n/**\n * Removes a child from the specified index position.\n *\n * @param index {Number} The index to get the child from\n * @return {DisplayObject} The child that was removed.\n */\n\n\nContainer.prototype.removeChildAt = function (index) {\n  var child = this.getChildAt(index);\n  child.parent = null;\n  this.children.splice(index, 1);\n  child.emit('removed', this);\n  return child;\n};\n/**\n * Removes all children from this container that are within the begin and end indexes.\n *\n * @param beginIndex {Number} The beginning position. Default value is 0.\n * @param endIndex {Number} The ending position. Default value is size of the container.\n */\n\n\nContainer.prototype.removeChildren = function (beginIndex, endIndex) {\n  var begin = beginIndex || 0;\n  var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n  var range = end - begin;\n\n  if (range > 0 && range <= end) {\n    var removed = this.children.splice(begin, range);\n\n    for (var i = 0; i < removed.length; ++i) {\n      removed[i].parent = null;\n    }\n\n    return removed;\n  } else if (range === 0 && this.children.length === 0) {\n    return [];\n  } else {\n    throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n  }\n};\n/**\n * Useful function that returns a texture of the display object that can then be used to create sprites\n * This can be quite useful if your displayObject is static / complicated and needs to be reused multiple times.\n *\n * @param renderer {CanvasRenderer|WebGLRenderer} The renderer used to generate the texture.\n * @param resolution {Number} The resolution of the texture being generated\n * @param scaleMode {Number} See {@link SCALE_MODES} for possible values\n * @return {Texture} a texture of the display object\n */\n\n\nContainer.prototype.generateTexture = function (renderer, resolution, scaleMode) {\n  var bounds = this.getLocalBounds();\n  var renderTexture = new RenderTexture(renderer, bounds.width | 0, bounds.height | 0, scaleMode, resolution);\n  _tempMatrix.tx = -bounds.x;\n  _tempMatrix.ty = -bounds.y;\n  renderTexture.render(this, _tempMatrix);\n  return renderTexture;\n};\n/*\n * Updates the transform on all children of this container for rendering\n *\n * @private\n */\n\n\nContainer.prototype.updateTransform = function () {\n  if (!this.visible) {\n    return;\n  }\n\n  this.displayObjectUpdateTransform();\n\n  for (var i = 0, j = this.children.length; i < j; ++i) {\n    this.children[i].updateTransform();\n  }\n}; // performance increase to avoid using call.. (10x faster)\n\n\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n/**\n * Retrieves the bounds of the Container as a rectangle. The bounds calculation takes all visible children into consideration.\n *\n * @return {Rectangle} The rectangular bounding area\n */\n\nContainer.prototype.getBounds = function () {\n  if (!this._currentBounds) {\n    if (this.children.length === 0) {\n      return math.Rectangle.EMPTY;\n    } // TODO the bounds have already been calculated this render session so return what we have\n\n\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var childBounds;\n    var childMaxX;\n    var childMaxY;\n    var childVisible = false;\n\n    for (var i = 0, j = this.children.length; i < j; ++i) {\n      var child = this.children[i];\n\n      if (!child.visible) {\n        continue;\n      }\n\n      childVisible = true;\n      childBounds = this.children[i].getBounds();\n      minX = minX < childBounds.x ? minX : childBounds.x;\n      minY = minY < childBounds.y ? minY : childBounds.y;\n      childMaxX = childBounds.width + childBounds.x;\n      childMaxY = childBounds.height + childBounds.y;\n      maxX = maxX > childMaxX ? maxX : childMaxX;\n      maxY = maxY > childMaxY ? maxY : childMaxY;\n    }\n\n    if (!childVisible) {\n      return math.Rectangle.EMPTY;\n    }\n\n    var bounds = this._bounds;\n    bounds.x = minX;\n    bounds.y = minY;\n    bounds.width = maxX - minX;\n    bounds.height = maxY - minY;\n    this._currentBounds = bounds;\n  }\n\n  return this._currentBounds;\n};\n\nContainer.prototype.containerGetBounds = Container.prototype.getBounds;\n/**\n * Retrieves the non-global local bounds of the Container as a rectangle.\n * The calculation takes all visible children into consideration.\n *\n * @return {Rectangle} The rectangular bounding area\n */\n\nContainer.prototype.getLocalBounds = function () {\n  var matrixCache = this.worldTransform;\n  this.worldTransform = math.Matrix.IDENTITY;\n\n  for (var i = 0, j = this.children.length; i < j; ++i) {\n    this.children[i].updateTransform();\n  }\n\n  this.worldTransform = matrixCache;\n  this._currentBounds = null;\n  return this.getBounds(math.Matrix.IDENTITY);\n};\n/**\n * Renders the object using the WebGL renderer\n *\n * @param renderer {WebGLRenderer} The renderer\n */\n\n\nContainer.prototype.renderWebGL = function (renderer) {\n  // if the object is not visible or the alpha is 0 then no need to render this element\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  var i, j; // do a quick check to see if this element has a mask or a filter.\n\n  if (this._mask || this._filters) {\n    renderer.currentRenderer.flush(); // push filter first as we need to ensure the stencil buffer is correct for any masking\n\n    if (this._filters) {\n      renderer.filterManager.pushFilter(this, this._filters);\n    }\n\n    if (this._mask) {\n      renderer.maskManager.pushMask(this, this._mask);\n    }\n\n    renderer.currentRenderer.start(); // add this object to the batch, only rendered if it has a texture.\n\n    this._renderWebGL(renderer); // now loop through the children and make sure they get rendered\n\n\n    for (i = 0, j = this.children.length; i < j; i++) {\n      this.children[i].renderWebGL(renderer);\n    }\n\n    renderer.currentRenderer.flush();\n\n    if (this._mask) {\n      renderer.maskManager.popMask(this, this._mask);\n    }\n\n    if (this._filters) {\n      renderer.filterManager.popFilter();\n    }\n\n    renderer.currentRenderer.start();\n  } else {\n    this._renderWebGL(renderer); // simple render children!\n\n\n    for (i = 0, j = this.children.length; i < j; ++i) {\n      this.children[i].renderWebGL(renderer);\n    }\n  }\n};\n/**\n * To be overridden by the subclass\n *\n * @param renderer {WebGLRenderer} The renderer\n * @private\n */\n\n\nContainer.prototype._renderWebGL = function (renderer) // jshint unused:false\n{// this is where content itself gets rendered...\n};\n/**\n * To be overridden by the subclass\n *\n * @param renderer {CanvasRenderer} The renderer\n * @private\n */\n\n\nContainer.prototype._renderCanvas = function (renderer) // jshint unused:false\n{// this is where content itself gets rendered...\n};\n/**\n * Renders the object using the Canvas renderer\n *\n * @param renderer {CanvasRenderer} The renderer\n */\n\n\nContainer.prototype.renderCanvas = function (renderer) {\n  // if not visible or the alpha is 0 then no need to render this\n  if (!this.visible || this.alpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  if (this._mask) {\n    renderer.maskManager.pushMask(this._mask, renderer);\n  }\n\n  this._renderCanvas(renderer);\n\n  for (var i = 0, j = this.children.length; i < j; ++i) {\n    this.children[i].renderCanvas(renderer);\n  }\n\n  if (this._mask) {\n    renderer.maskManager.popMask(renderer);\n  }\n};\n/**\n * Destroys the container\n * @param [destroyChildren=false] {boolean} if set to true, all the children will have their destroy method called as well\n */\n\n\nContainer.prototype.destroy = function (destroyChildren) {\n  DisplayObject.prototype.destroy.call(this);\n\n  if (destroyChildren) {\n    for (var i = 0, j = this.children.length; i < j; ++i) {\n      this.children[i].destroy(destroyChildren);\n    }\n  }\n\n  this.removeChildren();\n  this.children = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/display/Container.js"],"names":["math","require","DisplayObject","RenderTexture","_tempMatrix","Matrix","Container","call","children","prototype","Object","create","constructor","module","exports","defineProperties","width","get","scale","x","getLocalBounds","set","value","_width","height","y","_height","addChild","child","addChildAt","length","index","parent","removeChild","splice","emit","Error","swapChildren","child2","index1","getChildIndex","index2","indexOf","setChildIndex","currentIndex","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","begin","end","range","removed","i","RangeError","generateTexture","renderer","resolution","scaleMode","bounds","renderTexture","tx","ty","render","updateTransform","visible","displayObjectUpdateTransform","j","containerUpdateTransform","getBounds","_currentBounds","Rectangle","EMPTY","minX","Infinity","minY","maxX","maxY","childBounds","childMaxX","childMaxY","childVisible","_bounds","containerGetBounds","matrixCache","worldTransform","IDENTITY","renderWebGL","worldAlpha","renderable","_mask","_filters","currentRenderer","flush","filterManager","pushFilter","maskManager","pushMask","start","_renderWebGL","popMask","popFilter","_renderCanvas","renderCanvas","alpha","destroy","destroyChildren"],"mappings":"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","sourcesContent":["var math = require('../math'),\n    DisplayObject = require('./DisplayObject'),\n    RenderTexture = require('../textures/RenderTexture'),\n    _tempMatrix = new math.Matrix();\n\n/**\n * A Container represents a collection of display objects.\n * It is the base class of all display objects that act as a container for other objects.\n *\n *```js\n * var container = new PIXI.Container();\n * container.addChild(sprite);\n * ```\n * @class\n * @extends PIXI.DisplayObject\n * @memberof PIXI\n */\nfunction Container()\n{\n    DisplayObject.call(this);\n\n    /**\n     * The array of children of this container.\n     *\n     * @member {DisplayObject[]}\n     * @readonly\n     */\n    this.children = [];\n}\n\n// constructor\nContainer.prototype = Object.create(DisplayObject.prototype);\nContainer.prototype.constructor = Container;\nmodule.exports = Container;\n\nObject.defineProperties(Container.prototype, {\n    /**\n     * The width of the Container, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Container#\n     */\n    width: {\n        get: function ()\n        {\n            return this.scale.x * this.getLocalBounds().width;\n        },\n        set: function (value)\n        {\n\n            var width = this.getLocalBounds().width;\n\n            if (width !== 0)\n            {\n                this.scale.x = value / width;\n            }\n            else\n            {\n                this.scale.x = 1;\n            }\n\n\n            this._width = value;\n        }\n    },\n\n    /**\n     * The height of the Container, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Container#\n     */\n    height: {\n        get: function ()\n        {\n            return  this.scale.y * this.getLocalBounds().height;\n        },\n        set: function (value)\n        {\n\n            var height = this.getLocalBounds().height;\n\n            if (height !== 0)\n            {\n                this.scale.y = value / height ;\n            }\n            else\n            {\n                this.scale.y = 1;\n            }\n\n            this._height = value;\n        }\n    }\n});\n\n/**\n * Adds a child to the container.\n *\n * @param child {DisplayObject} The DisplayObject to add to the container\n * @return {DisplayObject} The child that was added.\n */\nContainer.prototype.addChild = function (child)\n{\n    return this.addChildAt(child, this.children.length);\n};\n\n/**\n * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n *\n * @param child {DisplayObject} The child to add\n * @param index {Number} The index to place the child in\n * @return {DisplayObject} The child that was added.\n */\nContainer.prototype.addChildAt = function (child, index)\n{\n    // prevent adding self as child\n    if (child === this)\n    {\n        return child;\n    }\n\n    if (index >= 0 && index <= this.children.length)\n    {\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n\n        this.children.splice(index, 0, child);\n\n        child.emit('added', this);\n\n        return child;\n    }\n    else\n    {\n        throw new Error(child + 'addChildAt: The index '+ index +' supplied is out of bounds ' + this.children.length);\n    }\n};\n\n/**\n * Swaps the position of 2 Display Objects within this container.\n *\n * @param child {DisplayObject}\n * @param child2 {DisplayObject}\n */\nContainer.prototype.swapChildren = function (child, child2)\n{\n    if (child === child2)\n    {\n        return;\n    }\n\n    var index1 = this.getChildIndex(child);\n    var index2 = this.getChildIndex(child2);\n\n    if (index1 < 0 || index2 < 0)\n    {\n        throw new Error('swapChildren: Both the supplied DisplayObjects must be children of the caller.');\n    }\n\n    this.children[index1] = child2;\n    this.children[index2] = child;\n};\n\n/**\n * Returns the index position of a child DisplayObject instance\n *\n * @param child {DisplayObject} The DisplayObject instance to identify\n * @return {Number} The index position of the child display object to identify\n */\nContainer.prototype.getChildIndex = function (child)\n{\n    var index = this.children.indexOf(child);\n\n    if (index === -1)\n    {\n        throw new Error('The supplied DisplayObject must be a child of the caller');\n    }\n\n    return index;\n};\n\n/**\n * Changes the position of an existing child in the display object container\n *\n * @param child {DisplayObject} The child DisplayObject instance for which you want to change the index number\n * @param index {Number} The resulting index number for the child display object\n */\nContainer.prototype.setChildIndex = function (child, index)\n{\n    if (index < 0 || index >= this.children.length)\n    {\n        throw new Error('The supplied index is out of bounds');\n    }\n\n    var currentIndex = this.getChildIndex(child);\n\n    this.children.splice(currentIndex, 1); //remove from old position\n    this.children.splice(index, 0, child); //add at new position\n};\n\n/**\n * Returns the child at the specified index\n *\n * @param index {Number} The index to get the child at\n * @return {DisplayObject} The child at the given index, if any.\n */\nContainer.prototype.getChildAt = function (index)\n{\n    if (index < 0 || index >= this.children.length)\n    {\n        throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject is not a child of the caller');\n    }\n\n    return this.children[index];\n};\n\n/**\n * Removes a child from the container.\n *\n * @param child {DisplayObject} The DisplayObject to remove\n * @return {DisplayObject} The child that was removed.\n */\nContainer.prototype.removeChild = function (child)\n{\n    var index = this.children.indexOf(child);\n\n    if (index === -1)\n    {\n        return;\n    }\n\n    return this.removeChildAt(index);\n};\n\n/**\n * Removes a child from the specified index position.\n *\n * @param index {Number} The index to get the child from\n * @return {DisplayObject} The child that was removed.\n */\nContainer.prototype.removeChildAt = function (index)\n{\n    var child = this.getChildAt(index);\n\n    child.parent = null;\n    this.children.splice(index, 1);\n\n    child.emit('removed', this);\n\n    return child;\n};\n\n/**\n * Removes all children from this container that are within the begin and end indexes.\n *\n * @param beginIndex {Number} The beginning position. Default value is 0.\n * @param endIndex {Number} The ending position. Default value is size of the container.\n */\nContainer.prototype.removeChildren = function (beginIndex, endIndex)\n{\n    var begin = beginIndex || 0;\n    var end = typeof endIndex === 'number' ? endIndex : this.children.length;\n    var range = end - begin;\n\n    if (range > 0 && range <= end)\n    {\n        var removed = this.children.splice(begin, range);\n\n        for (var i = 0; i < removed.length; ++i)\n        {\n            removed[i].parent = null;\n        }\n\n        return removed;\n    }\n    else if (range === 0 && this.children.length === 0)\n    {\n        return [];\n    }\n    else\n    {\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n};\n\n/**\n * Useful function that returns a texture of the display object that can then be used to create sprites\n * This can be quite useful if your displayObject is static / complicated and needs to be reused multiple times.\n *\n * @param renderer {CanvasRenderer|WebGLRenderer} The renderer used to generate the texture.\n * @param resolution {Number} The resolution of the texture being generated\n * @param scaleMode {Number} See {@link SCALE_MODES} for possible values\n * @return {Texture} a texture of the display object\n */\nContainer.prototype.generateTexture = function (renderer, resolution, scaleMode)\n{\n    var bounds = this.getLocalBounds();\n\n    var renderTexture = new RenderTexture(renderer, bounds.width | 0, bounds.height | 0, scaleMode, resolution);\n\n    _tempMatrix.tx = -bounds.x;\n    _tempMatrix.ty = -bounds.y;\n\n    renderTexture.render(this, _tempMatrix);\n\n    return renderTexture;\n};\n\n/*\n * Updates the transform on all children of this container for rendering\n *\n * @private\n */\nContainer.prototype.updateTransform = function ()\n{\n    if (!this.visible)\n    {\n        return;\n    }\n\n    this.displayObjectUpdateTransform();\n\n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].updateTransform();\n    }\n};\n\n// performance increase to avoid using call.. (10x faster)\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n\n/**\n * Retrieves the bounds of the Container as a rectangle. The bounds calculation takes all visible children into consideration.\n *\n * @return {Rectangle} The rectangular bounding area\n */\nContainer.prototype.getBounds = function ()\n{\n    if(!this._currentBounds)\n    {\n\n        if (this.children.length === 0)\n        {\n            return math.Rectangle.EMPTY;\n        }\n\n        // TODO the bounds have already been calculated this render session so return what we have\n\n        var minX = Infinity;\n        var minY = Infinity;\n\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n\n        var childBounds;\n        var childMaxX;\n        var childMaxY;\n\n        var childVisible = false;\n\n        for (var i = 0, j = this.children.length; i < j; ++i)\n        {\n            var child = this.children[i];\n\n            if (!child.visible)\n            {\n                continue;\n            }\n\n            childVisible = true;\n\n            childBounds = this.children[i].getBounds();\n\n            minX = minX < childBounds.x ? minX : childBounds.x;\n            minY = minY < childBounds.y ? minY : childBounds.y;\n\n            childMaxX = childBounds.width + childBounds.x;\n            childMaxY = childBounds.height + childBounds.y;\n\n            maxX = maxX > childMaxX ? maxX : childMaxX;\n            maxY = maxY > childMaxY ? maxY : childMaxY;\n        }\n\n        if (!childVisible)\n        {\n            return math.Rectangle.EMPTY;\n        }\n\n        var bounds = this._bounds;\n\n        bounds.x = minX;\n        bounds.y = minY;\n        bounds.width = maxX - minX;\n        bounds.height = maxY - minY;\n\n        this._currentBounds = bounds;\n    }\n\n    return this._currentBounds;\n};\n\nContainer.prototype.containerGetBounds = Container.prototype.getBounds;\n\n/**\n * Retrieves the non-global local bounds of the Container as a rectangle.\n * The calculation takes all visible children into consideration.\n *\n * @return {Rectangle} The rectangular bounding area\n */\nContainer.prototype.getLocalBounds = function ()\n{\n    var matrixCache = this.worldTransform;\n\n    this.worldTransform = math.Matrix.IDENTITY;\n\n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].updateTransform();\n    }\n\n    this.worldTransform = matrixCache;\n\n    this._currentBounds = null;\n\n    return this.getBounds( math.Matrix.IDENTITY );\n};\n\n/**\n * Renders the object using the WebGL renderer\n *\n * @param renderer {WebGLRenderer} The renderer\n */\nContainer.prototype.renderWebGL = function (renderer)\n{\n\n    // if the object is not visible or the alpha is 0 then no need to render this element\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    var i, j;\n\n    // do a quick check to see if this element has a mask or a filter.\n    if (this._mask || this._filters)\n    {\n        renderer.currentRenderer.flush();\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (this._filters)\n        {\n            renderer.filterManager.pushFilter(this, this._filters);\n        }\n\n        if (this._mask)\n        {\n            renderer.maskManager.pushMask(this, this._mask);\n        }\n\n        renderer.currentRenderer.start();\n\n        // add this object to the batch, only rendered if it has a texture.\n        this._renderWebGL(renderer);\n\n        // now loop through the children and make sure they get rendered\n        for (i = 0, j = this.children.length; i < j; i++)\n        {\n            this.children[i].renderWebGL(renderer);\n        }\n\n        renderer.currentRenderer.flush();\n\n        if (this._mask)\n        {\n            renderer.maskManager.popMask(this, this._mask);\n        }\n\n        if (this._filters)\n        {\n            renderer.filterManager.popFilter();\n\n        }\n        renderer.currentRenderer.start();\n    }\n    else\n    {\n        this._renderWebGL(renderer);\n\n        // simple render children!\n        for (i = 0, j = this.children.length; i < j; ++i)\n        {\n            this.children[i].renderWebGL(renderer);\n        }\n    }\n};\n\n/**\n * To be overridden by the subclass\n *\n * @param renderer {WebGLRenderer} The renderer\n * @private\n */\nContainer.prototype._renderWebGL = function (renderer) // jshint unused:false\n{\n    // this is where content itself gets rendered...\n};\n\n/**\n * To be overridden by the subclass\n *\n * @param renderer {CanvasRenderer} The renderer\n * @private\n */\nContainer.prototype._renderCanvas = function (renderer) // jshint unused:false\n{\n    // this is where content itself gets rendered...\n};\n\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @param renderer {CanvasRenderer} The renderer\n */\nContainer.prototype.renderCanvas = function (renderer)\n{\n    // if not visible or the alpha is 0 then no need to render this\n    if (!this.visible || this.alpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    if (this._mask)\n    {\n        renderer.maskManager.pushMask(this._mask, renderer);\n    }\n\n    this._renderCanvas(renderer);\n    for (var i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].renderCanvas(renderer);\n    }\n\n    if (this._mask)\n    {\n        renderer.maskManager.popMask(renderer);\n    }\n};\n\n/**\n * Destroys the container\n * @param [destroyChildren=false] {boolean} if set to true, all the children will have their destroy method called as well\n */\nContainer.prototype.destroy = function (destroyChildren)\n{\n    DisplayObject.prototype.destroy.call(this);\n\n    if (destroyChildren)\n    {\n        for (var i = 0, j = this.children.length; i < j; ++i)\n        {\n            this.children[i].destroy(destroyChildren);\n        }\n    }\n\n    this.removeChildren();\n\n    this.children = null;\n};\n"]},"metadata":{},"sourceType":"script"}