{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var destinationLength = destination.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var sourceLength = source.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/wrap-audio-buffer-copy-channel-methods.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,uCAAuC,GAA8C,SAArF,uCAAqF,CAC9F,2BAD8F,EAE9F,oBAF8F,EAG9F;AACA,SAAO,UAAC,WAAD,EAA0C;AAC7C,IAAA,WAAW,CAAC,eAAZ,GAA8B,UAAC,WAAD,EAAc,qBAAd,EAAiE;AAAA,UAA5B,oBAA4B,uEAAL,CAAK;AAC3F,UAAM,YAAY,GAAG,2BAA2B,CAAC,oBAAD,CAAhD;AACA,UAAM,aAAa,GAAG,2BAA2B,CAAC,qBAAD,CAAjD;;AAEA,UAAI,aAAa,IAAI,WAAW,CAAC,gBAAjC,EAAmD;AAC/C,cAAM,oBAAoB,EAA1B;AACH;;AAED,UAAM,iBAAiB,GAAG,WAAW,CAAC,MAAtC;AACA,UAAM,WAAW,GAAG,WAAW,CAAC,cAAZ,CAA2B,aAA3B,CAApB;AACA,UAAM,iBAAiB,GAAG,WAAW,CAAC,MAAtC;;AAEA,WAAK,IAAI,CAAC,GAAG,YAAY,GAAG,CAAf,GAAmB,CAAC,YAApB,GAAmC,CAAhD,EAAmD,CAAC,GAAG,YAAJ,GAAmB,iBAAnB,IAAwC,CAAC,GAAG,iBAA/F,EAAkH,CAAC,IAAI,CAAvH,EAA0H;AACtH,QAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,WAAW,CAAC,CAAC,GAAG,YAAL,CAA5B;AACH;AACJ,KAfD;;AAiBA,IAAA,WAAW,CAAC,aAAZ,GAA4B,UAAC,MAAD,EAAS,qBAAT,EAA4D;AAAA,UAA5B,oBAA4B,uEAAL,CAAK;AACpF,UAAM,YAAY,GAAG,2BAA2B,CAAC,oBAAD,CAAhD;AACA,UAAM,aAAa,GAAG,2BAA2B,CAAC,qBAAD,CAAjD;;AAEA,UAAI,aAAa,IAAI,WAAW,CAAC,gBAAjC,EAAmD;AAC/C,cAAM,oBAAoB,EAA1B;AACH;;AAED,UAAM,iBAAiB,GAAG,WAAW,CAAC,MAAtC;AACA,UAAM,WAAW,GAAG,WAAW,CAAC,cAAZ,CAA2B,aAA3B,CAApB;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,MAA5B;;AAEA,WAAK,IAAI,CAAC,GAAG,YAAY,GAAG,CAAf,GAAmB,CAAC,YAApB,GAAmC,CAAhD,EAAmD,CAAC,GAAG,YAAJ,GAAmB,iBAAnB,IAAwC,CAAC,GAAG,YAA/F,EAA6G,CAAC,IAAI,CAAlH,EAAqH;AACjH,QAAA,WAAW,CAAC,CAAC,GAAG,YAAL,CAAX,GAAgC,MAAM,CAAC,CAAD,CAAtC;AACH;AACJ,KAfD;AAgBH,GAlCD;AAmCH,CAvCM","sourceRoot":"","sourcesContent":["export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods.js.map"]},"metadata":{},"sourceType":"module"}