{"ast":null,"code":"import _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\n\nexport var Filter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Filter, _ToneAudioNode);\n\n  var _super = _createSuper(Filter);\n\n  function Filter() {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    _this = _super.call(this, optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    _this.name = \"Filter\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._filters = [];\n    var options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    _this._filters = [];\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.gain = new Signal({\n      context: _this.context,\n      units: \"decibels\",\n      value: options.gain\n    });\n    _this._type = options.type;\n    _this.rolloff = options.rolloff;\n    readOnly(_assertThisInitialized(_this), [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"getFrequencyResponse\",\n\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var filterClone = new BiquadFilter({\n        frequency: this.frequency.value,\n        gain: this.gain.value,\n        Q: this.Q.value,\n        type: this._type,\n        detune: this.detune.value\n      }); // start with all 1s\n\n      var totalResponse = new Float32Array(len).map(function () {\n        return 1;\n      });\n\n      this._filters.forEach(function () {\n        var response = filterClone.getFrequencyResponse(len);\n        response.forEach(function (val, i) {\n          return totalResponse[i] *= val;\n        });\n      });\n\n      filterClone.dispose();\n      return totalResponse;\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Filter.prototype), \"dispose\", this).call(this);\n\n      this._filters.forEach(function (filter) {\n        filter.dispose();\n      });\n\n      writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n      this.frequency.dispose();\n      this.Q.dispose();\n      this.detune.dispose();\n      this.gain.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._type = type;\n\n      this._filters.forEach(function (filter) {\n        return filter.type = type;\n      });\n    }\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n\n  }, {\n    key: \"rolloff\",\n    get: function get() {\n      return this._rolloff;\n    },\n    set: function set(rolloff) {\n      var rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n      var possibilities = [-12, -24, -48, -96];\n      var cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n      assert(cascadingCount !== -1, \"rolloff can only be \".concat(possibilities.join(\", \")));\n      cascadingCount += 1;\n      this._rolloff = rolloffNum;\n      this.input.disconnect();\n\n      this._filters.forEach(function (filter) {\n        return filter.disconnect();\n      });\n\n      this._filters = new Array(cascadingCount);\n\n      for (var count = 0; count < cascadingCount; count++) {\n        var filter = new BiquadFilter({\n          context: this.context\n        });\n        filter.type = this._type;\n        this.frequency.connect(filter.frequency);\n        this.detune.connect(filter.detune);\n        this.Q.connect(filter.Q);\n        this.gain.connect(filter.gain);\n        this._filters[count] = filter;\n      }\n\n      this._internalChannels = this._filters;\n      connectSeries.apply(void 0, [this.input].concat(_toConsumableArray(this._internalChannels), [this.output]));\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        detune: 0,\n        frequency: 350,\n        gain: 0,\n        rolloff: -12,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n\n  return Filter;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/filter/Filter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n        this.name = \"Filter\";\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        this._filters = [];\n        const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n        this._filters = [];\n        this.Q = new Signal({\n            context: this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this.gain = new Signal({\n            context: this.context,\n            units: \"decibels\",\n            value: options.gain,\n        });\n        this._type = options.type;\n        this.rolloff = options.rolloff;\n        readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            detune: 0,\n            frequency: 350,\n            gain: 0,\n            rolloff: -12,\n            type: \"lowpass\",\n        });\n    }\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        const types = [\"lowpass\", \"highpass\", \"bandpass\",\n            \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n        assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n        this._type = type;\n        this._filters.forEach(filter => filter.type = type);\n    }\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n    get rolloff() {\n        return this._rolloff;\n    }\n    set rolloff(rolloff) {\n        const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n        const possibilities = [-12, -24, -48, -96];\n        let cascadingCount = possibilities.indexOf(rolloffNum);\n        // check the rolloff is valid\n        assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n        cascadingCount += 1;\n        this._rolloff = rolloffNum;\n        this.input.disconnect();\n        this._filters.forEach(filter => filter.disconnect());\n        this._filters = new Array(cascadingCount);\n        for (let count = 0; count < cascadingCount; count++) {\n            const filter = new BiquadFilter({\n                context: this.context,\n            });\n            filter.type = this._type;\n            this.frequency.connect(filter.frequency);\n            this.detune.connect(filter.detune);\n            this.Q.connect(filter.Q);\n            this.gain.connect(filter.gain);\n            this._filters[count] = filter;\n        }\n        this._internalChannels = this._filters;\n        connectSeries(this.input, ...this._internalChannels, this.output);\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    getFrequencyResponse(len = 128) {\n        const filterClone = new BiquadFilter({\n            frequency: this.frequency.value,\n            gain: this.gain.value,\n            Q: this.Q.value,\n            type: this._type,\n            detune: this.detune.value,\n        });\n        // start with all 1s\n        const totalResponse = new Float32Array(len).map(() => 1);\n        this._filters.forEach(() => {\n            const response = filterClone.getFrequencyResponse(len);\n            response.forEach((val, i) => totalResponse[i] *= val);\n        });\n        filterClone.dispose();\n        return totalResponse;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._filters.forEach(filter => {\n            filter.dispose();\n        });\n        writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n        this.frequency.dispose();\n        this.Q.dispose();\n        this.detune.dispose();\n        this.gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Filter.js.map"]},"metadata":{},"sourceType":"module"}