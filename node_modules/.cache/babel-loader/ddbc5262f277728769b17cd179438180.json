{"ast":null,"code":"/**\n * A GraphicsData object.\n *\n * @class\n * @memberof PIXI\n * @param lineWidth {number} the width of the line to draw\n * @param lineColor {number} the color of the line to draw\n * @param lineAlpha {number} the alpha of the line to draw\n * @param fillColor {number} the color of the fill\n * @param fillAlpha {number} the alpha of the fill\n * @param fill      {boolean} whether or not the shape is filled with a colour\n * @param shape     {Circle|Rectangle|Ellipse|Line|Polygon} The shape object to draw.\n */\nfunction GraphicsData(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape) {\n  /*\n   * @member {number} the width of the line to draw\n   */\n  this.lineWidth = lineWidth;\n  /*\n   * @member {number} the color of the line to draw\n   */\n\n  this.lineColor = lineColor;\n  /*\n   * @member {number} the alpha of the line to draw\n   */\n\n  this.lineAlpha = lineAlpha;\n  /*\n   * @member {number} cached tint of the line to draw\n   */\n\n  this._lineTint = lineColor;\n  /*\n   * @member {number} the color of the fill\n   */\n\n  this.fillColor = fillColor;\n  /*\n   * @member {number} the alpha of the fill\n   */\n\n  this.fillAlpha = fillAlpha;\n  /*\n   * @member {number} cached tint of the fill\n   */\n\n  this._fillTint = fillColor;\n  /*\n   * @member {boolean} whether or not the shape is filled with a colour\n   */\n\n  this.fill = fill;\n  /*\n   * @member {Circle|Rectangle|Ellipse|Line|Polygon} The shape object to draw.\n   */\n\n  this.shape = shape;\n  /*\n   * @member {number} The type of the shape, see the Const.Shapes file for all the existing types,\n   */\n\n  this.type = shape.type;\n}\n\nGraphicsData.prototype.constructor = GraphicsData;\nmodule.exports = GraphicsData;\n/**\n * Creates a new GraphicsData object with the same values as this one.\n *\n * @return {GraphicsData}\n */\n\nGraphicsData.prototype.clone = function () {\n  return new GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.fill, this.shape);\n};\n\nGraphicsData.prototype.destroy = function () {\n  this.shape = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/graphics/GraphicsData.js"],"names":["GraphicsData","lineWidth","lineColor","lineAlpha","fillColor","fillAlpha","fill","shape","_lineTint","_fillTint","type","prototype","constructor","module","exports","clone","destroy"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,SAAjC,EAA4CC,SAA5C,EAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,IAA7E,EAAmFC,KAAnF,EACA;AACI;AACJ;AACA;AACI,OAAKN,SAAL,GAAiBA,SAAjB;AAEA;AACJ;AACA;;AACI,OAAKC,SAAL,GAAiBA,SAAjB;AACA;AACJ;AACA;;AACI,OAAKC,SAAL,GAAiBA,SAAjB;AACA;AACJ;AACA;;AACI,OAAKK,SAAL,GAAiBN,SAAjB;AAEA;AACJ;AACA;;AACI,OAAKE,SAAL,GAAiBA,SAAjB;AAEA;AACJ;AACA;;AACI,OAAKC,SAAL,GAAiBA,SAAjB;AAEA;AACJ;AACA;;AACI,OAAKI,SAAL,GAAiBL,SAAjB;AAEA;AACJ;AACA;;AACI,OAAKE,IAAL,GAAYA,IAAZ;AAEA;AACJ;AACA;;AACI,OAAKC,KAAL,GAAaA,KAAb;AAEA;AACJ;AACA;;AACI,OAAKG,IAAL,GAAYH,KAAK,CAACG,IAAlB;AACH;;AAEDV,YAAY,CAACW,SAAb,CAAuBC,WAAvB,GAAqCZ,YAArC;AACAa,MAAM,CAACC,OAAP,GAAiBd,YAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAA,YAAY,CAACW,SAAb,CAAuBI,KAAvB,GAA+B,YAC/B;AACI,SAAO,IAAIf,YAAJ,CACH,KAAKC,SADF,EAEH,KAAKC,SAFF,EAGH,KAAKC,SAHF,EAIH,KAAKC,SAJF,EAKH,KAAKC,SALF,EAMH,KAAKC,IANF,EAOH,KAAKC,KAPF,CAAP;AASH,CAXD;;AAaAP,YAAY,CAACW,SAAb,CAAuBK,OAAvB,GAAiC,YAAY;AACzC,OAAKT,KAAL,GAAa,IAAb;AACH,CAFD","sourcesContent":["/**\n * A GraphicsData object.\n *\n * @class\n * @memberof PIXI\n * @param lineWidth {number} the width of the line to draw\n * @param lineColor {number} the color of the line to draw\n * @param lineAlpha {number} the alpha of the line to draw\n * @param fillColor {number} the color of the fill\n * @param fillAlpha {number} the alpha of the fill\n * @param fill      {boolean} whether or not the shape is filled with a colour\n * @param shape     {Circle|Rectangle|Ellipse|Line|Polygon} The shape object to draw.\n */\nfunction GraphicsData(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape)\n{\n    /*\n     * @member {number} the width of the line to draw\n     */\n    this.lineWidth = lineWidth;\n\n    /*\n     * @member {number} the color of the line to draw\n     */\n    this.lineColor = lineColor;\n    /*\n     * @member {number} the alpha of the line to draw\n     */\n    this.lineAlpha = lineAlpha;\n    /*\n     * @member {number} cached tint of the line to draw\n     */\n    this._lineTint = lineColor;\n\n    /*\n     * @member {number} the color of the fill\n     */\n    this.fillColor = fillColor;\n\n    /*\n     * @member {number} the alpha of the fill\n     */\n    this.fillAlpha = fillAlpha;\n\n    /*\n     * @member {number} cached tint of the fill\n     */\n    this._fillTint = fillColor;\n\n    /*\n     * @member {boolean} whether or not the shape is filled with a colour\n     */\n    this.fill = fill;\n\n    /*\n     * @member {Circle|Rectangle|Ellipse|Line|Polygon} The shape object to draw.\n     */\n    this.shape = shape;\n\n    /*\n     * @member {number} The type of the shape, see the Const.Shapes file for all the existing types,\n     */\n    this.type = shape.type;\n}\n\nGraphicsData.prototype.constructor = GraphicsData;\nmodule.exports = GraphicsData;\n\n/**\n * Creates a new GraphicsData object with the same values as this one.\n *\n * @return {GraphicsData}\n */\nGraphicsData.prototype.clone = function ()\n{\n    return new GraphicsData(\n        this.lineWidth,\n        this.lineColor,\n        this.lineAlpha,\n        this.fillColor,\n        this.fillAlpha,\n        this.fill,\n        this.shape\n    );\n};\n\nGraphicsData.prototype.destroy = function () {\n    this.shape = null;\n};\n"]},"metadata":{},"sourceType":"script"}