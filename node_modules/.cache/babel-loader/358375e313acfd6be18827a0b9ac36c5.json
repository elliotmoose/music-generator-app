{"ast":null,"code":"import * as Tone from 'tone';\nimport { Midi } from '@tonejs/midi';\nexport default class Player {\n  setup() {\n    Tone.start();\n    this.sampler = new Tone.Sampler({\n      urls: {\n        \"C1\": \"C1.mp3\",\n        \"C2\": \"C2.mp3\",\n        \"C3\": \"C3.mp3\",\n        \"C4\": \"C4.mp3\",\n        \"D#4\": \"Ds4.mp3\",\n        \"F#4\": \"Fs4.mp3\",\n        \"A4\": \"A4.mp3\",\n        \"C5\": \"C5.mp3\",\n        \"C6\": \"C6.mp3\"\n      },\n      baseUrl: \"https://tonejs.github.io/audio/salamander/\"\n    }).toDestination();\n  }\n\n  setupTwo() {\n    Tone.start();\n    this.sampler = new Tone.Sampler({\n      urls: {\n        \"C1\": \"C1.mp3\",\n        \"C2\": \"C2.mp3\",\n        \"C3\": \"C3.mp3\",\n        \"C4\": \"C4.mp3\",\n        \"D#4\": \"Ds4.mp3\",\n        \"F#4\": \"Fs4.mp3\",\n        \"A4\": \"A4.mp3\",\n        \"C5\": \"C5.mp3\",\n        \"C6\": \"C6.mp3\"\n      },\n      baseUrl: \"https://tonejs.github.io/audio/salamander/\"\n    }).toDestination();\n  }\n\n  async notesFromMidiFile(fileName) {\n    const midi = await Midi.fromUrl(\"/\" + fileName);\n    console.log(midi);\n    let notes = [];\n    let objTime = 0;\n\n    for (let track of midi.tracks) {\n      for (let note of track.notes) {\n        //console.log('add note: ' + note.name)\n        objTime += note.time;\n        note.objTime = objTime;\n        notes.push(note);\n      }\n    }\n\n    return notes;\n  }\n\n  async playMidiFile(fileName) {\n    let notes = await this.notesFromMidiFile(fileName);\n    console.log(notes[0].name);\n    console.log(notes[1].name);\n    console.log(notes[2].name);\n\n    for (let note of notes) {\n      this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity); // console.log('play note: ' + note.name)\n    }\n  } // async pauseMidiFile(fileName) {\n  //     let notes = []\n  //     for (let note of notes) {\n  //         this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n  //         console.log('play note: ' + note.name)\n  //     }\n  // }\n\n\n  async stopMidiFile() {\n    console.log(\"cut music\");\n    await this.sampler.disconnect(); // await this.sampler.dispose();\n  }\n\n  async playChord(notes) {\n    // console.log(notes); \n    this.sampler.triggerAttackRelease(notes, 2);\n  }\n\n}","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/src/Player.js"],"names":["Tone","Midi","Player","setup","start","sampler","Sampler","urls","baseUrl","toDestination","setupTwo","notesFromMidiFile","fileName","midi","fromUrl","console","log","notes","objTime","track","tracks","note","time","push","playMidiFile","name","triggerAttackRelease","duration","velocity","stopMidiFile","disconnect","playChord"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,eAAe,MAAMC,MAAN,CAAa;AACxBC,EAAAA,KAAK,GAAG;AACJH,IAAAA,IAAI,CAACI,KAAL;AACA,SAAKC,OAAL,GAAe,IAAIL,IAAI,CAACM,OAAT,CAAiB;AAC5BC,MAAAA,IAAI,EAAE;AACF,cAAM,QADJ;AAEF,cAAM,QAFJ;AAGF,cAAM,QAHJ;AAIF,cAAM,QAJJ;AAKF,eAAO,SALL;AAMF,eAAO,SANL;AAOF,cAAM,QAPJ;AAQF,cAAM,QARJ;AASF,cAAM;AATJ,OADsB;AAY5BC,MAAAA,OAAO,EAAE;AAZmB,KAAjB,EAaZC,aAbY,EAAf;AAcH;;AAEDC,EAAAA,QAAQ,GAAE;AACNV,IAAAA,IAAI,CAACI,KAAL;AACA,SAAKC,OAAL,GAAe,IAAIL,IAAI,CAACM,OAAT,CAAiB;AAC5BC,MAAAA,IAAI,EAAE;AACF,cAAM,QADJ;AAEF,cAAM,QAFJ;AAGF,cAAM,QAHJ;AAIF,cAAM,QAJJ;AAKF,eAAO,SALL;AAMF,eAAO,SANL;AAOF,cAAM,QAPJ;AAQF,cAAM,QARJ;AASF,cAAM;AATJ,OADsB;AAY5BC,MAAAA,OAAO,EAAE;AAZmB,KAAjB,EAaZC,aAbY,EAAf;AAcH;;AAED,QAAME,iBAAN,CAAwBC,QAAxB,EAAkC;AAC9B,UAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAa,MAAMF,QAAnB,CAAnB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAII,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,KAAT,IAAkBN,IAAI,CAACO,MAAvB,EAA+B;AAC3B,WAAK,IAAIC,IAAT,IAAiBF,KAAK,CAACF,KAAvB,EAA8B;AAC1B;AACAC,QAAAA,OAAO,IAAIG,IAAI,CAACC,IAAhB;AACAD,QAAAA,IAAI,CAACH,OAAL,GAAeA,OAAf;AACAD,QAAAA,KAAK,CAACM,IAAN,CAAWF,IAAX;AACH;AACJ;;AAGD,WAAOJ,KAAP;AACH;;AACD,QAAMO,YAAN,CAAmBZ,QAAnB,EAA6B;AACzB,QAAIK,KAAK,GAAG,MAAM,KAAKN,iBAAL,CAAuBC,QAAvB,CAAlB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;;AACA,SAAK,IAAIJ,IAAT,IAAiBJ,KAAjB,EAAwB;AACpB,WAAKZ,OAAL,CAAaqB,oBAAb,CAAkC,CAACL,IAAI,CAACI,IAAN,CAAlC,EAA+CJ,IAAI,CAACM,QAApD,EAA8DN,IAAI,CAACC,IAAnE,EAAyED,IAAI,CAACO,QAA9E,EADoB,CAEpB;AACH;AAEJ,GAhEuB,CAiExB;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAMC,YAAN,GAAqB;AACjBd,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM,KAAKX,OAAL,CAAayB,UAAb,EAAN,CAFiB,CAGjB;AACH;;AAED,QAAMC,SAAN,CAAgBd,KAAhB,EAAsB;AAClB;AACA,SAAKZ,OAAL,CAAaqB,oBAAb,CAAkCT,KAAlC,EAAwC,CAAxC;AACH;;AAlFuB","sourcesContent":["import * as Tone from 'tone'\nimport { Midi } from '@tonejs/midi'\n\nexport default class Player {\n    setup() {\n        Tone.start()\n        this.sampler = new Tone.Sampler({\n            urls: {\n                \"C1\": \"C1.mp3\",\n                \"C2\": \"C2.mp3\",\n                \"C3\": \"C3.mp3\",\n                \"C4\": \"C4.mp3\",\n                \"D#4\": \"Ds4.mp3\",\n                \"F#4\": \"Fs4.mp3\",\n                \"A4\": \"A4.mp3\",\n                \"C5\": \"C5.mp3\",\n                \"C6\": \"C6.mp3\",\n            },\n            baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n        }).toDestination()\n    }\n\n    setupTwo(){\n        Tone.start()\n        this.sampler = new Tone.Sampler({\n            urls: {\n                \"C1\": \"C1.mp3\",\n                \"C2\": \"C2.mp3\",\n                \"C3\": \"C3.mp3\",\n                \"C4\": \"C4.mp3\",\n                \"D#4\": \"Ds4.mp3\",\n                \"F#4\": \"Fs4.mp3\",\n                \"A4\": \"A4.mp3\",\n                \"C5\": \"C5.mp3\",\n                \"C6\": \"C6.mp3\",\n            },\n            baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n        }).toDestination()\n    }\n\n    async notesFromMidiFile(fileName) {\n        const midi = await Midi.fromUrl(\"/\" + fileName);\n        console.log(midi)\n        let notes = []\n        let objTime = 0\n        for (let track of midi.tracks) {\n            for (let note of track.notes) {\n                //console.log('add note: ' + note.name)\n                objTime += note.time;\n                note.objTime = objTime;\n                notes.push(note);\n            }\n        }\n\n        \n        return notes\n    }\n    async playMidiFile(fileName) {\n        let notes = await this.notesFromMidiFile(fileName)\n        console.log(notes[0].name)\n        console.log(notes[1].name)\n        console.log(notes[2].name)\n        for (let note of notes) {\n            this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n            // console.log('play note: ' + note.name)\n        }\n\n    }\n    // async pauseMidiFile(fileName) {\n    //     let notes = []\n    //     for (let note of notes) {\n    //         this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n    //         console.log('play note: ' + note.name)\n    //     }\n\n    // }\n    async stopMidiFile() {\n        console.log(\"cut music\")\n        await this.sampler.disconnect();\n        // await this.sampler.dispose();\n    }\n    \n    async playChord(notes){\n        // console.log(notes); \n        this.sampler.triggerAttackRelease(notes,2);\n    }\n}"]},"metadata":{},"sourceType":"module"}