{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\n\nvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\n\nexport var MetalSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(MetalSynth, _Monophonic);\n\n  var _super = _createSuper(MetalSynth);\n\n  function MetalSynth() {\n    var _this;\n\n    _classCallCheck(this, MetalSynth);\n\n    _this = _super.call(this, optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    _this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n\n    _this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n\n    _this._freqMultipliers = [];\n    var options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this._amplitude = new Gain({\n      context: _this.context,\n      gain: 0\n    }).connect(_this.output);\n    _this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: _this.context,\n      type: \"highpass\"\n    }).connect(_this._amplitude);\n\n    for (var i = 0; i < inharmRatios.length; i++) {\n      var osc = new FMOscillator({\n        context: _this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? function () {\n          return _this.onsilence(_assertThisInitialized(_this));\n        } : noOp,\n        type: \"square\"\n      });\n      osc.connect(_this._highpass);\n      _this._oscillators[i] = osc;\n      var mult = new Multiply({\n        context: _this.context,\n        value: inharmRatios[i]\n      });\n      _this._freqMultipliers[i] = mult;\n\n      _this.frequency.chain(mult, osc.frequency);\n\n      _this.detune.connect(osc.detune);\n    }\n\n    _this._filterFreqScaler = new Scale({\n      context: _this.context,\n      max: 7000,\n      min: _this.toFrequency(options.resonance)\n    });\n    _this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: _this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n\n    _this.envelope.chain(_this._filterFreqScaler, _this._highpass.frequency);\n\n    _this.envelope.connect(_this._amplitude.gain); // set the octaves\n\n\n    _this._octaves = options.octaves;\n    _this.octaves = options.octaves;\n    return _this;\n  }\n\n  _createClass(MetalSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n\n    /**\n     * Trigger the attack.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity that the envelope should be triggered at.\n     */\n    value: function _triggerEnvelopeAttack(time) {\n      var _this2 = this;\n\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.envelope.triggerAttack(time, velocity);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.start(time);\n      });\n\n      if (this.envelope.sustain === 0) {\n        this._oscillators.forEach(function (osc) {\n          osc.stop(time + _this2.toSeconds(_this2.envelope.attack) + _this2.toSeconds(_this2.envelope.decay));\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Trigger the release of the envelope.\n     * @param time When the release should be triggered.\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      var _this3 = this;\n\n      this.envelope.triggerRelease(time);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.stop(time + _this3.toSeconds(_this3.envelope.release));\n      });\n\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * The modulationIndex of the oscillators which make up the source.\n     * see [[FMOscillator.modulationIndex]]\n     * @min 1\n     * @max 100\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MetalSynth.prototype), \"dispose\", this).call(this);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.dispose();\n      });\n\n      this._freqMultipliers.forEach(function (freqMult) {\n        return freqMult.dispose();\n      });\n\n      this.frequency.dispose();\n      this.detune.dispose();\n\n      this._filterFreqScaler.dispose();\n\n      this._amplitude.dispose();\n\n      this.envelope.dispose();\n\n      this._highpass.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"modulationIndex\",\n    get: function get() {\n      return this._oscillators[0].modulationIndex.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.modulationIndex.value = val;\n      });\n    }\n    /**\n     * The harmonicity of the oscillators which make up the source.\n     * see Tone.FMOscillator.harmonicity\n     * @min 0.1\n     * @max 10\n     */\n\n  }, {\n    key: \"harmonicity\",\n    get: function get() {\n      return this._oscillators[0].harmonicity.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.harmonicity.value = val;\n      });\n    }\n    /**\n     * The lower level of the highpass filter which is attached to the envelope.\n     * This value should be between [0, 7000]\n     * @min 0\n     * @max 7000\n     */\n\n  }, {\n    key: \"resonance\",\n    get: function get() {\n      return this._filterFreqScaler.min;\n    },\n    set: function set(val) {\n      this._filterFreqScaler.min = this.toFrequency(val);\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the \"resonance\" frequency\n     * that the filter ramps during the attack/decay envelope\n     * @min 0\n     * @max 8\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(val) {\n      this._octaves = val;\n      this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.001,\n          decay: 1.4,\n          release: 0.2\n        }),\n        harmonicity: 5.1,\n        modulationIndex: 32,\n        octaves: 1.5,\n        resonance: 4000\n      });\n    }\n  }]);\n\n  return MetalSynth;\n}(Monophonic);","map":{"version":3,"sources":["../../../Tone/instrument/MetalSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic {\n    constructor() {\n        super(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n        this.name = \"MetalSynth\";\n        /**\n         * The array of FMOscillators\n         */\n        this._oscillators = [];\n        /**\n         * The frequency multipliers\n         */\n        this._freqMultipliers = [];\n        const options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n        });\n        this._amplitude = new Gain({\n            context: this.context,\n            gain: 0,\n        }).connect(this.output);\n        this._highpass = new Filter({\n            // Q: -3.0102999566398125,\n            Q: 0,\n            context: this.context,\n            type: \"highpass\",\n        }).connect(this._amplitude);\n        for (let i = 0; i < inharmRatios.length; i++) {\n            const osc = new FMOscillator({\n                context: this.context,\n                harmonicity: options.harmonicity,\n                modulationIndex: options.modulationIndex,\n                modulationType: \"square\",\n                onstop: i === 0 ? () => this.onsilence(this) : noOp,\n                type: \"square\",\n            });\n            osc.connect(this._highpass);\n            this._oscillators[i] = osc;\n            const mult = new Multiply({\n                context: this.context,\n                value: inharmRatios[i],\n            });\n            this._freqMultipliers[i] = mult;\n            this.frequency.chain(mult, osc.frequency);\n            this.detune.connect(osc.detune);\n        }\n        this._filterFreqScaler = new Scale({\n            context: this.context,\n            max: 7000,\n            min: this.toFrequency(options.resonance),\n        });\n        this.envelope = new Envelope({\n            attack: options.envelope.attack,\n            attackCurve: \"linear\",\n            context: this.context,\n            decay: options.envelope.decay,\n            release: options.envelope.release,\n            sustain: 0,\n        });\n        this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n        this.envelope.connect(this._amplitude.gain);\n        // set the octaves\n        this._octaves = options.octaves;\n        this.octaves = options.octaves;\n    }\n    static getDefaults() {\n        return deepMerge(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.001,\n                decay: 1.4,\n                release: 0.2,\n            }),\n            harmonicity: 5.1,\n            modulationIndex: 32,\n            octaves: 1.5,\n            resonance: 4000,\n        });\n    }\n    /**\n     * Trigger the attack.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity that the envelope should be triggered at.\n     */\n    _triggerEnvelopeAttack(time, velocity = 1) {\n        this.envelope.triggerAttack(time, velocity);\n        this._oscillators.forEach(osc => osc.start(time));\n        if (this.envelope.sustain === 0) {\n            this._oscillators.forEach(osc => {\n                osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n            });\n        }\n        return this;\n    }\n    /**\n     * Trigger the release of the envelope.\n     * @param time When the release should be triggered.\n     */\n    _triggerEnvelopeRelease(time) {\n        this.envelope.triggerRelease(time);\n        this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n        return this;\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * The modulationIndex of the oscillators which make up the source.\n     * see [[FMOscillator.modulationIndex]]\n     * @min 1\n     * @max 100\n     */\n    get modulationIndex() {\n        return this._oscillators[0].modulationIndex.value;\n    }\n    set modulationIndex(val) {\n        this._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n    }\n    /**\n     * The harmonicity of the oscillators which make up the source.\n     * see Tone.FMOscillator.harmonicity\n     * @min 0.1\n     * @max 10\n     */\n    get harmonicity() {\n        return this._oscillators[0].harmonicity.value;\n    }\n    set harmonicity(val) {\n        this._oscillators.forEach(osc => (osc.harmonicity.value = val));\n    }\n    /**\n     * The lower level of the highpass filter which is attached to the envelope.\n     * This value should be between [0, 7000]\n     * @min 0\n     * @max 7000\n     */\n    get resonance() {\n        return this._filterFreqScaler.min;\n    }\n    set resonance(val) {\n        this._filterFreqScaler.min = this.toFrequency(val);\n        this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the \"resonance\" frequency\n     * that the filter ramps during the attack/decay envelope\n     * @min 0\n     * @max 8\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(val) {\n        this._octaves = val;\n        this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n    }\n    dispose() {\n        super.dispose();\n        this._oscillators.forEach(osc => osc.dispose());\n        this._freqMultipliers.forEach(freqMult => freqMult.dispose());\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._filterFreqScaler.dispose();\n        this._amplitude.dispose();\n        this.envelope.dispose();\n        this._highpass.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MetalSynth.js.map"]},"metadata":{},"sourceType":"module"}