{"ast":null,"code":"var scientific = require('scientific-notation');\n\nvar helmholtz = require('helmholtz');\n\nvar pitchFq = require('pitch-fq');\n\nvar knowledge = require('./knowledge');\n\nvar vector = require('./vector');\n\nvar Interval = require('./interval');\n\nfunction pad(str, ch, len) {\n  for (; len > 0; len--) {\n    str += ch;\n  }\n\n  return str;\n}\n\nfunction Note(coord, duration) {\n  if (!(this instanceof Note)) return new Note(coord, duration);\n  duration = duration || {};\n  this.duration = {\n    value: duration.value || 4,\n    dots: duration.dots || 0\n  };\n  this.coord = coord;\n}\n\nNote.prototype = {\n  octave: function () {\n    return this.coord[0] + knowledge.A4[0] - knowledge.notes[this.name()][0] + this.accidentalValue() * 4;\n  },\n  name: function () {\n    return knowledge.fifths[this.coord[1] + knowledge.A4[1] - this.accidentalValue() * 7 + 1];\n  },\n  accidentalValue: function () {\n    return Math.round((this.coord[1] + knowledge.A4[1] - 2) / 7);\n  },\n  accidental: function () {\n    return knowledge.accidentals[this.accidentalValue() + 2];\n  },\n\n  /**\n   * Returns the key number of the note\n   */\n  key: function (white) {\n    if (white) return this.coord[0] * 7 + this.coord[1] * 4 + 29;else return this.coord[0] * 12 + this.coord[1] * 7 + 49;\n  },\n\n  /**\n  * Returns a number ranging from 0-127 representing a MIDI note value\n  */\n  midi: function () {\n    return this.key() + 20;\n  },\n\n  /**\n   * Calculates and returns the frequency of the note.\n   * Optional concert pitch (def. 440)\n   */\n  fq: function (concertPitch) {\n    return pitchFq(this.coord, concertPitch);\n  },\n\n  /**\n   * Returns the pitch class index (chroma) of the note\n   */\n  chroma: function () {\n    var value = (vector.sum(vector.mul(this.coord, [12, 7])) - 3) % 12;\n    return value < 0 ? value + 12 : value;\n  },\n  interval: function (interval) {\n    if (typeof interval === 'string') interval = Interval.toCoord(interval);\n    if (interval instanceof Interval) return new Note(vector.add(this.coord, interval.coord));else if (interval instanceof Note) return new Interval(vector.sub(interval.coord, this.coord));\n  },\n  transpose: function (interval) {\n    this.coord = vector.add(this.coord, interval.coord);\n    return this;\n  },\n\n  /**\n   * Returns the Helmholtz notation form of the note (fx C,, d' F# g#'')\n   */\n  helmholtz: function () {\n    var octave = this.octave();\n    var name = this.name();\n    name = octave < 3 ? name.toUpperCase() : name.toLowerCase();\n    var padchar = octave < 3 ? ',' : '\\'';\n    var padcount = octave < 2 ? 2 - octave : octave - 3;\n    return pad(name + this.accidental(), padchar, padcount);\n  },\n\n  /**\n   * Returns the scientific notation form of the note (fx E4, Bb3, C#7 etc.)\n   */\n  scientific: function () {\n    return this.name().toUpperCase() + this.accidental() + this.octave();\n  },\n\n  /**\n   * Returns notes that are enharmonic with this note.\n   */\n  enharmonics: function (oneaccidental) {\n    var key = this.key(),\n        limit = oneaccidental ? 2 : 3;\n    return ['m3', 'm2', 'm-2', 'm-3'].map(this.interval.bind(this)).filter(function (note) {\n      var acc = note.accidentalValue();\n      var diff = key - (note.key() - acc);\n\n      if (diff < limit && diff > -limit) {\n        note.coord = vector.add(note.coord, vector.mul(knowledge.sharp, diff - acc));\n        return true;\n      }\n    });\n  },\n  solfege: function (scale, showOctaves) {\n    var interval = scale.tonic.interval(this),\n        solfege,\n        stroke,\n        count;\n    if (interval.direction() === 'down') interval = interval.invert();\n\n    if (showOctaves) {\n      count = (this.key(true) - scale.tonic.key(true)) / 7;\n      count = count >= 0 ? Math.floor(count) : -Math.ceil(-count);\n      stroke = count >= 0 ? '\\'' : ',';\n    }\n\n    solfege = knowledge.intervalSolfege[interval.simple(true).toString()];\n    return showOctaves ? pad(solfege, stroke, Math.abs(count)) : solfege;\n  },\n  scaleDegree: function (scale) {\n    var inter = scale.tonic.interval(this); // If the direction is down, or we're dealing with an octave - invert it\n\n    if (inter.direction() === 'down' || inter.coord[1] === 0 && inter.coord[0] !== 0) {\n      inter = inter.invert();\n    }\n\n    inter = inter.simple(true).coord;\n    return scale.scale.reduce(function (index, current, i) {\n      var coord = Interval.toCoord(current).coord;\n      return coord[0] === inter[0] && coord[1] === inter[1] ? i + 1 : index;\n    }, 0);\n  },\n\n  /**\n   * Returns the name of the duration value,\n   * such as 'whole', 'quarter', 'sixteenth' etc.\n   */\n  durationName: function () {\n    return knowledge.durations[this.duration.value];\n  },\n\n  /**\n   * Returns the duration of the note (including dots)\n   * in seconds. The first argument is the tempo in beats\n   * per minute, the second is the beat unit (i.e. the\n   * lower numeral in a time signature).\n   */\n  durationInSeconds: function (bpm, beatUnit) {\n    var secs = 60 / bpm / (this.duration.value / 4) / (beatUnit / 4);\n    return secs * 2 - secs / Math.pow(2, this.duration.dots);\n  },\n\n  /**\n   * Returns the name of the note, with an optional display of octave number\n   */\n  toString: function (dont) {\n    return this.name() + this.accidental() + (dont ? '' : this.octave());\n  }\n};\n\nNote.fromString = function (name, dur) {\n  var coord = scientific(name);\n  if (!coord) coord = helmholtz(name);\n  return new Note(coord, dur);\n};\n\nNote.fromKey = function (key) {\n  var octave = Math.floor((key - 4) / 12);\n  var distance = key - octave * 12 - 4;\n  var name = knowledge.fifths[(2 * Math.round(distance / 2) + 1) % 7];\n  var note = vector.add(vector.sub(knowledge.notes[name], knowledge.A4), [octave + 1, 0]);\n  var diff = key - 49 - vector.sum(vector.mul(note, [12, 7]));\n  return new Note(diff ? vector.add(note, vector.mul(knowledge.sharp, diff)) : note);\n};\n\nNote.fromFrequency = function (fq, concertPitch) {\n  var key, cents, originalFq;\n  concertPitch = concertPitch || 440;\n  key = 49 + 12 * ((Math.log(fq) - Math.log(concertPitch)) / Math.log(2));\n  key = Math.round(key);\n  originalFq = concertPitch * Math.pow(2, (key - 49) / 12);\n  cents = 1200 * (Math.log(fq / originalFq) / Math.log(2));\n  return {\n    note: Note.fromKey(key),\n    cents: cents\n  };\n};\n\nNote.fromMIDI = function (note) {\n  return Note.fromKey(note - 20);\n};\n\nmodule.exports = Note;","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/teoria/lib/note.js"],"names":["scientific","require","helmholtz","pitchFq","knowledge","vector","Interval","pad","str","ch","len","Note","coord","duration","value","dots","prototype","octave","A4","notes","name","accidentalValue","fifths","Math","round","accidental","accidentals","key","white","midi","fq","concertPitch","chroma","sum","mul","interval","toCoord","add","sub","transpose","toUpperCase","toLowerCase","padchar","padcount","enharmonics","oneaccidental","limit","map","bind","filter","note","acc","diff","sharp","solfege","scale","showOctaves","tonic","stroke","count","direction","invert","floor","ceil","intervalSolfege","simple","toString","abs","scaleDegree","inter","reduce","index","current","i","durationName","durations","durationInSeconds","bpm","beatUnit","secs","pow","dont","fromString","dur","fromKey","distance","fromFrequency","cents","originalFq","log","fromMIDI","module","exports"],"mappings":"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","sourcesContent":["var scientific = require('scientific-notation');\nvar helmholtz = require('helmholtz');\nvar pitchFq = require('pitch-fq');\nvar knowledge = require('./knowledge');\nvar vector = require('./vector');\nvar Interval = require('./interval');\n\nfunction pad(str, ch, len) {\n  for (; len > 0; len--) {\n    str += ch;\n  }\n\n  return str;\n}\n\n\nfunction Note(coord, duration) {\n  if (!(this instanceof Note)) return new Note(coord, duration);\n  duration = duration || {};\n\n  this.duration = { value: duration.value || 4, dots: duration.dots || 0 };\n  this.coord = coord;\n}\n\nNote.prototype = {\n  octave: function() {\n    return this.coord[0] + knowledge.A4[0] - knowledge.notes[this.name()][0] +\n      this.accidentalValue() * 4;\n  },\n\n  name: function() {\n    return knowledge.fifths[this.coord[1] + knowledge.A4[1] - this.accidentalValue() * 7 + 1];\n  },\n\n  accidentalValue: function() {\n    return Math.round((this.coord[1] + knowledge.A4[1] - 2) / 7);\n  },\n\n  accidental: function() {\n    return knowledge.accidentals[this.accidentalValue() + 2];\n  },\n\n  /**\n   * Returns the key number of the note\n   */\n  key: function(white) {\n    if (white)\n      return this.coord[0] * 7 + this.coord[1] * 4 + 29;\n    else\n      return this.coord[0] * 12 + this.coord[1] * 7 + 49;\n  },\n\n  /**\n  * Returns a number ranging from 0-127 representing a MIDI note value\n  */\n  midi: function() {\n    return this.key() + 20;\n  },\n\n  /**\n   * Calculates and returns the frequency of the note.\n   * Optional concert pitch (def. 440)\n   */\n  fq: function(concertPitch) {\n    return pitchFq(this.coord, concertPitch)\n  },\n\n  /**\n   * Returns the pitch class index (chroma) of the note\n   */\n  chroma: function() {\n    var value = (vector.sum(vector.mul(this.coord, [12, 7])) - 3) % 12;\n\n    return (value < 0) ? value + 12 : value;\n  },\n\n  interval: function(interval) {\n    if (typeof interval === 'string') interval = Interval.toCoord(interval);\n\n    if (interval instanceof Interval)\n      return new Note(vector.add(this.coord, interval.coord));\n    else if (interval instanceof Note)\n      return new Interval(vector.sub(interval.coord, this.coord));\n  },\n\n  transpose: function(interval) {\n    this.coord = vector.add(this.coord, interval.coord);\n    return this;\n  },\n\n  /**\n   * Returns the Helmholtz notation form of the note (fx C,, d' F# g#'')\n   */\n  helmholtz: function() {\n    var octave = this.octave();\n    var name = this.name();\n    name = octave < 3 ? name.toUpperCase() : name.toLowerCase();\n    var padchar = octave < 3 ? ',' : '\\'';\n    var padcount = octave < 2 ? 2 - octave : octave - 3;\n\n    return pad(name + this.accidental(), padchar, padcount);\n  },\n\n  /**\n   * Returns the scientific notation form of the note (fx E4, Bb3, C#7 etc.)\n   */\n  scientific: function() {\n    return this.name().toUpperCase() + this.accidental() + this.octave();\n  },\n\n  /**\n   * Returns notes that are enharmonic with this note.\n   */\n  enharmonics: function(oneaccidental) {\n    var key = this.key(), limit = oneaccidental ? 2 : 3;\n\n    return ['m3', 'm2', 'm-2', 'm-3']\n      .map(this.interval.bind(this))\n      .filter(function(note) {\n      var acc = note.accidentalValue();\n      var diff = key - (note.key() - acc);\n\n      if (diff < limit && diff > -limit) {\n        note.coord = vector.add(note.coord, vector.mul(knowledge.sharp, diff - acc));\n        return true;\n      }\n    });\n  },\n\n  solfege: function(scale, showOctaves) {\n    var interval = scale.tonic.interval(this), solfege, stroke, count;\n    if (interval.direction() === 'down')\n      interval = interval.invert();\n\n    if (showOctaves) {\n      count = (this.key(true) - scale.tonic.key(true)) / 7;\n      count = (count >= 0) ? Math.floor(count) : -(Math.ceil(-count));\n      stroke = (count >= 0) ? '\\'' : ',';\n    }\n\n    solfege = knowledge.intervalSolfege[interval.simple(true).toString()];\n    return (showOctaves) ? pad(solfege, stroke, Math.abs(count)) : solfege;\n  },\n\n  scaleDegree: function(scale) {\n    var inter = scale.tonic.interval(this);\n\n    // If the direction is down, or we're dealing with an octave - invert it\n    if (inter.direction() === 'down' ||\n       (inter.coord[1] === 0 && inter.coord[0] !== 0)) {\n      inter = inter.invert();\n    }\n\n    inter = inter.simple(true).coord;\n\n    return scale.scale.reduce(function(index, current, i) {\n      var coord = Interval.toCoord(current).coord;\n      return coord[0] === inter[0] && coord[1] === inter[1] ? i + 1 : index;\n    }, 0);\n  },\n\n  /**\n   * Returns the name of the duration value,\n   * such as 'whole', 'quarter', 'sixteenth' etc.\n   */\n  durationName: function() {\n    return knowledge.durations[this.duration.value];\n  },\n\n  /**\n   * Returns the duration of the note (including dots)\n   * in seconds. The first argument is the tempo in beats\n   * per minute, the second is the beat unit (i.e. the\n   * lower numeral in a time signature).\n   */\n  durationInSeconds: function(bpm, beatUnit) {\n    var secs = (60 / bpm) / (this.duration.value / 4) / (beatUnit / 4);\n    return secs * 2 - secs / Math.pow(2, this.duration.dots);\n  },\n\n  /**\n   * Returns the name of the note, with an optional display of octave number\n   */\n  toString: function(dont) {\n    return this.name() + this.accidental() + (dont ? '' : this.octave());\n  }\n};\n\nNote.fromString = function(name, dur) {\n  var coord = scientific(name);\n  if (!coord) coord = helmholtz(name);\n  return new Note(coord, dur);\n}\n\nNote.fromKey = function(key) {\n  var octave = Math.floor((key - 4) / 12);\n  var distance = key - (octave * 12) - 4;\n  var name = knowledge.fifths[(2 * Math.round(distance / 2) + 1) % 7];\n  var note = vector.add(vector.sub(knowledge.notes[name], knowledge.A4), [octave + 1, 0]);\n  var diff = (key - 49) - vector.sum(vector.mul(note, [12, 7]));\n\n  return new Note(diff ? vector.add(note, vector.mul(knowledge.sharp, diff)) : note);\n}\n\nNote.fromFrequency = function(fq, concertPitch) {\n  var key, cents, originalFq;\n  concertPitch = concertPitch || 440;\n\n  key = 49 + 12 * ((Math.log(fq) - Math.log(concertPitch)) / Math.log(2));\n  key = Math.round(key);\n  originalFq = concertPitch * Math.pow(2, (key - 49) / 12);\n  cents = 1200 * (Math.log(fq / originalFq) / Math.log(2));\n\n  return { note: Note.fromKey(key), cents: cents };\n}\n\nNote.fromMIDI = function(note) {\n  return Note.fromKey(note - 20);\n}\n\nmodule.exports = Note;\n"]},"metadata":{},"sourceType":"script"}