{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport var Player = /*#__PURE__*/function (_Source) {\n  _inherits(Player, _Source);\n\n  var _super = _createSuper(Player);\n\n  function Player() {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    _this._activeSources = new Set();\n    var options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer({\n      onload: _this._onload.bind(_assertThisInitialized(_this), options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this.autostart = options.autostart;\n    _this._loop = options.loop;\n    _this._loopStart = options.loopStart;\n    _this._loopEnd = options.loopEnd;\n    _this._playbackRate = options.playbackRate;\n    _this.fadeIn = options.fadeIn;\n    _this.fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"load\",\n\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    value: function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._buffer.load(url);\n\n              case 2:\n                this._onload();\n\n                return _context.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n\n  }, {\n    key: \"_onload\",\n    value: function _onload() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noOp;\n      callback();\n\n      if (this.autostart) {\n        this.start();\n      }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n\n  }, {\n    key: \"_onSourceEnd\",\n    value: function _onSourceEnd(source) {\n      // invoke the onstop function\n      this.onstop(this); // delete the source from the active sources\n\n      this._activeSources.delete(source);\n\n      if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n        // remove the 'implicitEnd' event and replace with an explicit end\n        this._state.cancel(this.now());\n\n        this._state.setStateAtTime(\"stopped\", this.now());\n      }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"start\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n    /**\n     * Internal start method\n     */\n\n  }, {\n    key: \"_start\",\n    value: function _start(startTime, offset, duration) {\n      // if it's a loop the default offset is the loopStart point\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        // otherwise the default offset is 0\n        offset = defaultArg(offset, 0);\n      } // compute the values in seconds\n\n\n      var computedOffset = this.toSeconds(offset); // if it's synced, it should factor in the playback rate for computing the offset\n\n      if (this._synced) {\n        computedOffset *= this._playbackRate;\n      } // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n\n      var origDuration = duration;\n      duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n      var computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n      computedDuration = computedDuration / this._playbackRate; // get the start time\n\n      startTime = this.toSeconds(startTime); // make the source\n\n      var source = new ToneBufferSource({\n        url: this._buffer,\n        context: this.context,\n        fadeIn: this.fadeIn,\n        fadeOut: this.fadeOut,\n        loop: this._loop,\n        loopEnd: this._loopEnd,\n        loopStart: this._loopStart,\n        onended: this._onSourceEnd.bind(this),\n        playbackRate: this._playbackRate\n      }).connect(this.output); // set the looping properties\n\n      if (!this._loop && !this._synced) {\n        // cancel the previous stop\n        this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n        this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n          implicitEnd: true\n        });\n      } // add it to the array of active sources\n\n\n      this._activeSources.add(source); // start it\n\n\n      if (this._loop && isUndef(origDuration)) {\n        source.start(startTime, computedOffset);\n      } else {\n        // subtract the fade out time\n        source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n      }\n    }\n    /**\n     * Stop playback.\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      var computedTime = this.toSeconds(time);\n\n      this._activeSources.forEach(function (source) {\n        return source.stop(computedTime);\n      });\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"restart\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n\n      this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n\n  }, {\n    key: \"seek\",\n    value: function seek(offset, when) {\n      var computedTime = this.toSeconds(when);\n\n      if (this._state.getValueAtTime(computedTime) === \"started\") {\n        var computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n        this._stop(computedTime); // restart it at the given time\n\n\n        this._start(computedTime, computedOffset);\n      }\n\n      return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"setLoopPoints\",\n    value: function setLoopPoints(loopStart, loopEnd) {\n      this.loopStart = loopStart;\n      this.loopEnd = loopEnd;\n      return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Player.prototype), \"dispose\", this).call(this); // disconnect all of the players\n\n\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n\n      this._activeSources.clear();\n\n      this._buffer.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(loopStart) {\n      this._loopStart = loopStart;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopStart = loopStart;\n      });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = loopEnd;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopEnd = loopEnd;\n      });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._buffer;\n    },\n    set: function set(buffer) {\n      this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      // if no change, do nothing\n      if (this._loop === loop) {\n        return;\n      }\n\n      this._loop = loop; // set the loop of all of the sources\n\n      this._activeSources.forEach(function (source) {\n        source.loop = loop;\n      });\n\n      if (loop) {\n        // remove the next stopEvent\n        var stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n        if (stopEvent) {\n          this._state.cancel(stopEvent.time);\n        }\n      }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n      var now = this.now(); // cancel the stop event since it's at a different time now\n\n      var stopEvent = this._state.getNextState(\"stopped\", now);\n\n      if (stopEvent && stopEvent.implicitEnd) {\n        this._state.cancel(stopEvent.time);\n\n        this._activeSources.forEach(function (source) {\n          return source.cancelStop();\n        });\n      } // set all the sources\n\n\n      this._activeSources.forEach(function (source) {\n        source.playbackRate.setValueAtTime(rate, now);\n      });\n    }\n    /**\n     * If the buffer should be reversed\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this._buffer.reverse;\n    },\n    set: function set(rev) {\n      this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffer.loaded;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        autostart: false,\n        fadeIn: 0,\n        fadeOut: 0,\n        loop: false,\n        loopEnd: 0,\n        loopStart: 0,\n        onload: noOp,\n        onerror: noOp,\n        playbackRate: 1,\n        reverse: false\n      });\n    }\n  }]);\n\n  return Player;\n}(Source);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"sources":["../../../../Tone/source/buffer/Player.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source {\n    constructor() {\n        super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"Player\";\n        /**\n         * All of the active buffer source nodes\n         */\n        this._activeSources = new Set();\n        const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this._buffer = new ToneAudioBuffer({\n            onload: this._onload.bind(this, options.onload),\n            onerror: options.onerror,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        this.autostart = options.autostart;\n        this._loop = options.loop;\n        this._loopStart = options.loopStart;\n        this._loopEnd = options.loopEnd;\n        this._playbackRate = options.playbackRate;\n        this.fadeIn = options.fadeIn;\n        this.fadeOut = options.fadeOut;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            autostart: false,\n            fadeIn: 0,\n            fadeOut: 0,\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            onerror: noOp,\n            playbackRate: 1,\n            reverse: false,\n        });\n    }\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._buffer.load(url);\n            this._onload();\n            return this;\n        });\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n    _onload(callback = noOp) {\n        callback();\n        if (this.autostart) {\n            this.start();\n        }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n    _onSourceEnd(source) {\n        // invoke the onstop function\n        this.onstop(this);\n        // delete the source from the active sources\n        this._activeSources.delete(source);\n        if (this._activeSources.size === 0 && !this._synced &&\n            this._state.getValueAtTime(this.now()) === \"started\") {\n            // remove the 'implicitEnd' event and replace with an explicit end\n            this._state.cancel(this.now());\n            this._state.setStateAtTime(\"stopped\", this.now());\n        }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n    start(time, offset, duration) {\n        super.start(time, offset, duration);\n        return this;\n    }\n    /**\n     * Internal start method\n     */\n    _start(startTime, offset, duration) {\n        // if it's a loop the default offset is the loopStart point\n        if (this._loop) {\n            offset = defaultArg(offset, this._loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // compute the values in seconds\n        let computedOffset = this.toSeconds(offset);\n        // if it's synced, it should factor in the playback rate for computing the offset\n        if (this._synced) {\n            computedOffset *= this._playbackRate;\n        }\n        // compute the duration which is either the passed in duration of the buffer.duration - offset\n        const origDuration = duration;\n        duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n        let computedDuration = this.toSeconds(duration);\n        // scale it by the playback rate\n        computedDuration = computedDuration / this._playbackRate;\n        // get the start time\n        startTime = this.toSeconds(startTime);\n        // make the source\n        const source = new ToneBufferSource({\n            url: this._buffer,\n            context: this.context,\n            fadeIn: this.fadeIn,\n            fadeOut: this.fadeOut,\n            loop: this._loop,\n            loopEnd: this._loopEnd,\n            loopStart: this._loopStart,\n            onended: this._onSourceEnd.bind(this),\n            playbackRate: this._playbackRate,\n        }).connect(this.output);\n        // set the looping properties\n        if (!this._loop && !this._synced) {\n            // cancel the previous stop\n            this._state.cancel(startTime + computedDuration);\n            // if it's not looping, set the state change at the end of the sample\n            this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n                implicitEnd: true,\n            });\n        }\n        // add it to the array of active sources\n        this._activeSources.add(source);\n        // start it\n        if (this._loop && isUndef(origDuration)) {\n            source.start(startTime, computedOffset);\n        }\n        else {\n            // subtract the fade out time\n            source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n        }\n    }\n    /**\n     * Stop playback.\n     */\n    _stop(time) {\n        const computedTime = this.toSeconds(time);\n        this._activeSources.forEach(source => source.stop(computedTime));\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    restart(time, offset, duration) {\n        super.restart(time, offset, duration);\n        return this;\n    }\n    _restart(time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n    seek(offset, when) {\n        const computedTime = this.toSeconds(when);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            const computedOffset = this.toSeconds(offset);\n            // if it's currently playing, stop it\n            this._stop(computedTime);\n            // restart it at the given time\n            this._start(computedTime, computedOffset);\n        }\n        return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    setLoopPoints(loopStart, loopEnd) {\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get loopStart() {\n        return this._loopStart;\n    }\n    set loopStart(loopStart) {\n        this._loopStart = loopStart;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach(source => {\n            source.loopStart = loopStart;\n        });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get loopEnd() {\n        return this._loopEnd;\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = loopEnd;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach(source => {\n            source.loopEnd = loopEnd;\n        });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    set buffer(buffer) {\n        this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        // if no change, do nothing\n        if (this._loop === loop) {\n            return;\n        }\n        this._loop = loop;\n        // set the loop of all of the sources\n        this._activeSources.forEach(source => {\n            source.loop = loop;\n        });\n        if (loop) {\n            // remove the next stopEvent\n            const stopEvent = this._state.getNextState(\"stopped\", this.now());\n            if (stopEvent) {\n                this._state.cancel(stopEvent.time);\n            }\n        }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        const now = this.now();\n        // cancel the stop event since it's at a different time now\n        const stopEvent = this._state.getNextState(\"stopped\", now);\n        if (stopEvent && stopEvent.implicitEnd) {\n            this._state.cancel(stopEvent.time);\n            this._activeSources.forEach(source => source.cancelStop());\n        }\n        // set all the sources\n        this._activeSources.forEach(source => {\n            source.playbackRate.setValueAtTime(rate, now);\n        });\n    }\n    /**\n     * If the buffer should be reversed\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n    get reverse() {\n        return this._buffer.reverse;\n    }\n    set reverse(rev) {\n        this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n    get loaded() {\n        return this._buffer.loaded;\n    }\n    dispose() {\n        super.dispose();\n        // disconnect all of the players\n        this._activeSources.forEach(source => source.dispose());\n        this._activeSources.clear();\n        this._buffer.dispose();\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeIn\", void 0);\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeOut\", void 0);\n//# sourceMappingURL=Player.js.map"]},"metadata":{},"sourceType":"module"}