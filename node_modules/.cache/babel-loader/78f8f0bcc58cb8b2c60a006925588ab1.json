{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeGainNodes = new WeakMap();\n\n    var createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n                if (!nativeGainNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                  };\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n                if (nativeGainNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeGainNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createGainNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/gain-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,6BAA6B,GAAoC,SAAjE,6BAAiE,CAC1E,iBAD0E,EAE1E,oBAF0E,EAG1E,kBAH0E,EAI1E,gBAJ0E,EAK1E,uBAL0E,EAM1E;AACA,SAAO,YAAmE;AACtE,QAAM,uBAAuB,GAAG,IAAI,OAAJ,EAAhC;;AAEA,QAAM,cAAc;AAAA,0EAAG,iBACnB,KADmB,EAEnB,yBAFmB,EAGnB,KAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKf,gBAAA,cALe,GAKE,kBAAkB,CAAqB,KAArB,CALpB,EAOnB;;AACM,gBAAA,8BARa,GAQoB,gBAAgB,CAAC,cAAD,EAAiB,yBAAjB,CARpC;;AAUnB,oBAAI,CAAC,8BAAL,EAAqC;AAC3B,kBAAA,OAD2B,GACjB;AACZ,oBAAA,YAAY,EAAE,cAAc,CAAC,YADjB;AAEZ,oBAAA,gBAAgB,EAAE,cAAc,CAAC,gBAFrB;AAGZ,oBAAA,qBAAqB,EAAE,cAAc,CAAC,qBAH1B;AAIZ,oBAAA,IAAI,EAAE,cAAc,CAAC,IAAf,CAAoB;AAJd,mBADiB;AAQjC,kBAAA,cAAc,GAAG,oBAAoB,CAAC,yBAAD,EAA4B,OAA5B,CAArC;AACH;;AAED,gBAAA,uBAAuB,CAAC,GAAxB,CAA4B,yBAA5B,EAAuD,cAAvD;;AArBmB,oBAuBd,8BAvBc;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwBT,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,IAAlC,EAAwC,cAAc,CAAC,IAAvD,EAA6D,KAA7D,CAxBP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA0BT,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,IAAlC,EAAwC,cAAc,CAAC,IAAvD,EAA6D,KAA7D,CA1BR;;AAAA;AAAA;AAAA,uBA6Bb,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,cAAnC,EAAmD,KAAnD,CA7BV;;AAAA;AAAA,iDA+BZ,cA/BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAd,cAAc;AAAA;AAAA;AAAA,OAApB;;AAkCA,WAAO;AACH,MAAA,MADG,kBAEC,KAFD,EAGC,yBAHD,EAIC,KAJD,EAIgC;AAE/B,YAAM,sBAAsB,GAAG,uBAAuB,CAAC,GAAxB,CAA4B,yBAA5B,CAA/B;;AAEA,YAAI,sBAAsB,KAAK,SAA/B,EAA0C;AACtC,iBAAO,OAAO,CAAC,OAAR,CAAgB,sBAAhB,CAAP;AACH;;AAED,eAAO,cAAc,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAArB;AACH;AAbE,KAAP;AAeH,GApDD;AAqDH,CA5DM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=gain-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}