{"ast":null,"code":"'use strict';\n\nvar Resource = require('../../Resource');\n\nvar b64 = require('../../b64');\n\nvar Url = window.URL || window.webkitURL; // a middleware for transforming XHR loaded Blobs into more useful objects\n\nmodule.exports = function () {\n  return function (resource, next) {\n    if (!resource.data) {\n      next();\n      return;\n    } // if this was an XHR load of a blob\n\n\n    if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {\n      // if there is no blob support we probably got a binary string back\n      if (!window.Blob || typeof resource.data === 'string') {\n        var type = resource.xhr.getResponseHeader('content-type'); // this is an image, convert the binary string into a data url\n\n        if (type && type.indexOf('image') === 0) {\n          resource.data = new Image();\n          resource.data.src = 'data:' + type + ';base64,' + b64.encodeBinary(resource.xhr.responseText);\n          resource.isImage = true; // wait until the image loads and then callback\n\n          resource.data.onload = function () {\n            resource.data.onload = null;\n            next();\n          }; // next will be called on load\n\n\n          return;\n        }\n      } // if content type says this is an image, then we should transform the blob into an Image object\n      else if (resource.data.type.indexOf('image') === 0) {\n          var src = Url.createObjectURL(resource.data);\n          resource.blob = resource.data;\n          resource.data = new Image();\n          resource.data.src = src;\n          resource.isImage = true; // cleanup the no longer used blob after the image loads\n\n          resource.data.onload = function () {\n            Url.revokeObjectURL(src);\n            resource.data.onload = null;\n            next();\n          }; // next will be called on load.\n\n\n          return;\n        }\n    }\n\n    next();\n  };\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/resource-loader/src/middlewares/parsing/blob.js"],"names":["Resource","require","b64","Url","window","URL","webkitURL","module","exports","resource","next","data","xhr","xhrType","XHR_RESPONSE_TYPE","BLOB","Blob","type","getResponseHeader","indexOf","Image","src","encodeBinary","responseText","isImage","onload","createObjectURL","blob","revokeObjectURL"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AAEA,IAAIE,GAAG,GAAGC,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,SAA/B,C,CAEA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAY;AACzB,SAAO,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC7B,QAAI,CAACD,QAAQ,CAACE,IAAd,EAAoB;AAChBD,MAAAA,IAAI;AAEJ;AACH,KAL4B,CAO7B;;;AACA,QAAID,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACI,OAAT,KAAqBb,QAAQ,CAACc,iBAAT,CAA2BC,IAApE,EAA0E;AACtE;AACA,UAAI,CAACX,MAAM,CAACY,IAAR,IAAgB,OAAOP,QAAQ,CAACE,IAAhB,KAAyB,QAA7C,EAAuD;AACnD,YAAIM,IAAI,GAAGR,QAAQ,CAACG,GAAT,CAAaM,iBAAb,CAA+B,cAA/B,CAAX,CADmD,CAGnD;;AACA,YAAID,IAAI,IAAIA,IAAI,CAACE,OAAL,CAAa,OAAb,MAA0B,CAAtC,EAAyC;AACrCV,UAAAA,QAAQ,CAACE,IAAT,GAAgB,IAAIS,KAAJ,EAAhB;AACAX,UAAAA,QAAQ,CAACE,IAAT,CAAcU,GAAd,GAAoB,UAAUJ,IAAV,GAAiB,UAAjB,GAA8Bf,GAAG,CAACoB,YAAJ,CAAiBb,QAAQ,CAACG,GAAT,CAAaW,YAA9B,CAAlD;AAEAd,UAAAA,QAAQ,CAACe,OAAT,GAAmB,IAAnB,CAJqC,CAMrC;;AACAf,UAAAA,QAAQ,CAACE,IAAT,CAAcc,MAAd,GAAuB,YAAY;AAC/BhB,YAAAA,QAAQ,CAACE,IAAT,CAAcc,MAAd,GAAuB,IAAvB;AAEAf,YAAAA,IAAI;AACP,WAJD,CAPqC,CAarC;;;AACA;AACH;AACJ,OApBD,CAqBA;AArBA,WAsBK,IAAID,QAAQ,CAACE,IAAT,CAAcM,IAAd,CAAmBE,OAAnB,CAA2B,OAA3B,MAAwC,CAA5C,EAA+C;AAChD,cAAIE,GAAG,GAAGlB,GAAG,CAACuB,eAAJ,CAAoBjB,QAAQ,CAACE,IAA7B,CAAV;AAEAF,UAAAA,QAAQ,CAACkB,IAAT,GAAgBlB,QAAQ,CAACE,IAAzB;AACAF,UAAAA,QAAQ,CAACE,IAAT,GAAgB,IAAIS,KAAJ,EAAhB;AACAX,UAAAA,QAAQ,CAACE,IAAT,CAAcU,GAAd,GAAoBA,GAApB;AAEAZ,UAAAA,QAAQ,CAACe,OAAT,GAAmB,IAAnB,CAPgD,CAShD;;AACAf,UAAAA,QAAQ,CAACE,IAAT,CAAcc,MAAd,GAAuB,YAAY;AAC/BtB,YAAAA,GAAG,CAACyB,eAAJ,CAAoBP,GAApB;AACAZ,YAAAA,QAAQ,CAACE,IAAT,CAAcc,MAAd,GAAuB,IAAvB;AAEAf,YAAAA,IAAI;AACP,WALD,CAVgD,CAiBhD;;;AACA;AACH;AACJ;;AAEDA,IAAAA,IAAI;AACP,GAvDD;AAwDH,CAzDD","sourcesContent":["'use strict';\n\nvar Resource = require('../../Resource');\nvar b64 = require('../../b64');\n\nvar Url = window.URL || window.webkitURL;\n\n// a middleware for transforming XHR loaded Blobs into more useful objects\n\nmodule.exports = function () {\n    return function (resource, next) {\n        if (!resource.data) {\n            next();\n\n            return;\n        }\n\n        // if this was an XHR load of a blob\n        if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {\n            // if there is no blob support we probably got a binary string back\n            if (!window.Blob || typeof resource.data === 'string') {\n                var type = resource.xhr.getResponseHeader('content-type');\n\n                // this is an image, convert the binary string into a data url\n                if (type && type.indexOf('image') === 0) {\n                    resource.data = new Image();\n                    resource.data.src = 'data:' + type + ';base64,' + b64.encodeBinary(resource.xhr.responseText);\n\n                    resource.isImage = true;\n\n                    // wait until the image loads and then callback\n                    resource.data.onload = function () {\n                        resource.data.onload = null;\n\n                        next();\n                    };\n\n                    // next will be called on load\n                    return;\n                }\n            }\n            // if content type says this is an image, then we should transform the blob into an Image object\n            else if (resource.data.type.indexOf('image') === 0) {\n                var src = Url.createObjectURL(resource.data);\n\n                resource.blob = resource.data;\n                resource.data = new Image();\n                resource.data.src = src;\n\n                resource.isImage = true;\n\n                // cleanup the no longer used blob after the image loads\n                resource.data.onload = function () {\n                    Url.revokeObjectURL(src);\n                    resource.data.onload = null;\n\n                    next();\n                };\n\n                // next will be called on load.\n                return;\n            }\n        }\n\n        next();\n    };\n};\n"]},"metadata":{},"sourceType":"script"}