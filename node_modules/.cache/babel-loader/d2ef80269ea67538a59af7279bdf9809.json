{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport var Tremolo = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Tremolo, _StereoEffect);\n\n  var _super = _createSuper(Tremolo);\n\n  function Tremolo() {\n    var _this;\n\n    _classCallCheck(this, Tremolo);\n\n    _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n\n    _this.connectEffectLeft(_this._amplitudeL);\n\n    _this.connectEffectRight(_this._amplitudeR);\n\n    _this._lfoL.connect(_this._amplitudeL.gain);\n\n    _this._lfoR.connect(_this._amplitudeR.gain);\n\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  _createClass(Tremolo, [{\n    key: \"start\",\n\n    /**\n     * Start the tremolo.\n     */\n    value: function start(time) {\n      this._lfoL.start(time);\n\n      this._lfoR.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n\n      this._lfoR.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n\n      this._lfoR.sync();\n\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n\n      this._lfoR.unsync();\n\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * The oscillator type.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Tremolo.prototype), \"dispose\", this).call(this);\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._amplitudeL.dispose();\n\n      this._amplitudeR.dispose();\n\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 10,\n        type: \"sine\",\n        depth: 0.5,\n        spread: 180\n      });\n    }\n  }]);\n\n  return Tremolo;\n}(StereoEffect);","map":{"version":3,"sources":["../../../Tone/effect/Tremolo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nexport class Tremolo extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n        this.name = \"Tremolo\";\n        const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n        this._lfoL = new LFO({\n            context: this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        this._lfoR = new LFO({\n            context: this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        this._amplitudeL = new Gain({ context: this.context });\n        this._amplitudeR = new Gain({ context: this.context });\n        this.frequency = new Signal({\n            context: this.context,\n            value: options.frequency,\n            units: \"frequency\",\n        });\n        this.depth = new Signal({\n            context: this.context,\n            value: options.depth,\n            units: \"normalRange\",\n        });\n        readOnly(this, [\"frequency\", \"depth\"]);\n        this.connectEffectLeft(this._amplitudeL);\n        this.connectEffectRight(this._amplitudeR);\n        this._lfoL.connect(this._amplitudeL.gain);\n        this._lfoR.connect(this._amplitudeR.gain);\n        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n        this.spread = options.spread;\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            frequency: 10,\n            type: \"sine\",\n            depth: 0.5,\n            spread: 180,\n        });\n    }\n    /**\n     * Start the tremolo.\n     */\n    start(time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n    stop(time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n    sync() {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        this.context.transport.syncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n    unsync() {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        this.context.transport.unsyncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * The oscillator type.\n     */\n    get type() {\n        return this._lfoL.type;\n    }\n    set type(type) {\n        this._lfoL.type = type;\n        this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get spread() {\n        return this._lfoR.phase - this._lfoL.phase; // 180\n    }\n    set spread(spread) {\n        this._lfoL.phase = 90 - (spread / 2);\n        this._lfoR.phase = (spread / 2) + 90;\n    }\n    dispose() {\n        super.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._amplitudeL.dispose();\n        this._amplitudeR.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Tremolo.js.map"]},"metadata":{},"sourceType":"module"}