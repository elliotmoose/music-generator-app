{"ast":null,"code":"import _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\n\nvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\n\nvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\n\nvar allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\n\nexport var JCReverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(JCReverb, _StereoEffect);\n\n  var _super = _createSuper(JCReverb);\n\n  function JCReverb() {\n    var _this;\n\n    _classCallCheck(this, JCReverb);\n\n    _this = _super.call(this, optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    _this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n\n    _this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n\n    _this._feedbackCombFilters = [];\n    var options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    _this._scaleRoomSize = new Scale({\n      context: _this.context,\n      min: -0.733,\n      max: 0.197\n    }); // make the allpass filters\n\n    _this._allpassFilters = allpassFilterFreqs.map(function (freq) {\n      var allpass = _this.context.createBiquadFilter();\n\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    }); // and the comb filters\n\n    _this._feedbackCombFilters = combFilterDelayTimes.map(function (delayTime, index) {\n      var fbcf = new FeedbackCombFilter({\n        context: _this.context,\n        delayTime: delayTime\n      });\n\n      _this._scaleRoomSize.connect(fbcf.resonance);\n\n      fbcf.resonance.value = combFilterResonances[index];\n\n      if (index < combFilterDelayTimes.length / 2) {\n        var _this2;\n\n        (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      } else {\n        var _this3;\n\n        (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      }\n\n      return fbcf;\n    }); // chain the allpass filters together\n\n    _this.roomSize.connect(_this._scaleRoomSize);\n\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n\n  _createClass(JCReverb, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(JCReverb.prototype), \"dispose\", this).call(this);\n\n      this._allpassFilters.forEach(function (apf) {\n        return apf.disconnect();\n      });\n\n      this._feedbackCombFilters.forEach(function (fbcf) {\n        return fbcf.dispose();\n      });\n\n      this.roomSize.dispose();\n\n      this._scaleRoomSize.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.5\n      });\n    }\n  }]);\n\n  return JCReverb;\n}(StereoEffect);","map":{"version":3,"sources":["../../../Tone/effect/JCReverb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\nexport class JCReverb extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n        this.name = \"JCReverb\";\n        /**\n         * a series of allpass filters\n         */\n        this._allpassFilters = [];\n        /**\n         * parallel feedback comb filters\n         */\n        this._feedbackCombFilters = [];\n        const options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n        this.roomSize = new Signal({\n            context: this.context,\n            value: options.roomSize,\n            units: \"normalRange\",\n        });\n        this._scaleRoomSize = new Scale({\n            context: this.context,\n            min: -0.733,\n            max: 0.197,\n        });\n        // make the allpass filters\n        this._allpassFilters = allpassFilterFreqs.map(freq => {\n            const allpass = this.context.createBiquadFilter();\n            allpass.type = \"allpass\";\n            allpass.frequency.value = freq;\n            return allpass;\n        });\n        // and the comb filters\n        this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n            const fbcf = new FeedbackCombFilter({\n                context: this.context,\n                delayTime,\n            });\n            this._scaleRoomSize.connect(fbcf.resonance);\n            fbcf.resonance.value = combFilterResonances[index];\n            if (index < combFilterDelayTimes.length / 2) {\n                this.connectEffectLeft(...this._allpassFilters, fbcf);\n            }\n            else {\n                this.connectEffectRight(...this._allpassFilters, fbcf);\n            }\n            return fbcf;\n        });\n        // chain the allpass filters together\n        this.roomSize.connect(this._scaleRoomSize);\n        readOnly(this, [\"roomSize\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            roomSize: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._allpassFilters.forEach(apf => apf.disconnect());\n        this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n        this.roomSize.dispose();\n        this._scaleRoomSize.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=JCReverb.js.map"]},"metadata":{},"sourceType":"module"}