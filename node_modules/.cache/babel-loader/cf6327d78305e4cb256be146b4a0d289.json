{"ast":null,"code":"var core = require('../core'),\n    InteractionData = require('./InteractionData'); // Mix interactiveTarget into core.DisplayObject.prototype\n\n\nObject.assign(core.DisplayObject.prototype, require('./interactiveTarget'));\n/**\n * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * @class\n * @memberof PIXI.interaction\n * @param renderer {CanvasRenderer|WebGLRenderer} A reference to the current renderer\n * @param [options] {object}\n * @param [options.autoPreventDefault=true] {boolean} Should the manager automatically prevent default browser actions.\n * @param [options.interactionFrequency=10] {number} Frequency increases the interaction events will be checked.\n */\n\nfunction InteractionManager(renderer, options) {\n  options = options || {};\n  /**\n   * The renderer this interaction manager works for.\n   *\n   * @member {SystemRenderer}\n   */\n\n  this.renderer = renderer;\n  /**\n   * Should default browser actions automatically be prevented.\n   *\n   * @member {boolean}\n   * @default true\n   */\n\n  this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n  /**\n   * As this frequency increases the interaction events will be checked more often.\n   *\n   * @member {number}\n   * @default 10\n   */\n\n  this.interactionFrequency = options.interactionFrequency || 10;\n  /**\n   * The mouse data\n   *\n   * @member {InteractionData}\n   */\n\n  this.mouse = new InteractionData();\n  /**\n   * An event data object to handle all the event tracking/dispatching\n   *\n   * @member {EventData}\n   */\n\n  this.eventData = {\n    stopped: false,\n    target: null,\n    type: null,\n    data: this.mouse,\n    stopPropagation: function () {\n      this.stopped = true;\n    }\n  };\n  /**\n   * Tiny little interactiveData pool !\n   *\n   * @member {Array}\n   */\n\n  this.interactiveDataPool = [];\n  /**\n   * The DOM element to bind to.\n   *\n   * @member {HTMLElement}\n   * @private\n   */\n\n  this.interactionDOMElement = null;\n  /**\n   * Have events been attached to the dom element?\n   *\n   * @member {boolean}\n   * @private\n   */\n\n  this.eventsAdded = false; //this will make it so that you don't have to call bind all the time\n\n  /**\n   * @member {Function}\n   */\n\n  this.onMouseUp = this.onMouseUp.bind(this);\n  this.processMouseUp = this.processMouseUp.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onMouseDown = this.onMouseDown.bind(this);\n  this.processMouseDown = this.processMouseDown.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onMouseMove = this.onMouseMove.bind(this);\n  this.processMouseMove = this.processMouseMove.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onMouseOut = this.onMouseOut.bind(this);\n  this.processMouseOverOut = this.processMouseOverOut.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onTouchStart = this.onTouchStart.bind(this);\n  this.processTouchStart = this.processTouchStart.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onTouchEnd = this.onTouchEnd.bind(this);\n  this.processTouchEnd = this.processTouchEnd.bind(this);\n  /**\n   * @member {Function}\n   */\n\n  this.onTouchMove = this.onTouchMove.bind(this);\n  this.processTouchMove = this.processTouchMove.bind(this);\n  /**\n   * @member {number}\n   */\n\n  this.last = 0;\n  /**\n   * The css style of the cursor that is being used\n   * @member {string}\n   */\n\n  this.currentCursorStyle = 'inherit';\n  /**\n   * Internal cached var\n   * @member {Point}\n   * @private\n   */\n\n  this._tempPoint = new core.Point();\n  /**\n   * The current resolution\n   * @member {number}\n   */\n\n  this.resolution = 1;\n  this.setTargetElement(this.renderer.view, this.renderer.resolution);\n}\n\nInteractionManager.prototype.constructor = InteractionManager;\nmodule.exports = InteractionManager;\n/**\n * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n * another DOM element to receive those events.\n *\n * @param element {HTMLElement} the DOM element which will receive mouse and touch events.\n * @param [resolution=1] {number} THe resolution of the new element (relative to the canvas).\n * @private\n */\n\nInteractionManager.prototype.setTargetElement = function (element, resolution) {\n  this.removeEvents();\n  this.interactionDOMElement = element;\n  this.resolution = resolution || 1;\n  this.addEvents();\n};\n/**\n * Registers all the DOM events\n * @private\n */\n\n\nInteractionManager.prototype.addEvents = function () {\n  if (!this.interactionDOMElement) {\n    return;\n  }\n\n  core.ticker.shared.add(this.update, this);\n\n  if (window.navigator.msPointerEnabled) {\n    this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n    this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n  }\n\n  window.document.addEventListener('mousemove', this.onMouseMove, true);\n  this.interactionDOMElement.addEventListener('mousedown', this.onMouseDown, true);\n  this.interactionDOMElement.addEventListener('mouseout', this.onMouseOut, true);\n  this.interactionDOMElement.addEventListener('touchstart', this.onTouchStart, true);\n  this.interactionDOMElement.addEventListener('touchend', this.onTouchEnd, true);\n  this.interactionDOMElement.addEventListener('touchmove', this.onTouchMove, true);\n  window.addEventListener('mouseup', this.onMouseUp, true);\n  this.eventsAdded = true;\n};\n/**\n * Removes all the DOM events that were previously registered\n * @private\n */\n\n\nInteractionManager.prototype.removeEvents = function () {\n  if (!this.interactionDOMElement) {\n    return;\n  }\n\n  core.ticker.shared.remove(this.update);\n\n  if (window.navigator.msPointerEnabled) {\n    this.interactionDOMElement.style['-ms-content-zooming'] = '';\n    this.interactionDOMElement.style['-ms-touch-action'] = '';\n  }\n\n  window.document.removeEventListener('mousemove', this.onMouseMove, true);\n  this.interactionDOMElement.removeEventListener('mousedown', this.onMouseDown, true);\n  this.interactionDOMElement.removeEventListener('mouseout', this.onMouseOut, true);\n  this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);\n  this.interactionDOMElement.removeEventListener('touchend', this.onTouchEnd, true);\n  this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);\n  this.interactionDOMElement = null;\n  window.removeEventListener('mouseup', this.onMouseUp, true);\n  this.eventsAdded = false;\n};\n/**\n * Updates the state of interactive objects.\n * Invoked by a throttled ticker update from\n * {@link PIXI.ticker.shared}.\n *\n * @param deltaTime {number}\n */\n\n\nInteractionManager.prototype.update = function (deltaTime) {\n  this._deltaTime += deltaTime;\n\n  if (this._deltaTime < this.interactionFrequency) {\n    return;\n  }\n\n  this._deltaTime = 0;\n\n  if (!this.interactionDOMElement) {\n    return;\n  } // if the user move the mouse this check has already been dfone using the mouse move!\n\n\n  if (this.didMove) {\n    this.didMove = false;\n    return;\n  }\n\n  this.cursor = 'inherit';\n  this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, true);\n\n  if (this.currentCursorStyle !== this.cursor) {\n    this.currentCursorStyle = this.cursor;\n    this.interactionDOMElement.style.cursor = this.cursor;\n  } //TODO\n\n};\n/**\n * Dispatches an event on the display object that was interacted with\n * @param displayObject {Container|Sprite|TilingSprite} the display object in question\n * @param eventString {string} the name of the event (e.g, mousedown)\n * @param eventData {EventData} the event data object\n * @private\n */\n\n\nInteractionManager.prototype.dispatchEvent = function (displayObject, eventString, eventData) {\n  if (!eventData.stopped) {\n    eventData.target = displayObject;\n    eventData.type = eventString;\n    displayObject.emit(eventString, eventData);\n\n    if (displayObject[eventString]) {\n      displayObject[eventString](eventData);\n    }\n  }\n};\n/**\n * Maps x and y coords from a DOM object and maps them correctly to the pixi view. The resulting value is stored in the point.\n * This takes into account the fact that the DOM element could be scaled and positioned anywhere on the screen.\n *\n * @param  {Point} point the point that the result will be stored in\n * @param  {number} x     the x coord of the position to map\n * @param  {number} y     the y coord of the position to map\n */\n\n\nInteractionManager.prototype.mapPositionToPoint = function (point, x, y) {\n  var rect = this.interactionDOMElement.getBoundingClientRect();\n  point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) / this.resolution;\n  point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) / this.resolution;\n};\n/**\n * This function is provides a neat way of crawling through the scene graph and running a specified function on all interactive objects it finds.\n * It will also take care of hit testing the interactive objects and passes the hit across in the function.\n *\n * @param  {Point} point the point that is tested for collision\n * @param  {Container|Sprite|TilingSprite} displayObject the displayObject that will be hit test (recurcsivly crawls its children)\n * @param  {function} func the function that will be called on each interactive object. The displayObject and hit will be passed to the function\n * @param  {boolean} hitTest this indicates if the objects inside should be hit test against the point\n * @return {boolean} returns true if the displayObject hit the point\n */\n\n\nInteractionManager.prototype.processInteractive = function (point, displayObject, func, hitTest, interactive) {\n  if (!displayObject.visible) {\n    return false;\n  }\n\n  var children = displayObject.children;\n  var hit = false; // if the object is interactive we must hit test all its children..\n\n  interactive = interactive || displayObject.interactive;\n\n  if (displayObject.interactiveChildren) {\n    for (var i = children.length - 1; i >= 0; i--) {\n      if (!hit && hitTest) {\n        hit = this.processInteractive(point, children[i], func, true, interactive);\n      } else {\n        // now we know we can miss it all!\n        this.processInteractive(point, children[i], func, false, false);\n      }\n    }\n  }\n\n  if (interactive) {\n    if (hitTest) {\n      if (displayObject.hitArea) {\n        // lets use the hit object first!\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n        hit = displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y);\n      } else if (displayObject.containsPoint) {\n        hit = displayObject.containsPoint(point);\n      }\n    }\n\n    if (displayObject.interactive) {\n      func(displayObject, hit);\n    }\n  }\n\n  return hit;\n};\n/**\n * Is called when the mouse button is pressed down on the renderer element\n *\n * @param event {Event} The DOM event of a mouse button being pressed down\n * @private\n */\n\n\nInteractionManager.prototype.onMouseDown = function (event) {\n  this.mouse.originalEvent = event;\n  this.eventData.data = this.mouse;\n  this.eventData.stopped = false; // Update internal mouse reference\n\n  this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n  if (this.autoPreventDefault) {\n    this.mouse.originalEvent.preventDefault();\n  }\n\n  this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseDown, true);\n};\n/**\n * Processes the result of the mouse down check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the dispay object\n * @private\n */\n\n\nInteractionManager.prototype.processMouseDown = function (displayObject, hit) {\n  var e = this.mouse.originalEvent;\n  var isRightButton = e.button === 2 || e.which === 3;\n\n  if (hit) {\n    displayObject[isRightButton ? '_isRightDown' : '_isLeftDown'] = true;\n    this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n  }\n};\n/**\n * Is called when the mouse button is released on the renderer element\n *\n * @param event {Event} The DOM event of a mouse button being released\n * @private\n */\n\n\nInteractionManager.prototype.onMouseUp = function (event) {\n  this.mouse.originalEvent = event;\n  this.eventData.data = this.mouse;\n  this.eventData.stopped = false; // Update internal mouse reference\n\n  this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n  this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseUp, true);\n};\n/**\n * Processes the result of the mouse up check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processMouseUp = function (displayObject, hit) {\n  var e = this.mouse.originalEvent;\n  var isRightButton = e.button === 2 || e.which === 3;\n  var isDown = isRightButton ? '_isRightDown' : '_isLeftDown';\n\n  if (hit) {\n    this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', this.eventData);\n\n    if (displayObject[isDown]) {\n      displayObject[isDown] = false;\n      this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', this.eventData);\n    }\n  } else {\n    if (displayObject[isDown]) {\n      displayObject[isDown] = false;\n      this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', this.eventData);\n    }\n  }\n};\n/**\n * Is called when the mouse moves across the renderer element\n *\n * @param event {Event} The DOM event of the mouse moving\n * @private\n */\n\n\nInteractionManager.prototype.onMouseMove = function (event) {\n  this.mouse.originalEvent = event;\n  this.eventData.data = this.mouse;\n  this.eventData.stopped = false;\n  this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n  this.didMove = true;\n  this.cursor = 'inherit';\n  this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseMove, true);\n\n  if (this.currentCursorStyle !== this.cursor) {\n    this.currentCursorStyle = this.cursor;\n    this.interactionDOMElement.style.cursor = this.cursor;\n  } //TODO BUG for parents ineractive object (border order issue)\n\n};\n/**\n * Processes the result of the mouse move check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processMouseMove = function (displayObject, hit) {\n  this.dispatchEvent(displayObject, 'mousemove', this.eventData);\n  this.processMouseOverOut(displayObject, hit);\n};\n/**\n * Is called when the mouse is moved out of the renderer element\n *\n * @param event {Event} The DOM event of a mouse being moved out\n * @private\n */\n\n\nInteractionManager.prototype.onMouseOut = function (event) {\n  this.mouse.originalEvent = event;\n  this.eventData.stopped = false; // Update internal mouse reference\n\n  this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n  this.interactionDOMElement.style.cursor = 'inherit'; // TODO optimize by not check EVERY TIME! maybe half as often? //\n\n  this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n  this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, false);\n};\n/**\n * Processes the result of the mouse over/out check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processMouseOverOut = function (displayObject, hit) {\n  if (hit) {\n    if (!displayObject._over) {\n      displayObject._over = true;\n      this.dispatchEvent(displayObject, 'mouseover', this.eventData);\n    }\n\n    if (displayObject.buttonMode) {\n      this.cursor = displayObject.defaultCursor;\n    }\n  } else {\n    if (displayObject._over) {\n      displayObject._over = false;\n      this.dispatchEvent(displayObject, 'mouseout', this.eventData);\n    }\n  }\n};\n/**\n * Is called when a touch is started on the renderer element\n *\n * @param event {Event} The DOM event of a touch starting on the renderer view\n * @private\n */\n\n\nInteractionManager.prototype.onTouchStart = function (event) {\n  if (this.autoPreventDefault) {\n    event.preventDefault();\n  }\n\n  var changedTouches = event.changedTouches;\n  var cLength = changedTouches.length;\n\n  for (var i = 0; i < cLength; i++) {\n    var touchEvent = changedTouches[i]; //TODO POOL\n\n    var touchData = this.getTouchData(touchEvent);\n    touchData.originalEvent = event;\n    this.eventData.data = touchData;\n    this.eventData.stopped = false;\n    this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchStart, true);\n    this.returnTouchData(touchData);\n  }\n};\n/**\n * Processes the result of a touch check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processTouchStart = function (displayObject, hit) {\n  //console.log(\"hit\" + hit)\n  if (hit) {\n    displayObject._touchDown = true;\n    this.dispatchEvent(displayObject, 'touchstart', this.eventData);\n  }\n};\n/**\n * Is called when a touch ends on the renderer element\n * @param event {Event} The DOM event of a touch ending on the renderer view\n *\n */\n\n\nInteractionManager.prototype.onTouchEnd = function (event) {\n  if (this.autoPreventDefault) {\n    event.preventDefault();\n  }\n\n  var changedTouches = event.changedTouches;\n  var cLength = changedTouches.length;\n\n  for (var i = 0; i < cLength; i++) {\n    var touchEvent = changedTouches[i];\n    var touchData = this.getTouchData(touchEvent);\n    touchData.originalEvent = event; //TODO this should be passed along.. no set\n\n    this.eventData.data = touchData;\n    this.eventData.stopped = false;\n    this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchEnd, true);\n    this.returnTouchData(touchData);\n  }\n};\n/**\n * Processes the result of the end of a touch and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processTouchEnd = function (displayObject, hit) {\n  if (hit) {\n    this.dispatchEvent(displayObject, 'touchend', this.eventData);\n\n    if (displayObject._touchDown) {\n      displayObject._touchDown = false;\n      this.dispatchEvent(displayObject, 'tap', this.eventData);\n    }\n  } else {\n    if (displayObject._touchDown) {\n      displayObject._touchDown = false;\n      this.dispatchEvent(displayObject, 'touchendoutside', this.eventData);\n    }\n  }\n};\n/**\n * Is called when a touch is moved across the renderer element\n *\n * @param event {Event} The DOM event of a touch moving across the renderer view\n * @private\n */\n\n\nInteractionManager.prototype.onTouchMove = function (event) {\n  if (this.autoPreventDefault) {\n    event.preventDefault();\n  }\n\n  var changedTouches = event.changedTouches;\n  var cLength = changedTouches.length;\n\n  for (var i = 0; i < cLength; i++) {\n    var touchEvent = changedTouches[i];\n    var touchData = this.getTouchData(touchEvent);\n    touchData.originalEvent = event;\n    this.eventData.data = touchData;\n    this.eventData.stopped = false;\n    this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchMove, false);\n    this.returnTouchData(touchData);\n  }\n};\n/**\n * Processes the result of a touch move check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\n\n\nInteractionManager.prototype.processTouchMove = function (displayObject, hit) {\n  hit = hit;\n  this.dispatchEvent(displayObject, 'touchmove', this.eventData);\n};\n/**\n * Grabs an interaction data object from the internal pool\n *\n * @param touchEvent {EventData} The touch event we need to pair with an interactionData object\n *\n * @private\n */\n\n\nInteractionManager.prototype.getTouchData = function (touchEvent) {\n  var touchData = this.interactiveDataPool.pop();\n\n  if (!touchData) {\n    touchData = new InteractionData();\n  }\n\n  touchData.identifier = touchEvent.identifier;\n  this.mapPositionToPoint(touchData.global, touchEvent.clientX, touchEvent.clientY);\n\n  if (navigator.isCocoonJS) {\n    touchData.global.x = touchData.global.x / this.resolution;\n    touchData.global.y = touchData.global.y / this.resolution;\n  }\n\n  touchEvent.globalX = touchData.global.x;\n  touchEvent.globalY = touchData.global.y;\n  return touchData;\n};\n/**\n * Returns an interaction data object to the internal pool\n *\n * @param touchData {InteractionData} The touch data object we want to return to the pool\n *\n * @private\n */\n\n\nInteractionManager.prototype.returnTouchData = function (touchData) {\n  this.interactiveDataPool.push(touchData);\n};\n/**\n * Destroys the interaction manager\n */\n\n\nInteractionManager.prototype.destroy = function () {\n  this.removeEvents();\n  this.renderer = null;\n  this.mouse = null;\n  this.eventData = null;\n  this.interactiveDataPool = null;\n  this.interactionDOMElement = null;\n  this.onMouseUp = null;\n  this.processMouseUp = null;\n  this.onMouseDown = null;\n  this.processMouseDown = null;\n  this.onMouseMove = null;\n  this.processMouseMove = null;\n  this.onMouseOut = null;\n  this.processMouseOverOut = null;\n  this.onTouchStart = null;\n  this.processTouchStart = null;\n  this.onTouchEnd = null;\n  this.processTouchEnd = null;\n  this.onTouchMove = null;\n  this.processTouchMove = null;\n  this._tempPoint = null;\n};\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/interaction/InteractionManager.js"],"names":["core","require","InteractionData","Object","assign","DisplayObject","prototype","InteractionManager","renderer","options","autoPreventDefault","undefined","interactionFrequency","mouse","eventData","stopped","target","type","data","stopPropagation","interactiveDataPool","interactionDOMElement","eventsAdded","onMouseUp","bind","processMouseUp","onMouseDown","processMouseDown","onMouseMove","processMouseMove","onMouseOut","processMouseOverOut","onTouchStart","processTouchStart","onTouchEnd","processTouchEnd","onTouchMove","processTouchMove","last","currentCursorStyle","_tempPoint","Point","resolution","setTargetElement","view","constructor","module","exports","element","removeEvents","addEvents","ticker","shared","add","update","window","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","cursor","processInteractive","global","_lastObjectRendered","dispatchEvent","displayObject","eventString","emit","mapPositionToPoint","point","x","y","rect","getBoundingClientRect","left","width","top","height","func","hitTest","interactive","visible","children","hit","interactiveChildren","i","length","hitArea","worldTransform","applyInverse","contains","containsPoint","event","originalEvent","clientX","clientY","preventDefault","e","isRightButton","button","which","isDown","_over","buttonMode","defaultCursor","changedTouches","cLength","touchEvent","touchData","getTouchData","returnTouchData","_touchDown","pop","identifier","isCocoonJS","globalX","globalY","push","destroy","WebGLRenderer","registerPlugin","CanvasRenderer"],"mappings":"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","sourcesContent":["var core = require('../core'),\n    InteractionData = require('./InteractionData');\n\n// Mix interactiveTarget into core.DisplayObject.prototype\nObject.assign(\n    core.DisplayObject.prototype,\n    require('./interactiveTarget')\n);\n\n/**\n * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * @class\n * @memberof PIXI.interaction\n * @param renderer {CanvasRenderer|WebGLRenderer} A reference to the current renderer\n * @param [options] {object}\n * @param [options.autoPreventDefault=true] {boolean} Should the manager automatically prevent default browser actions.\n * @param [options.interactionFrequency=10] {number} Frequency increases the interaction events will be checked.\n */\nfunction InteractionManager(renderer, options)\n{\n    options = options || {};\n\n    /**\n     * The renderer this interaction manager works for.\n     *\n     * @member {SystemRenderer}\n     */\n    this.renderer = renderer;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n    /**\n     * As this frequency increases the interaction events will be checked more often.\n     *\n     * @member {number}\n     * @default 10\n     */\n    this.interactionFrequency = options.interactionFrequency || 10;\n\n    /**\n     * The mouse data\n     *\n     * @member {InteractionData}\n     */\n    this.mouse = new InteractionData();\n\n    /**\n     * An event data object to handle all the event tracking/dispatching\n     *\n     * @member {EventData}\n     */\n    this.eventData = {\n        stopped: false,\n        target: null,\n        type: null,\n        data: this.mouse,\n        stopPropagation:function(){\n            this.stopped = true;\n        }\n    };\n\n    /**\n     * Tiny little interactiveData pool !\n     *\n     * @member {Array}\n     */\n    this.interactiveDataPool = [];\n\n    /**\n     * The DOM element to bind to.\n     *\n     * @member {HTMLElement}\n     * @private\n     */\n    this.interactionDOMElement = null;\n\n    /**\n     * Have events been attached to the dom element?\n     *\n     * @member {boolean}\n     * @private\n     */\n    this.eventsAdded = false;\n\n    //this will make it so that you don't have to call bind all the time\n\n    /**\n     * @member {Function}\n     */\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.processMouseUp = this.processMouseUp.bind( this );\n\n\n    /**\n     * @member {Function}\n     */\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.processMouseDown = this.processMouseDown.bind( this );\n\n    /**\n     * @member {Function}\n     */\n    this.onMouseMove = this.onMouseMove.bind( this );\n    this.processMouseMove = this.processMouseMove.bind( this );\n\n    /**\n     * @member {Function}\n     */\n    this.onMouseOut = this.onMouseOut.bind(this);\n    this.processMouseOverOut = this.processMouseOverOut.bind( this );\n\n\n    /**\n     * @member {Function}\n     */\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.processTouchStart = this.processTouchStart.bind(this);\n\n    /**\n     * @member {Function}\n     */\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.processTouchEnd = this.processTouchEnd.bind(this);\n\n    /**\n     * @member {Function}\n     */\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.processTouchMove = this.processTouchMove.bind(this);\n\n    /**\n     * @member {number}\n     */\n    this.last = 0;\n\n    /**\n     * The css style of the cursor that is being used\n     * @member {string}\n     */\n    this.currentCursorStyle = 'inherit';\n\n    /**\n     * Internal cached var\n     * @member {Point}\n     * @private\n     */\n    this._tempPoint = new core.Point();\n\n    /**\n     * The current resolution\n     * @member {number}\n     */\n    this.resolution = 1;\n\n    this.setTargetElement(this.renderer.view, this.renderer.resolution);\n}\n\nInteractionManager.prototype.constructor = InteractionManager;\nmodule.exports = InteractionManager;\n\n/**\n * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n * another DOM element to receive those events.\n *\n * @param element {HTMLElement} the DOM element which will receive mouse and touch events.\n * @param [resolution=1] {number} THe resolution of the new element (relative to the canvas).\n * @private\n */\nInteractionManager.prototype.setTargetElement = function (element, resolution)\n{\n    this.removeEvents();\n\n    this.interactionDOMElement = element;\n\n    this.resolution = resolution || 1;\n\n    this.addEvents();\n};\n\n/**\n * Registers all the DOM events\n * @private\n */\nInteractionManager.prototype.addEvents = function ()\n{\n    if (!this.interactionDOMElement)\n    {\n        return;\n    }\n\n    core.ticker.shared.add(this.update, this);\n\n    if (window.navigator.msPointerEnabled)\n    {\n        this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n        this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n    }\n\n    window.document.addEventListener('mousemove',    this.onMouseMove, true);\n    this.interactionDOMElement.addEventListener('mousedown',    this.onMouseDown, true);\n    this.interactionDOMElement.addEventListener('mouseout',     this.onMouseOut, true);\n\n    this.interactionDOMElement.addEventListener('touchstart',   this.onTouchStart, true);\n    this.interactionDOMElement.addEventListener('touchend',     this.onTouchEnd, true);\n    this.interactionDOMElement.addEventListener('touchmove',    this.onTouchMove, true);\n\n    window.addEventListener('mouseup',  this.onMouseUp, true);\n\n    this.eventsAdded = true;\n};\n\n/**\n * Removes all the DOM events that were previously registered\n * @private\n */\nInteractionManager.prototype.removeEvents = function ()\n{\n    if (!this.interactionDOMElement)\n    {\n        return;\n    }\n\n    core.ticker.shared.remove(this.update);\n\n    if (window.navigator.msPointerEnabled)\n    {\n        this.interactionDOMElement.style['-ms-content-zooming'] = '';\n        this.interactionDOMElement.style['-ms-touch-action'] = '';\n    }\n\n    window.document.removeEventListener('mousemove', this.onMouseMove, true);\n    this.interactionDOMElement.removeEventListener('mousedown', this.onMouseDown, true);\n    this.interactionDOMElement.removeEventListener('mouseout',  this.onMouseOut, true);\n\n    this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);\n    this.interactionDOMElement.removeEventListener('touchend',  this.onTouchEnd, true);\n    this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);\n\n    this.interactionDOMElement = null;\n\n    window.removeEventListener('mouseup',  this.onMouseUp, true);\n\n    this.eventsAdded = false;\n};\n\n/**\n * Updates the state of interactive objects.\n * Invoked by a throttled ticker update from\n * {@link PIXI.ticker.shared}.\n *\n * @param deltaTime {number}\n */\nInteractionManager.prototype.update = function (deltaTime)\n{\n    this._deltaTime += deltaTime;\n\n    if (this._deltaTime < this.interactionFrequency)\n    {\n        return;\n    }\n\n    this._deltaTime = 0;\n\n    if (!this.interactionDOMElement)\n    {\n        return;\n    }\n\n    // if the user move the mouse this check has already been dfone using the mouse move!\n    if(this.didMove)\n    {\n        this.didMove = false;\n        return;\n    }\n\n    this.cursor = 'inherit';\n\n    this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, true );\n\n    if (this.currentCursorStyle !== this.cursor)\n    {\n        this.currentCursorStyle = this.cursor;\n        this.interactionDOMElement.style.cursor = this.cursor;\n    }\n\n    //TODO\n};\n\n/**\n * Dispatches an event on the display object that was interacted with\n * @param displayObject {Container|Sprite|TilingSprite} the display object in question\n * @param eventString {string} the name of the event (e.g, mousedown)\n * @param eventData {EventData} the event data object\n * @private\n */\nInteractionManager.prototype.dispatchEvent = function ( displayObject, eventString, eventData )\n{\n    if(!eventData.stopped)\n    {\n        eventData.target = displayObject;\n        eventData.type = eventString;\n\n        displayObject.emit( eventString, eventData );\n\n        if( displayObject[eventString] )\n        {\n            displayObject[eventString]( eventData );\n        }\n    }\n};\n\n/**\n * Maps x and y coords from a DOM object and maps them correctly to the pixi view. The resulting value is stored in the point.\n * This takes into account the fact that the DOM element could be scaled and positioned anywhere on the screen.\n *\n * @param  {Point} point the point that the result will be stored in\n * @param  {number} x     the x coord of the position to map\n * @param  {number} y     the y coord of the position to map\n */\nInteractionManager.prototype.mapPositionToPoint = function ( point, x, y )\n{\n    var rect = this.interactionDOMElement.getBoundingClientRect();\n    point.x = ( ( x - rect.left ) * (this.interactionDOMElement.width  / rect.width  ) ) / this.resolution;\n    point.y = ( ( y - rect.top  ) * (this.interactionDOMElement.height / rect.height ) ) / this.resolution;\n};\n\n/**\n * This function is provides a neat way of crawling through the scene graph and running a specified function on all interactive objects it finds.\n * It will also take care of hit testing the interactive objects and passes the hit across in the function.\n *\n * @param  {Point} point the point that is tested for collision\n * @param  {Container|Sprite|TilingSprite} displayObject the displayObject that will be hit test (recurcsivly crawls its children)\n * @param  {function} func the function that will be called on each interactive object. The displayObject and hit will be passed to the function\n * @param  {boolean} hitTest this indicates if the objects inside should be hit test against the point\n * @return {boolean} returns true if the displayObject hit the point\n */\nInteractionManager.prototype.processInteractive = function (point, displayObject, func, hitTest, interactive )\n{\n    if(!displayObject.visible)\n    {\n        return false;\n    }\n\n    var children = displayObject.children;\n\n    var hit = false;\n\n    // if the object is interactive we must hit test all its children..\n    interactive = interactive || displayObject.interactive;\n\n    if(displayObject.interactiveChildren)\n    {\n\n        for (var i = children.length-1; i >= 0; i--)\n        {\n            if(! hit  && hitTest)\n            {\n                hit = this.processInteractive(point, children[i], func, true, interactive );\n            }\n            else\n            {\n                // now we know we can miss it all!\n                this.processInteractive(point, children[i], func, false, false );\n            }\n        }\n\n    }\n\n    if(interactive)\n    {\n        if(hitTest)\n        {\n            if(displayObject.hitArea)\n            {\n                // lets use the hit object first!\n                displayObject.worldTransform.applyInverse(point,  this._tempPoint);\n                hit = displayObject.hitArea.contains( this._tempPoint.x, this._tempPoint.y );\n            }\n            else if(displayObject.containsPoint)\n            {\n                hit = displayObject.containsPoint(point);\n            }\n        }\n\n        if(displayObject.interactive)\n        {\n            func(displayObject, hit);\n        }\n    }\n\n    return hit;\n};\n\n\n\n\n/**\n * Is called when the mouse button is pressed down on the renderer element\n *\n * @param event {Event} The DOM event of a mouse button being pressed down\n * @private\n */\nInteractionManager.prototype.onMouseDown = function (event)\n{\n    this.mouse.originalEvent = event;\n    this.eventData.data = this.mouse;\n    this.eventData.stopped = false;\n\n    // Update internal mouse reference\n    this.mapPositionToPoint( this.mouse.global, event.clientX, event.clientY);\n\n    if (this.autoPreventDefault)\n    {\n        this.mouse.originalEvent.preventDefault();\n    }\n\n    this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseDown, true );\n};\n\n/**\n * Processes the result of the mouse down check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the dispay object\n * @private\n */\nInteractionManager.prototype.processMouseDown = function ( displayObject, hit )\n{\n    var e = this.mouse.originalEvent;\n\n    var isRightButton = e.button === 2 || e.which === 3;\n\n    if(hit)\n    {\n        displayObject[ isRightButton ? '_isRightDown' : '_isLeftDown' ] = true;\n        this.dispatchEvent( displayObject, isRightButton ? 'rightdown' : 'mousedown', this.eventData );\n    }\n};\n\n\n\n/**\n * Is called when the mouse button is released on the renderer element\n *\n * @param event {Event} The DOM event of a mouse button being released\n * @private\n */\nInteractionManager.prototype.onMouseUp = function (event)\n{\n    this.mouse.originalEvent = event;\n    this.eventData.data = this.mouse;\n    this.eventData.stopped = false;\n\n    // Update internal mouse reference\n    this.mapPositionToPoint( this.mouse.global, event.clientX, event.clientY);\n\n    this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseUp, true );\n};\n\n/**\n * Processes the result of the mouse up check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processMouseUp = function ( displayObject, hit )\n{\n    var e = this.mouse.originalEvent;\n\n    var isRightButton = e.button === 2 || e.which === 3;\n    var isDown =  isRightButton ? '_isRightDown' : '_isLeftDown';\n\n    if(hit)\n    {\n        this.dispatchEvent( displayObject, isRightButton ? 'rightup' : 'mouseup', this.eventData );\n\n        if( displayObject[ isDown ] )\n        {\n            displayObject[ isDown ] = false;\n            this.dispatchEvent( displayObject, isRightButton ? 'rightclick' : 'click', this.eventData );\n        }\n    }\n    else\n    {\n        if( displayObject[ isDown ] )\n        {\n            displayObject[ isDown ] = false;\n            this.dispatchEvent( displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', this.eventData );\n        }\n    }\n};\n\n\n/**\n * Is called when the mouse moves across the renderer element\n *\n * @param event {Event} The DOM event of the mouse moving\n * @private\n */\nInteractionManager.prototype.onMouseMove = function (event)\n{\n    this.mouse.originalEvent = event;\n    this.eventData.data = this.mouse;\n    this.eventData.stopped = false;\n\n    this.mapPositionToPoint( this.mouse.global, event.clientX, event.clientY);\n\n    this.didMove = true;\n\n    this.cursor = 'inherit';\n\n    this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseMove, true );\n\n    if (this.currentCursorStyle !== this.cursor)\n    {\n        this.currentCursorStyle = this.cursor;\n        this.interactionDOMElement.style.cursor = this.cursor;\n    }\n\n    //TODO BUG for parents ineractive object (border order issue)\n};\n\n/**\n * Processes the result of the mouse move check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processMouseMove = function ( displayObject, hit )\n{\n    this.dispatchEvent( displayObject, 'mousemove', this.eventData);\n    this.processMouseOverOut(displayObject, hit);\n};\n\n\n/**\n * Is called when the mouse is moved out of the renderer element\n *\n * @param event {Event} The DOM event of a mouse being moved out\n * @private\n */\nInteractionManager.prototype.onMouseOut = function (event)\n{\n    this.mouse.originalEvent = event;\n    this.eventData.stopped = false;\n\n    // Update internal mouse reference\n    this.mapPositionToPoint( this.mouse.global, event.clientX, event.clientY);\n\n    this.interactionDOMElement.style.cursor = 'inherit';\n\n    // TODO optimize by not check EVERY TIME! maybe half as often? //\n    this.mapPositionToPoint( this.mouse.global, event.clientX, event.clientY );\n\n    this.processInteractive( this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, false );\n};\n\n/**\n * Processes the result of the mouse over/out check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processMouseOverOut = function ( displayObject, hit )\n{\n    if(hit)\n    {\n        if(!displayObject._over)\n        {\n            displayObject._over = true;\n            this.dispatchEvent( displayObject, 'mouseover', this.eventData );\n        }\n\n        if (displayObject.buttonMode)\n        {\n            this.cursor = displayObject.defaultCursor;\n        }\n    }\n    else\n    {\n        if(displayObject._over)\n        {\n            displayObject._over = false;\n            this.dispatchEvent( displayObject, 'mouseout', this.eventData);\n        }\n    }\n};\n\n\n/**\n * Is called when a touch is started on the renderer element\n *\n * @param event {Event} The DOM event of a touch starting on the renderer view\n * @private\n */\nInteractionManager.prototype.onTouchStart = function (event)\n{\n    if (this.autoPreventDefault)\n    {\n        event.preventDefault();\n    }\n\n    var changedTouches = event.changedTouches;\n    var cLength = changedTouches.length;\n\n    for (var i=0; i < cLength; i++)\n    {\n        var touchEvent = changedTouches[i];\n        //TODO POOL\n        var touchData = this.getTouchData( touchEvent );\n\n        touchData.originalEvent = event;\n\n        this.eventData.data = touchData;\n        this.eventData.stopped = false;\n\n        this.processInteractive( touchData.global, this.renderer._lastObjectRendered, this.processTouchStart, true );\n\n        this.returnTouchData( touchData );\n    }\n};\n\n/**\n * Processes the result of a touch check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processTouchStart = function ( displayObject, hit )\n{\n    //console.log(\"hit\" + hit)\n    if(hit)\n    {\n        displayObject._touchDown = true;\n        this.dispatchEvent( displayObject, 'touchstart', this.eventData );\n    }\n};\n\n\n/**\n * Is called when a touch ends on the renderer element\n * @param event {Event} The DOM event of a touch ending on the renderer view\n *\n */\nInteractionManager.prototype.onTouchEnd = function (event)\n{\n    if (this.autoPreventDefault)\n    {\n        event.preventDefault();\n    }\n\n    var changedTouches = event.changedTouches;\n    var cLength = changedTouches.length;\n\n    for (var i=0; i < cLength; i++)\n    {\n        var touchEvent = changedTouches[i];\n\n        var touchData = this.getTouchData( touchEvent );\n\n        touchData.originalEvent = event;\n\n        //TODO this should be passed along.. no set\n        this.eventData.data = touchData;\n        this.eventData.stopped = false;\n\n\n        this.processInteractive( touchData.global, this.renderer._lastObjectRendered, this.processTouchEnd, true );\n\n        this.returnTouchData( touchData );\n    }\n};\n\n/**\n * Processes the result of the end of a touch and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processTouchEnd = function ( displayObject, hit )\n{\n    if(hit)\n    {\n        this.dispatchEvent( displayObject, 'touchend', this.eventData );\n\n        if( displayObject._touchDown )\n        {\n            displayObject._touchDown = false;\n            this.dispatchEvent( displayObject, 'tap', this.eventData );\n        }\n    }\n    else\n    {\n        if( displayObject._touchDown )\n        {\n            displayObject._touchDown = false;\n            this.dispatchEvent( displayObject, 'touchendoutside', this.eventData );\n        }\n    }\n};\n\n/**\n * Is called when a touch is moved across the renderer element\n *\n * @param event {Event} The DOM event of a touch moving across the renderer view\n * @private\n */\nInteractionManager.prototype.onTouchMove = function (event)\n{\n    if (this.autoPreventDefault)\n    {\n        event.preventDefault();\n    }\n\n    var changedTouches = event.changedTouches;\n    var cLength = changedTouches.length;\n\n    for (var i=0; i < cLength; i++)\n    {\n        var touchEvent = changedTouches[i];\n\n        var touchData = this.getTouchData( touchEvent );\n\n        touchData.originalEvent = event;\n\n        this.eventData.data = touchData;\n        this.eventData.stopped = false;\n\n        this.processInteractive( touchData.global, this.renderer._lastObjectRendered, this.processTouchMove, false );\n\n        this.returnTouchData( touchData );\n    }\n};\n\n/**\n * Processes the result of a touch move check and dispatches the event if need be\n *\n * @param displayObject {Container|Sprite|TilingSprite} The display object that was tested\n * @param hit {boolean} the result of the hit test on the display object\n * @private\n */\nInteractionManager.prototype.processTouchMove = function ( displayObject, hit )\n{\n    hit = hit;\n    this.dispatchEvent( displayObject, 'touchmove', this.eventData);\n};\n\n/**\n * Grabs an interaction data object from the internal pool\n *\n * @param touchEvent {EventData} The touch event we need to pair with an interactionData object\n *\n * @private\n */\nInteractionManager.prototype.getTouchData = function (touchEvent)\n{\n    var touchData = this.interactiveDataPool.pop();\n\n    if(!touchData)\n    {\n        touchData = new InteractionData();\n    }\n\n    touchData.identifier = touchEvent.identifier;\n    this.mapPositionToPoint( touchData.global, touchEvent.clientX, touchEvent.clientY );\n\n    if(navigator.isCocoonJS)\n    {\n        touchData.global.x = touchData.global.x / this.resolution;\n        touchData.global.y = touchData.global.y / this.resolution;\n    }\n\n    touchEvent.globalX = touchData.global.x;\n    touchEvent.globalY = touchData.global.y;\n\n    return touchData;\n};\n\n/**\n * Returns an interaction data object to the internal pool\n *\n * @param touchData {InteractionData} The touch data object we want to return to the pool\n *\n * @private\n */\nInteractionManager.prototype.returnTouchData = function ( touchData )\n{\n    this.interactiveDataPool.push( touchData );\n};\n\n/**\n * Destroys the interaction manager\n */\nInteractionManager.prototype.destroy = function () {\n    this.removeEvents();\n\n    this.renderer = null;\n\n    this.mouse = null;\n\n    this.eventData = null;\n\n    this.interactiveDataPool = null;\n\n    this.interactionDOMElement = null;\n\n    this.onMouseUp = null;\n    this.processMouseUp = null;\n\n\n    this.onMouseDown = null;\n    this.processMouseDown = null;\n\n    this.onMouseMove = null;\n    this.processMouseMove = null;\n\n    this.onMouseOut = null;\n    this.processMouseOverOut = null;\n\n\n    this.onTouchStart = null;\n    this.processTouchStart = null;\n\n    this.onTouchEnd = null;\n    this.processTouchEnd = null;\n\n    this.onTouchMove = null;\n    this.processTouchMove = null;\n\n    this._tempPoint = null;\n};\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"]},"metadata":{},"sourceType":"script"}