{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport var MidSideEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(MidSideEffect, _Effect);\n\n  var _super = _createSuper(MidSideEffect);\n\n  function MidSideEffect(options) {\n    var _this;\n\n    _classCallCheck(this, MidSideEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"MidSideEffect\";\n    _this._midSideMerge = new MidSideMerge({\n      context: _this.context\n    });\n    _this._midSideSplit = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSend = _this._midSideSplit.mid;\n    _this._sideSend = _this._midSideSplit.side;\n    _this._midReturn = _this._midSideMerge.mid;\n    _this._sideReturn = _this._midSideMerge.side; // the connections\n\n    _this.effectSend.connect(_this._midSideSplit);\n\n    _this._midSideMerge.connect(_this.effectReturn);\n\n    return _this;\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  _createClass(MidSideEffect, [{\n    key: \"connectEffectMid\",\n    value: function connectEffectMid() {\n      var _this$_midSend;\n\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      (_this$_midSend = this._midSend).chain.apply(_this$_midSend, nodes.concat([this._midReturn]));\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n\n  }, {\n    key: \"connectEffectSide\",\n    value: function connectEffectSide() {\n      var _this$_sideSend;\n\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      (_this$_sideSend = this._sideSend).chain.apply(_this$_sideSend, nodes.concat([this._sideReturn]));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideEffect.prototype), \"dispose\", this).call(this);\n\n      this._midSideSplit.dispose();\n\n      this._midSideMerge.dispose();\n\n      this._midSend.dispose();\n\n      this._sideSend.dispose();\n\n      this._midReturn.dispose();\n\n      this._sideReturn.dispose();\n\n      return this;\n    }\n  }]);\n\n  return MidSideEffect;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/MidSideEffect.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,MAAT,QAAsC,UAAtC;AACA,SAAS,YAAT,QAA6B,mCAA7B;AACA,SAAS,YAAT,QAA6B,mCAA7B;AAKA;;;;;;;;;AASG;;AACH,WAAsB,aAAtB;AAAA;;AAAA;;AAkCC,yBAAY,OAAZ,EAAyC;AAAA;;AAAA;;AAExC,8BAAM,OAAN;AAlCQ,UAAA,IAAA,GAAe,eAAf;AAoCR,UAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAjB,CAArB;AACA,UAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAjB,CAArB;AACA,UAAK,QAAL,GAAgB,MAAK,aAAL,CAAmB,GAAnC;AACA,UAAK,SAAL,GAAiB,MAAK,aAAL,CAAmB,IAApC;AACA,UAAK,UAAL,GAAkB,MAAK,aAAL,CAAmB,GAArC;AACA,UAAK,WAAL,GAAmB,MAAK,aAAL,CAAmB,IAAtC,CATwC,CAWxC;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,aAA7B;;AACA,UAAK,aAAL,CAAmB,OAAnB,CAA2B,MAAK,YAAhC;;AAbwC;AAcxC;AAED;;AAEG;;;AApDJ;AAAA;AAAA,uCAqDkD;AAAA;;AAAA,wCAAnB,KAAmB;AAAnB,QAAA,KAAmB;AAAA;;AAChD,6BAAK,QAAL,EAAc,KAAd,uBAAuB,KAAvB,SAA8B,KAAK,UAAnC;AACA;AAED;;AAEG;;AA3DJ;AAAA;AAAA,wCA4DmD;AAAA;;AAAA,yCAAnB,KAAmB;AAAnB,QAAA,KAAmB;AAAA;;AACjD,8BAAK,SAAL,EAAe,KAAf,wBAAwB,KAAxB,SAA+B,KAAK,WAApC;AACA;AA9DF;AAAA;AAAA,8BAgEQ;AACN;;AACA,WAAK,aAAL,CAAmB,OAAnB;;AACA,WAAK,aAAL,CAAmB,OAAnB;;AACA,WAAK,QAAL,CAAc,OAAd;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,WAAK,WAAL,CAAiB,OAAjB;;AACA,aAAO,IAAP;AACA;AAzEF;;AAAA;AAAA,EAAkF,MAAlF","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport class MidSideEffect extends Effect {\n    constructor(options) {\n        super(options);\n        this.name = \"MidSideEffect\";\n        this._midSideMerge = new MidSideMerge({ context: this.context });\n        this._midSideSplit = new MidSideSplit({ context: this.context });\n        this._midSend = this._midSideSplit.mid;\n        this._sideSend = this._midSideSplit.side;\n        this._midReturn = this._midSideMerge.mid;\n        this._sideReturn = this._midSideMerge.side;\n        // the connections\n        this.effectSend.connect(this._midSideSplit);\n        this._midSideMerge.connect(this.effectReturn);\n    }\n    /**\n     * Connect the mid chain of the effect\n     */\n    connectEffectMid(...nodes) {\n        this._midSend.chain(...nodes, this._midReturn);\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n    connectEffectSide(...nodes) {\n        this._sideSend.chain(...nodes, this._sideReturn);\n    }\n    dispose() {\n        super.dispose();\n        this._midSideSplit.dispose();\n        this._midSideMerge.dispose();\n        this._midSend.dispose();\n        this._sideSend.dispose();\n        this._midReturn.dispose();\n        this._sideReturn.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideEffect.js.map"]},"metadata":{},"sourceType":"module"}