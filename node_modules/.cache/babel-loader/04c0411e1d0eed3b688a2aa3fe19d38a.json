{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\n\nexport var Recorder = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Recorder, _ToneAudioNode);\n\n  var _super = _createSuper(Recorder);\n\n  function Recorder() {\n    var _this;\n\n    _classCallCheck(this, Recorder);\n\n    _this = _super.call(this, optionsFromArguments(Recorder.getDefaults(), arguments));\n    _this.name = \"Recorder\";\n    var options = optionsFromArguments(Recorder.getDefaults(), arguments);\n    _this.input = new Gain({\n      context: _this.context\n    });\n    assert(Recorder.supported, \"Media Recorder API is not available\");\n    _this._stream = _this.context.createMediaStreamDestination();\n\n    _this.input.connect(_this._stream);\n\n    _this._recorder = new MediaRecorder(_this._stream.stream, {\n      mimeType: options.mimeType\n    });\n    return _this;\n  }\n\n  _createClass(Recorder, [{\n    key: \"start\",\n\n    /**\n     * Start the Recorder. Returns a promise which resolves\n     * when the recorder has started.\n     */\n    value: function start() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var startPromise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert(this.state !== \"started\", \"Recorder is already started\");\n                startPromise = new Promise(function (done) {\n                  var handleStart = function handleStart() {\n                    _this2._recorder.removeEventListener(\"start\", handleStart, false);\n\n                    done();\n                  };\n\n                  _this2._recorder.addEventListener(\"start\", handleStart, false);\n                });\n\n                this._recorder.start();\n\n                _context.next = 5;\n                return startPromise;\n\n              case 5:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Stop the recorder. Returns a promise with the recorded content until this point\n     * encoded as [[mimeType]]\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var dataPromise;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert(this.state !== \"stopped\", \"Recorder is not started\");\n                dataPromise = new Promise(function (done) {\n                  var handleData = function handleData(e) {\n                    _this3._recorder.removeEventListener(\"dataavailable\", handleData, false);\n\n                    done(e.data);\n                  };\n\n                  _this3._recorder.addEventListener(\"dataavailable\", handleData, false);\n                });\n\n                this._recorder.stop();\n\n                _context2.next = 5;\n                return dataPromise;\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Pause the recorder\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      assert(this.state === \"started\", \"Recorder must be started\");\n\n      this._recorder.pause();\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Recorder.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n\n      this._stream.disconnect();\n\n      return this;\n    }\n  }, {\n    key: \"mimeType\",\n\n    /**\n     * The mime type is the format that the audio is encoded in. For Chrome\n     * that is typically webm encoded as \"vorbis\".\n     */\n    get: function get() {\n      return this._recorder.mimeType;\n    }\n    /**\n     * Test if your platform supports the Media Recorder API. If it's not available,\n     * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n     */\n\n  }, {\n    key: \"state\",\n\n    /**\n     * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n     */\n    get: function get() {\n      if (this._recorder.state === \"inactive\") {\n        return \"stopped\";\n      } else if (this._recorder.state === \"paused\") {\n        return \"paused\";\n      } else {\n        return \"started\";\n      }\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return ToneAudioNode.getDefaults();\n    }\n  }, {\n    key: \"supported\",\n    get: function get() {\n      return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n    }\n  }]);\n\n  return Recorder;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/Recorder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\nexport class Recorder extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Recorder.getDefaults(), arguments));\n        this.name = \"Recorder\";\n        const options = optionsFromArguments(Recorder.getDefaults(), arguments);\n        this.input = new Gain({\n            context: this.context\n        });\n        assert(Recorder.supported, \"Media Recorder API is not available\");\n        this._stream = this.context.createMediaStreamDestination();\n        this.input.connect(this._stream);\n        this._recorder = new MediaRecorder(this._stream.stream, {\n            mimeType: options.mimeType\n        });\n    }\n    static getDefaults() {\n        return ToneAudioNode.getDefaults();\n    }\n    /**\n     * The mime type is the format that the audio is encoded in. For Chrome\n     * that is typically webm encoded as \"vorbis\".\n     */\n    get mimeType() {\n        return this._recorder.mimeType;\n    }\n    /**\n     * Test if your platform supports the Media Recorder API. If it's not available,\n     * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n     */\n    static get supported() {\n        return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n    }\n    /**\n     * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n     */\n    get state() {\n        if (this._recorder.state === \"inactive\") {\n            return \"stopped\";\n        }\n        else if (this._recorder.state === \"paused\") {\n            return \"paused\";\n        }\n        else {\n            return \"started\";\n        }\n    }\n    /**\n     * Start the Recorder. Returns a promise which resolves\n     * when the recorder has started.\n     */\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            assert(this.state !== \"started\", \"Recorder is already started\");\n            const startPromise = new Promise(done => {\n                const handleStart = () => {\n                    this._recorder.removeEventListener(\"start\", handleStart, false);\n                    done();\n                };\n                this._recorder.addEventListener(\"start\", handleStart, false);\n            });\n            this._recorder.start();\n            return yield startPromise;\n        });\n    }\n    /**\n     * Stop the recorder. Returns a promise with the recorded content until this point\n     * encoded as [[mimeType]]\n     */\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            assert(this.state !== \"stopped\", \"Recorder is not started\");\n            const dataPromise = new Promise(done => {\n                const handleData = (e) => {\n                    this._recorder.removeEventListener(\"dataavailable\", handleData, false);\n                    done(e.data);\n                };\n                this._recorder.addEventListener(\"dataavailable\", handleData, false);\n            });\n            this._recorder.stop();\n            return yield dataPromise;\n        });\n    }\n    /**\n     * Pause the recorder\n     */\n    pause() {\n        assert(this.state === \"started\", \"Recorder must be started\");\n        this._recorder.pause();\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this._stream.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Recorder.js.map"]},"metadata":{},"sourceType":"module"}