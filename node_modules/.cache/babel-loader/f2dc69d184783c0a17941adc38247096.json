{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nexport var AutoWah = /*#__PURE__*/function (_Effect) {\n  _inherits(AutoWah, _Effect);\n\n  var _super = _createSuper(AutoWah);\n\n  function AutoWah() {\n    var _this;\n\n    _classCallCheck(this, AutoWah);\n\n    _this = _super.call(this, optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    _this.name = \"AutoWah\";\n    var options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.follower\n    });\n    _this._sweepRange = new ScaleExp({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this._inputBoost = new Gain({\n      context: _this.context\n    });\n    _this._bandpass = new Filter({\n      context: _this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    _this._peaking = new Filter({\n      context: _this.context,\n      type: \"peaking\"\n    });\n    _this._peaking.gain.value = options.gain;\n    _this.gain = _this._peaking.gain;\n    _this.Q = _this._bandpass.Q; // the control signal path\n\n    _this.effectSend.chain(_this._inputBoost, _this._follower, _this._sweepRange);\n\n    _this._sweepRange.connect(_this._bandpass.frequency);\n\n    _this._sweepRange.connect(_this._peaking.frequency); // the filtered path\n\n\n    _this.effectSend.chain(_this._bandpass, _this._peaking, _this.effectReturn); // set the initial value\n\n\n    _this._setSweepRange();\n\n    _this.sensitivity = options.sensitivity;\n    readOnly(_assertThisInitialized(_this), [\"gain\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(AutoWah, [{\n    key: \"_setSweepRange\",\n\n    /**\n     * sets the sweep range of the scaler\n     */\n    value: function _setSweepRange() {\n      this._sweepRange.min = this._baseFrequency;\n      this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoWah.prototype), \"dispose\", this).call(this);\n\n      this._follower.dispose();\n\n      this._sweepRange.dispose();\n\n      this._bandpass.dispose();\n\n      this._peaking.dispose();\n\n      this._inputBoost.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"octaves\",\n\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n\n      this._setSweepRange();\n    }\n    /**\n     * The follower's smoothing time\n     */\n\n  }, {\n    key: \"follower\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(follower) {\n      this._follower.smoothing = follower;\n    }\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(baseFreq) {\n      this._baseFrequency = this.toFrequency(baseFreq);\n\n      this._setSweepRange();\n    }\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n\n  }, {\n    key: \"sensitivity\",\n    get: function get() {\n      return gainToDb(1 / this._inputBoost.gain.value);\n    },\n    set: function set(sensitivity) {\n      this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        baseFrequency: 100,\n        octaves: 6,\n        sensitivity: 0,\n        Q: 2,\n        gain: 2,\n        follower: 0.2\n      });\n    }\n  }]);\n\n  return AutoWah;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/AutoWah.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect {\n    constructor() {\n        super(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n        this.name = \"AutoWah\";\n        const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n        this._follower = new Follower({\n            context: this.context,\n            smoothing: options.follower,\n        });\n        this._sweepRange = new ScaleExp({\n            context: this.context,\n            min: 0,\n            max: 1,\n            exponent: 0.5,\n        });\n        this._baseFrequency = this.toFrequency(options.baseFrequency);\n        this._octaves = options.octaves;\n        this._inputBoost = new Gain({ context: this.context });\n        this._bandpass = new Filter({\n            context: this.context,\n            rolloff: -48,\n            frequency: 0,\n            Q: options.Q,\n        });\n        this._peaking = new Filter({\n            context: this.context,\n            type: \"peaking\"\n        });\n        this._peaking.gain.value = options.gain;\n        this.gain = this._peaking.gain;\n        this.Q = this._bandpass.Q;\n        // the control signal path\n        this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n        this._sweepRange.connect(this._bandpass.frequency);\n        this._sweepRange.connect(this._peaking.frequency);\n        // the filtered path\n        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n        // set the initial value\n        this._setSweepRange();\n        this.sensitivity = options.sensitivity;\n        readOnly(this, [\"gain\", \"Q\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            baseFrequency: 100,\n            octaves: 6,\n            sensitivity: 0,\n            Q: 2,\n            gain: 2,\n            follower: 0.2,\n        });\n    }\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(octaves) {\n        this._octaves = octaves;\n        this._setSweepRange();\n    }\n    /**\n     * The follower's smoothing time\n     */\n    get follower() {\n        return this._follower.smoothing;\n    }\n    set follower(follower) {\n        this._follower.smoothing = follower;\n    }\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n    get baseFrequency() {\n        return this._baseFrequency;\n    }\n    set baseFrequency(baseFreq) {\n        this._baseFrequency = this.toFrequency(baseFreq);\n        this._setSweepRange();\n    }\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n    get sensitivity() {\n        return gainToDb(1 / this._inputBoost.gain.value);\n    }\n    set sensitivity(sensitivity) {\n        this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    }\n    /**\n     * sets the sweep range of the scaler\n     */\n    _setSweepRange() {\n        this._sweepRange.min = this._baseFrequency;\n        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    }\n    dispose() {\n        super.dispose();\n        this._follower.dispose();\n        this._sweepRange.dispose();\n        this._bandpass.dispose();\n        this._peaking.dispose();\n        this._inputBoost.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AutoWah.js.map"]},"metadata":{},"sourceType":"module"}