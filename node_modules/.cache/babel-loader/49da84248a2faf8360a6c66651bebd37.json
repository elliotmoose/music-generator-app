{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar filterFullBuffer = function filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) {\n  var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  var feedbackLength = convertedFeedback.length;\n  var feedforwardLength = convertedFeedforward.length;\n  var minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (convertedFeedback[0] !== 1) {\n    for (var i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n\n    for (var _i = 1; _i < feedforwardLength; _i += 1) {\n      convertedFeedback[_i] /= convertedFeedback[0];\n    }\n  }\n\n  var bufferLength = 32;\n  var xBuffer = new Float32Array(bufferLength);\n  var yBuffer = new Float32Array(bufferLength);\n  var filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  var numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (var _i2 = 0; _i2 < numberOfChannels; _i2 += 1) {\n    var input = renderedBuffer.getChannelData(_i2);\n    var output = filteredBuffer.getChannelData(_i2);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport var createIIRFilterNodeRendererFactory = function createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (feedback, feedforward) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var filteredBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proxy, nativeOfflineAudioContext, trace) {\n        var nativeAudioBufferSourceNode, nativeIIRFilterNode, nativeIIRFilterNodeIsOwnedByContext, partialOfflineAudioContext, filteredBuffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nativeAudioBufferSourceNode = null;\n                nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n                if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                  });\n                } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                  // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                  nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n                if (!(nativeAudioBufferSourceNode !== null)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (!(filteredBufferPromise === null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 9:\n                partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                filteredBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var renderedBuffer;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n\n                        case 2:\n                          _context.next = 4;\n                          return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        case 4:\n                          renderedBuffer = _context.sent;\n                          return _context.abrupt(\"return\", filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward));\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n\n              case 11:\n                _context2.next = 13;\n                return filteredBufferPromise;\n\n              case 13:\n                filteredBuffer = _context2.sent;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return _context2.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 17:\n                _context2.next = 19;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n\n              case 19:\n                return _context2.abrupt(\"return\", nativeIIRFilterNode);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/iir-filter-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=iir-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}