{"ast":null,"code":"var core = require('../../core'),\n    Mesh = require('../Mesh');\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's MeshRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/MeshRenderer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI.mesh\n * @extends PIXI.ObjectRenderer\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\n\n\nfunction MeshRenderer(renderer) {\n  core.ObjectRenderer.call(this, renderer);\n  /**\n   * Holds the indices\n   *\n   * @member {Uint16Array}\n   */\n\n  this.indices = new Uint16Array(15000); //TODO this could be a single buffer shared amongst all renderers as we reuse this set up in most renderers\n\n  for (var i = 0, j = 0; i < 15000; i += 6, j += 4) {\n    this.indices[i + 0] = j + 0;\n    this.indices[i + 1] = j + 1;\n    this.indices[i + 2] = j + 2;\n    this.indices[i + 3] = j + 0;\n    this.indices[i + 4] = j + 2;\n    this.indices[i + 5] = j + 3;\n  }\n}\n\nMeshRenderer.prototype = Object.create(core.ObjectRenderer.prototype);\nMeshRenderer.prototype.constructor = MeshRenderer;\nmodule.exports = MeshRenderer;\ncore.WebGLRenderer.registerPlugin('mesh', MeshRenderer);\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\n\nMeshRenderer.prototype.onContextChange = function () {};\n/**\n * Renders the sprite object.\n *\n * @param mesh {Mesh} the mesh to render\n */\n\n\nMeshRenderer.prototype.render = function (mesh) {\n  if (!mesh._vertexBuffer) {\n    this._initWebGL(mesh);\n  }\n\n  var renderer = this.renderer,\n      gl = renderer.gl,\n      texture = mesh._texture.baseTexture,\n      shader = renderer.shaderManager.plugins.meshShader;\n  var drawMode = mesh.drawMode === Mesh.DRAW_MODES.TRIANGLE_MESH ? gl.TRIANGLE_STRIP : gl.TRIANGLES;\n  renderer.blendModeManager.setBlendMode(mesh.blendMode); // set uniforms\n\n  gl.uniformMatrix3fv(shader.uniforms.translationMatrix._location, false, mesh.worldTransform.toArray(true));\n  gl.uniformMatrix3fv(shader.uniforms.projectionMatrix._location, false, renderer.currentRenderTarget.projectionMatrix.toArray(true));\n  gl.uniform1f(shader.uniforms.alpha._location, mesh.worldAlpha);\n\n  if (!mesh.dirty) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, mesh.vertices);\n    gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 0, 0); // update the uvs\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n    gl.vertexAttribPointer(shader.attributes.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n    gl.activeTexture(gl.TEXTURE0);\n\n    if (!texture._glTextures[gl.id]) {\n      this.renderer.updateTexture(texture);\n    } else {\n      // bind the current texture\n      gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, mesh.indices);\n  } else {\n    mesh.dirty = false;\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 0, 0); // update the uvs\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(shader.attributes.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n    gl.activeTexture(gl.TEXTURE0);\n\n    if (!texture._glTextures[gl.id]) {\n      this.renderer.updateTexture(texture);\n    } else {\n      // bind the current texture\n      gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n    } // dont need to upload!\n\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);\n  }\n\n  gl.drawElements(drawMode, mesh.indices.length, gl.UNSIGNED_SHORT, 0);\n};\n/**\n * Prepares all the buffers to render this mesh\n * @param mesh {Mesh} the mesh to render\n */\n\n\nMeshRenderer.prototype._initWebGL = function (mesh) {\n  // build the strip!\n  var gl = this.renderer.gl;\n  mesh._vertexBuffer = gl.createBuffer();\n  mesh._indexBuffer = gl.createBuffer();\n  mesh._uvBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.DYNAMIC_DRAW);\n  gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs, gl.STATIC_DRAW);\n\n  if (mesh.colors) {\n    mesh._colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, mesh.colors, gl.STATIC_DRAW);\n  }\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);\n};\n/**\n * Empties the current batch.\n *\n */\n\n\nMeshRenderer.prototype.flush = function () {};\n/**\n * Starts a new mesh renderer.\n *\n */\n\n\nMeshRenderer.prototype.start = function () {\n  var shader = this.renderer.shaderManager.plugins.meshShader;\n  this.renderer.shaderManager.setShader(shader);\n};\n/**\n * Destroys the Mesh renderer\n *\n */\n\n\nMeshRenderer.prototype.destroy = function () {};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/mesh/webgl/MeshRenderer.js"],"names":["core","require","Mesh","MeshRenderer","renderer","ObjectRenderer","call","indices","Uint16Array","i","j","prototype","Object","create","constructor","module","exports","WebGLRenderer","registerPlugin","onContextChange","render","mesh","_vertexBuffer","_initWebGL","gl","texture","_texture","baseTexture","shader","shaderManager","plugins","meshShader","drawMode","DRAW_MODES","TRIANGLE_MESH","TRIANGLE_STRIP","TRIANGLES","blendModeManager","setBlendMode","blendMode","uniformMatrix3fv","uniforms","translationMatrix","_location","worldTransform","toArray","projectionMatrix","currentRenderTarget","uniform1f","alpha","worldAlpha","dirty","bindBuffer","ARRAY_BUFFER","bufferSubData","vertices","vertexAttribPointer","attributes","aVertexPosition","FLOAT","_uvBuffer","aTextureCoord","activeTexture","TEXTURE0","_glTextures","id","updateTexture","bindTexture","TEXTURE_2D","ELEMENT_ARRAY_BUFFER","_indexBuffer","bufferData","STATIC_DRAW","uvs","drawElements","length","UNSIGNED_SHORT","createBuffer","DYNAMIC_DRAW","colors","_colorBuffer","flush","start","setShader","destroy"],"mappings":"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","sourcesContent":["var core = require('../../core'),\n    Mesh = require('../Mesh');\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's MeshRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/MeshRenderer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI.mesh\n * @extends PIXI.ObjectRenderer\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\nfunction MeshRenderer(renderer)\n{\n    core.ObjectRenderer.call(this, renderer);\n\n\n    /**\n     * Holds the indices\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = new Uint16Array(15000);\n\n    //TODO this could be a single buffer shared amongst all renderers as we reuse this set up in most renderers\n    for (var i=0, j=0; i < 15000; i += 6, j += 4)\n    {\n        this.indices[i + 0] = j + 0;\n        this.indices[i + 1] = j + 1;\n        this.indices[i + 2] = j + 2;\n        this.indices[i + 3] = j + 0;\n        this.indices[i + 4] = j + 2;\n        this.indices[i + 5] = j + 3;\n    }\n}\n\nMeshRenderer.prototype = Object.create(core.ObjectRenderer.prototype);\nMeshRenderer.prototype.constructor = MeshRenderer;\nmodule.exports = MeshRenderer;\n\ncore.WebGLRenderer.registerPlugin('mesh', MeshRenderer);\n\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\nMeshRenderer.prototype.onContextChange = function ()\n{\n\n};\n\n/**\n * Renders the sprite object.\n *\n * @param mesh {Mesh} the mesh to render\n */\nMeshRenderer.prototype.render = function (mesh)\n{\n    if(!mesh._vertexBuffer)\n    {\n        this._initWebGL(mesh);\n    }\n\n    var renderer = this.renderer,\n        gl = renderer.gl,\n        texture = mesh._texture.baseTexture,\n        shader = renderer.shaderManager.plugins.meshShader;\n\n    var drawMode = mesh.drawMode === Mesh.DRAW_MODES.TRIANGLE_MESH ? gl.TRIANGLE_STRIP : gl.TRIANGLES;\n\n    renderer.blendModeManager.setBlendMode(mesh.blendMode);\n\n\n    // set uniforms\n    gl.uniformMatrix3fv(shader.uniforms.translationMatrix._location, false, mesh.worldTransform.toArray(true));\n\n    gl.uniformMatrix3fv(shader.uniforms.projectionMatrix._location, false, renderer.currentRenderTarget.projectionMatrix.toArray(true));\n    gl.uniform1f(shader.uniforms.alpha._location, mesh.worldAlpha);\n\n    if (!mesh.dirty)\n    {\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, mesh.vertices);\n        gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n        // update the uvs\n        gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n        gl.vertexAttribPointer(shader.attributes.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n\n\n        gl.activeTexture(gl.TEXTURE0);\n\n       if (!texture._glTextures[gl.id])\n        {\n            this.renderer.updateTexture(texture);\n        }\n        else\n        {\n            // bind the current texture\n            gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n        gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, mesh.indices);\n    }\n    else\n    {\n\n        mesh.dirty = false;\n        gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\n        // update the uvs\n        gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(shader.attributes.aTextureCoord, 2, gl.FLOAT, false, 0, 0);\n\n         gl.activeTexture(gl.TEXTURE0);\n\n        if (!texture._glTextures[gl.id])\n        {\n            this.renderer.updateTexture(texture);\n        }\n        else\n        {\n            // bind the current texture\n            gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n        }\n\n        // dont need to upload!\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);\n\n    }\n\n    gl.drawElements(drawMode, mesh.indices.length, gl.UNSIGNED_SHORT, 0);\n\n};\n\n/**\n * Prepares all the buffers to render this mesh\n * @param mesh {Mesh} the mesh to render\n */\nMeshRenderer.prototype._initWebGL = function (mesh)\n{\n    // build the strip!\n    var gl = this.renderer.gl;\n\n    mesh._vertexBuffer = gl.createBuffer();\n    mesh._indexBuffer = gl.createBuffer();\n    mesh._uvBuffer = gl.createBuffer();\n\n\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.DYNAMIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, mesh._uvBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER,  mesh.uvs, gl.STATIC_DRAW);\n\n    if(mesh.colors){\n        mesh._colorBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, mesh._colorBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.colors, gl.STATIC_DRAW);\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh._indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);\n};\n\n\n/**\n * Empties the current batch.\n *\n */\nMeshRenderer.prototype.flush = function ()\n{\n\n};\n\n/**\n * Starts a new mesh renderer.\n *\n */\nMeshRenderer.prototype.start = function ()\n{\n    var shader = this.renderer.shaderManager.plugins.meshShader;\n\n    this.renderer.shaderManager.setShader(shader);\n};\n\n/**\n * Destroys the Mesh renderer\n *\n */\nMeshRenderer.prototype.destroy = function ()\n{\n};\n"]},"metadata":{},"sourceType":"script"}