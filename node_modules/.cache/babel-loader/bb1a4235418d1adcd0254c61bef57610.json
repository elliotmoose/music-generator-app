{"ast":null,"code":"var core = require('../../core'),\n    BlurXFilter = require('../blur/BlurXFilter'),\n    BlurYTintFilter = require('./BlurYTintFilter');\n/**\n * The DropShadowFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction DropShadowFilter() {\n  core.AbstractFilter.call(this);\n  this.blurXFilter = new BlurXFilter();\n  this.blurYTintFilter = new BlurYTintFilter();\n  this.defaultFilter = new core.AbstractFilter();\n  this.padding = 30;\n  this._dirtyPosition = true;\n  this._angle = 45 * Math.PI / 180;\n  this._distance = 10;\n  this.alpha = 0.75;\n  this.hideObject = false;\n  this.blendMode = core.BLEND_MODES.MULTIPLY;\n}\n\nDropShadowFilter.prototype = Object.create(core.AbstractFilter.prototype);\nDropShadowFilter.prototype.constructor = DropShadowFilter;\nmodule.exports = DropShadowFilter;\n\nDropShadowFilter.prototype.applyFilter = function (renderer, input, output) {\n  var renderTarget = renderer.filterManager.getRenderTarget(true); //TODO - copyTexSubImage2D could be used here?\n\n  if (this._dirtyPosition) {\n    this._dirtyPosition = false;\n    this.blurYTintFilter.uniforms.offset.value[0] = Math.sin(this._angle) * this._distance;\n    this.blurYTintFilter.uniforms.offset.value[1] = Math.cos(this._angle) * this._distance;\n  }\n\n  this.blurXFilter.applyFilter(renderer, input, renderTarget);\n  renderer.blendModeManager.setBlendMode(this.blendMode);\n  this.blurYTintFilter.applyFilter(renderer, renderTarget, output);\n  renderer.blendModeManager.setBlendMode(core.BLEND_MODES.NORMAL);\n\n  if (!this.hideObject) {\n    this.defaultFilter.applyFilter(renderer, input, output);\n  }\n\n  renderer.filterManager.returnRenderTarget(renderTarget);\n};\n\nObject.defineProperties(DropShadowFilter.prototype, {\n  /**\n   * Sets the strength of both the blurX and blurY properties simultaneously\n   *\n   * @member {number}\n   * @memberOf DropShadowFilter#\n   * @default 2\n   */\n  blur: {\n    get: function () {\n      return this.blurXFilter.blur;\n    },\n    set: function (value) {\n      this.blurXFilter.blur = this.blurYTintFilter.blur = value;\n    }\n  },\n\n  /**\n   * Sets the strength of the blurX property\n   *\n   * @member {number}\n   * @memberOf DropShadowFilter#\n   * @default 2\n   */\n  blurX: {\n    get: function () {\n      return this.blurXFilter.blur;\n    },\n    set: function (value) {\n      this.blurXFilter.blur = value;\n    }\n  },\n\n  /**\n   * Sets the strength of the blurY property\n   *\n   * @member {number}\n   * @memberOf DropShadowFilter#\n   * @default 2\n   */\n  blurY: {\n    get: function () {\n      return this.blurYTintFilter.blur;\n    },\n    set: function (value) {\n      this.blurYTintFilter.blur = value;\n    }\n  },\n  color: {\n    get: function () {\n      return core.utils.rgb2hex(this.blurYTintFilter.uniforms.color.value);\n    },\n    set: function (value) {\n      this.blurYTintFilter.uniforms.color.value = core.utils.hex2rgb(value);\n    }\n  },\n  alpha: {\n    get: function () {\n      return this.blurYTintFilter.uniforms.alpha.value;\n    },\n    set: function (value) {\n      this.blurYTintFilter.uniforms.alpha.value = value;\n    }\n  },\n  distance: {\n    get: function () {\n      return this._distance;\n    },\n    set: function (value) {\n      this._dirtyPosition = true;\n      this._distance = value;\n    }\n  },\n  angle: {\n    get: function () {\n      return this._angle;\n    },\n    set: function (value) {\n      this._dirtyPosition = true;\n      this._angle = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/dropshadow/DropShadowFilter.js"],"names":["core","require","BlurXFilter","BlurYTintFilter","DropShadowFilter","AbstractFilter","call","blurXFilter","blurYTintFilter","defaultFilter","padding","_dirtyPosition","_angle","Math","PI","_distance","alpha","hideObject","blendMode","BLEND_MODES","MULTIPLY","prototype","Object","create","constructor","module","exports","applyFilter","renderer","input","output","renderTarget","filterManager","getRenderTarget","uniforms","offset","value","sin","cos","blendModeManager","setBlendMode","NORMAL","returnRenderTarget","defineProperties","blur","get","set","blurX","blurY","color","utils","rgb2hex","hex2rgb","distance","angle"],"mappings":"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","sourcesContent":["var core = require('../../core'),\n    BlurXFilter = require('../blur/BlurXFilter'),\n    BlurYTintFilter = require('./BlurYTintFilter');\n\n/**\n * The DropShadowFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction DropShadowFilter()\n{\n    core.AbstractFilter.call(this);\n\n    this.blurXFilter = new BlurXFilter();\n    this.blurYTintFilter = new BlurYTintFilter();\n\n    this.defaultFilter = new core.AbstractFilter();\n\n    this.padding = 30;\n\n    this._dirtyPosition = true;\n    this._angle = 45 * Math.PI / 180;\n    this._distance = 10;\n    this.alpha = 0.75;\n    this.hideObject = false;\n    this.blendMode = core.BLEND_MODES.MULTIPLY;\n}\n\nDropShadowFilter.prototype = Object.create(core.AbstractFilter.prototype);\nDropShadowFilter.prototype.constructor = DropShadowFilter;\nmodule.exports = DropShadowFilter;\n\nDropShadowFilter.prototype.applyFilter = function (renderer, input, output)\n{\n    var renderTarget = renderer.filterManager.getRenderTarget(true);\n\n    //TODO - copyTexSubImage2D could be used here?\n    if(this._dirtyPosition)\n    {\n        this._dirtyPosition = false;\n\n        this.blurYTintFilter.uniforms.offset.value[0] = Math.sin(this._angle) * this._distance;\n        this.blurYTintFilter.uniforms.offset.value[1] = Math.cos(this._angle) * this._distance;\n    }\n\n    this.blurXFilter.applyFilter(renderer, input, renderTarget);\n\n    renderer.blendModeManager.setBlendMode(this.blendMode);\n\n    this.blurYTintFilter.applyFilter(renderer, renderTarget, output);\n\n    renderer.blendModeManager.setBlendMode(core.BLEND_MODES.NORMAL);\n\n    if(!this.hideObject)\n    {\n\n        this.defaultFilter.applyFilter(renderer, input, output);\n    }\n\n\n    renderer.filterManager.returnRenderTarget(renderTarget);\n};\n\nObject.defineProperties(DropShadowFilter.prototype, {\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @memberOf DropShadowFilter#\n     * @default 2\n     */\n    blur: {\n        get: function ()\n        {\n            return this.blurXFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurXFilter.blur = this.blurYTintFilter.blur = value;\n        }\n    },\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @memberOf DropShadowFilter#\n     * @default 2\n     */\n    blurX: {\n        get: function ()\n        {\n            return this.blurXFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurXFilter.blur = value;\n        }\n    },\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @memberOf DropShadowFilter#\n     * @default 2\n     */\n    blurY: {\n        get: function ()\n        {\n            return this.blurYTintFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurYTintFilter.blur = value;\n        }\n    },\n\n    color: {\n        get: function ()\n        {\n            return  core.utils.rgb2hex( this.blurYTintFilter.uniforms.color.value );\n        },\n        set: function (value)\n        {\n            this.blurYTintFilter.uniforms.color.value = core.utils.hex2rgb(value);\n        }\n    },\n\n    alpha: {\n        get: function ()\n        {\n            return  this.blurYTintFilter.uniforms.alpha.value;\n        },\n        set: function (value)\n        {\n            this.blurYTintFilter.uniforms.alpha.value = value;\n        }\n    },\n\n    distance: {\n        get: function ()\n        {\n            return  this._distance;\n        },\n        set: function (value)\n        {\n            this._dirtyPosition = true;\n            this._distance = value;\n        }\n    },\n\n    angle: {\n        get: function ()\n        {\n            return  this._angle;\n        },\n        set: function (value)\n        {\n            this._dirtyPosition = true;\n            this._angle = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}