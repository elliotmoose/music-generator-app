{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\n\nexport var FrequencyShifter = /*#__PURE__*/function (_Effect) {\n  _inherits(FrequencyShifter, _Effect);\n\n  var _super = _createSuper(FrequencyShifter);\n\n  function FrequencyShifter() {\n    var _this;\n\n    _classCallCheck(this, FrequencyShifter);\n\n    _this = _super.call(this, optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n    _this.name = \"FrequencyShifter\";\n    var options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -_this.context.sampleRate / 2,\n      maxValue: _this.context.sampleRate / 2\n    });\n    _this._sine = new ToneOscillatorNode({\n      context: _this.context,\n      type: \"sine\"\n    });\n    _this._cosine = new Oscillator({\n      context: _this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    _this._sineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._cosineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._negate = new Negate({\n      context: _this.context\n    });\n    _this._add = new Add({\n      context: _this.context\n    });\n    _this._phaseShifter = new PhaseShiftAllpass({\n      context: _this.context\n    });\n\n    _this.effectSend.connect(_this._phaseShifter); // connect the carrier frequency signal to the two oscillators\n\n\n    _this.frequency.fan(_this._sine.frequency, _this._cosine.frequency);\n\n    _this._phaseShifter.offset90.connect(_this._cosineMultiply);\n\n    _this._cosine.connect(_this._cosineMultiply.factor);\n\n    _this._phaseShifter.connect(_this._sineMultiply);\n\n    _this._sine.connect(_this._sineMultiply.factor);\n\n    _this._sineMultiply.connect(_this._negate);\n\n    _this._cosineMultiply.connect(_this._add);\n\n    _this._negate.connect(_this._add.addend);\n\n    _this._add.connect(_this.effectReturn); // start the oscillators at the same time\n\n\n    var now = _this.immediate();\n\n    _this._sine.start(now);\n\n    _this._cosine.start(now);\n\n    return _this;\n  }\n\n  _createClass(FrequencyShifter, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyShifter.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n\n      this._add.dispose();\n\n      this._cosine.dispose();\n\n      this._cosineMultiply.dispose();\n\n      this._negate.dispose();\n\n      this._phaseShifter.dispose();\n\n      this._sine.dispose();\n\n      this._sineMultiply.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        frequency: 0\n      });\n    }\n  }]);\n\n  return FrequencyShifter;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/FrequencyShifter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect {\n    constructor() {\n        super(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n        this.name = \"FrequencyShifter\";\n        const options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n            minValue: -this.context.sampleRate / 2,\n            maxValue: this.context.sampleRate / 2,\n        });\n        this._sine = new ToneOscillatorNode({\n            context: this.context,\n            type: \"sine\",\n        });\n        this._cosine = new Oscillator({\n            context: this.context,\n            phase: -90,\n            type: \"sine\",\n        });\n        this._sineMultiply = new Multiply({ context: this.context });\n        this._cosineMultiply = new Multiply({ context: this.context });\n        this._negate = new Negate({ context: this.context });\n        this._add = new Add({ context: this.context });\n        this._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n        this.effectSend.connect(this._phaseShifter);\n        // connect the carrier frequency signal to the two oscillators\n        this.frequency.fan(this._sine.frequency, this._cosine.frequency);\n        this._phaseShifter.offset90.connect(this._cosineMultiply);\n        this._cosine.connect(this._cosineMultiply.factor);\n        this._phaseShifter.connect(this._sineMultiply);\n        this._sine.connect(this._sineMultiply.factor);\n        this._sineMultiply.connect(this._negate);\n        this._cosineMultiply.connect(this._add);\n        this._negate.connect(this._add.addend);\n        this._add.connect(this.effectReturn);\n        // start the oscillators at the same time\n        const now = this.immediate();\n        this._sine.start(now);\n        this._cosine.start(now);\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            frequency: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this._add.dispose();\n        this._cosine.dispose();\n        this._cosineMultiply.dispose();\n        this._negate.dispose();\n        this._phaseShifter.dispose();\n        this._sine.dispose();\n        this._sineMultiply.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=FrequencyShifter.js.map"]},"metadata":{},"sourceType":"module"}