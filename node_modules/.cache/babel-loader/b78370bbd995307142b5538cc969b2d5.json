{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\n\nexport var ToneBufferSource = /*#__PURE__*/function (_OneShotSource) {\n  _inherits(ToneBufferSource, _OneShotSource);\n\n  var _super = _createSuper(ToneBufferSource);\n\n  function ToneBufferSource() {\n    var _this;\n\n    _classCallCheck(this, ToneBufferSource);\n\n    _this = _super.call(this, optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"ToneBufferSource\";\n    /**\n     * The oscillator\n     */\n\n    _this._source = _this.context.createBufferSource();\n    _this._internalChannels = [_this._source];\n    /**\n     * indicators if the source has started/stopped\n     */\n\n    _this._sourceStarted = false;\n    _this._sourceStopped = false;\n    var options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n    connect(_this._source, _this._gainNode);\n\n    _this._source.onended = function () {\n      return _this._stopSource();\n    };\n    /**\n     * The playbackRate of the buffer\n     */\n\n\n    _this.playbackRate = new Param({\n      context: _this.context,\n      param: _this._source.playbackRate,\n      units: \"positive\",\n      value: options.playbackRate\n    }); // set some values initially\n\n    _this.loop = options.loop;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n    _this._internalChannels.push(_this._source);\n\n    return _this;\n  }\n\n  _createClass(ToneBufferSource, [{\n    key: \"start\",\n\n    /**\n     * Start the buffer\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     * @param  gain  The gain to play the buffer back at.\n     */\n    value: function start(time, offset, duration) {\n      var gain = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n      var computedTime = this.toSeconds(time); // apply the gain envelope\n\n      this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point\n\n\n      if (this.loop) {\n        offset = defaultArg(offset, this.loopStart);\n      } else {\n        // otherwise the default offset is 0\n        offset = defaultArg(offset, 0);\n      } // make sure the offset is not less than 0\n\n\n      var computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source\n\n      if (this.loop) {\n        // modify the offset if it's greater than the loop time\n        var loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n        var loopStart = this.toSeconds(this.loopStart);\n        var loopDuration = loopEnd - loopStart; // move the offset back\n\n        if (GTE(computedOffset, loopEnd)) {\n          computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;\n        } // when the offset is very close to the duration, set it to 0\n\n\n        if (EQ(computedOffset, this.buffer.duration)) {\n          computedOffset = 0;\n        }\n      } // this.buffer.loaded would have return false if the AudioBuffer was undefined\n\n\n      this._source.buffer = this.buffer.get();\n      this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\n      if (LT(computedOffset, this.buffer.duration)) {\n        this._sourceStarted = true;\n\n        this._source.start(computedTime, computedOffset);\n      } // if a duration is given, schedule a stop\n\n\n      if (isDefined(duration)) {\n        var computedDur = this.toSeconds(duration); // make sure it's never negative\n\n        computedDur = Math.max(computedDur, 0);\n        this.stop(computedTime + computedDur);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_stopSource\",\n    value: function _stopSource(time) {\n      if (!this._sourceStopped && this._sourceStarted) {\n        this._sourceStopped = true;\n\n        this._source.stop(this.toSeconds(time));\n\n        this._onended();\n      }\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n\n  }, {\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneBufferSource.prototype), \"dispose\", this).call(this);\n\n      this._source.onended = null;\n\n      this._source.disconnect();\n\n      this._buffer.dispose();\n\n      this.playbackRate.dispose();\n      return this;\n    }\n  }, {\n    key: \"fadeIn\",\n\n    /**\n     * The fadeIn time of the amplitude envelope.\n     */\n    get: function get() {\n      return this._fadeIn;\n    },\n    set: function set(t) {\n      this._fadeIn = t;\n    }\n    /**\n     * The fadeOut time of the amplitude envelope.\n     */\n\n  }, {\n    key: \"fadeOut\",\n    get: function get() {\n      return this._fadeOut;\n    },\n    set: function set(t) {\n      this._fadeOut = t;\n    }\n    /**\n     * The curve applied to the fades, either \"linear\" or \"exponential\"\n     */\n\n  }, {\n    key: \"curve\",\n    get: function get() {\n      return this._curve;\n    },\n    set: function set(t) {\n      this._curve = t;\n    }\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._source.loopStart;\n    },\n    set: function set(loopStart) {\n      this._source.loopStart = this.toSeconds(loopStart);\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._source.loopEnd;\n    },\n    set: function set(loopEnd) {\n      this._source.loopEnd = this.toSeconds(loopEnd);\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._buffer;\n    },\n    set: function set(buffer) {\n      this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._source.loop;\n    },\n    set: function set(loop) {\n      this._source.loop = loop;\n\n      if (this._sourceStarted) {\n        this.cancelStop();\n      }\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(OneShotSource.getDefaults(), {\n        url: new ToneAudioBuffer(),\n        loop: false,\n        loopEnd: 0,\n        loopStart: 0,\n        onload: noOp,\n        onerror: noOp,\n        playbackRate: 1\n      });\n    }\n  }]);\n\n  return ToneBufferSource;\n}(OneShotSource);","map":{"version":3,"sources":["../../../../Tone/source/buffer/ToneBufferSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource {\n    constructor() {\n        super(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"ToneBufferSource\";\n        /**\n         * The oscillator\n         */\n        this._source = this.context.createBufferSource();\n        this._internalChannels = [this._source];\n        /**\n         * indicators if the source has started/stopped\n         */\n        this._sourceStarted = false;\n        this._sourceStopped = false;\n        const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n        connect(this._source, this._gainNode);\n        this._source.onended = () => this._stopSource();\n        /**\n         * The playbackRate of the buffer\n         */\n        this.playbackRate = new Param({\n            context: this.context,\n            param: this._source.playbackRate,\n            units: \"positive\",\n            value: options.playbackRate,\n        });\n        // set some values initially\n        this.loop = options.loop;\n        this.loopStart = options.loopStart;\n        this.loopEnd = options.loopEnd;\n        this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n        this._internalChannels.push(this._source);\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            url: new ToneAudioBuffer(),\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            onerror: noOp,\n            playbackRate: 1,\n        });\n    }\n    /**\n     * The fadeIn time of the amplitude envelope.\n     */\n    get fadeIn() {\n        return this._fadeIn;\n    }\n    set fadeIn(t) {\n        this._fadeIn = t;\n    }\n    /**\n     * The fadeOut time of the amplitude envelope.\n     */\n    get fadeOut() {\n        return this._fadeOut;\n    }\n    set fadeOut(t) {\n        this._fadeOut = t;\n    }\n    /**\n     * The curve applied to the fades, either \"linear\" or \"exponential\"\n     */\n    get curve() {\n        return this._curve;\n    }\n    set curve(t) {\n        this._curve = t;\n    }\n    /**\n     * Start the buffer\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     * @param  gain  The gain to play the buffer back at.\n     */\n    start(time, offset, duration, gain = 1) {\n        assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n        const computedTime = this.toSeconds(time);\n        // apply the gain envelope\n        this._startGain(computedTime, gain);\n        // if it's a loop the default offset is the loopstart point\n        if (this.loop) {\n            offset = defaultArg(offset, this.loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // make sure the offset is not less than 0\n        let computedOffset = Math.max(this.toSeconds(offset), 0);\n        // start the buffer source\n        if (this.loop) {\n            // modify the offset if it's greater than the loop time\n            const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n            const loopStart = this.toSeconds(this.loopStart);\n            const loopDuration = loopEnd - loopStart;\n            // move the offset back\n            if (GTE(computedOffset, loopEnd)) {\n                computedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n            }\n            // when the offset is very close to the duration, set it to 0\n            if (EQ(computedOffset, this.buffer.duration)) {\n                computedOffset = 0;\n            }\n        }\n        // this.buffer.loaded would have return false if the AudioBuffer was undefined\n        this._source.buffer = this.buffer.get();\n        this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n        if (LT(computedOffset, this.buffer.duration)) {\n            this._sourceStarted = true;\n            this._source.start(computedTime, computedOffset);\n        }\n        // if a duration is given, schedule a stop\n        if (isDefined(duration)) {\n            let computedDur = this.toSeconds(duration);\n            // make sure it's never negative\n            computedDur = Math.max(computedDur, 0);\n            this.stop(computedTime + computedDur);\n        }\n        return this;\n    }\n    _stopSource(time) {\n        if (!this._sourceStopped && this._sourceStarted) {\n            this._sourceStopped = true;\n            this._source.stop(this.toSeconds(time));\n            this._onended();\n        }\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get loopStart() {\n        return this._source.loopStart;\n    }\n    set loopStart(loopStart) {\n        this._source.loopStart = this.toSeconds(loopStart);\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get loopEnd() {\n        return this._source.loopEnd;\n    }\n    set loopEnd(loopEnd) {\n        this._source.loopEnd = this.toSeconds(loopEnd);\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    set buffer(buffer) {\n        this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     */\n    get loop() {\n        return this._source.loop;\n    }\n    set loop(loop) {\n        this._source.loop = loop;\n        if (this._sourceStarted) {\n            this.cancelStop();\n        }\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._source.onended = null;\n        this._source.disconnect();\n        this._buffer.dispose();\n        this.playbackRate.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneBufferSource.js.map"]},"metadata":{},"sourceType":"module"}