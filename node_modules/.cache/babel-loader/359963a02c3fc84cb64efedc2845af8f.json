{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nexport var FMSynth = /*#__PURE__*/function (_ModulationSynth) {\n  _inherits(FMSynth, _ModulationSynth);\n\n  var _super = _createSuper(FMSynth);\n\n  function FMSynth() {\n    var _this;\n\n    _classCallCheck(this, FMSynth);\n\n    _this = _super.call(this, optionsFromArguments(FMSynth.getDefaults(), arguments));\n    _this.name = \"FMSynth\";\n    var options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    _this.modulationIndex = new Multiply({\n      context: _this.context,\n      value: options.modulationIndex\n    }); // control the two voices frequency\n\n    _this.frequency.connect(_this._carrier.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this.frequency.chain(_this.modulationIndex, _this._modulationNode);\n\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n\n    _this._modulator.connect(_this._modulationNode.gain);\n\n    _this._modulationNode.connect(_this._carrier.frequency);\n\n    _this._carrier.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(FMSynth, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FMSynth.prototype), \"dispose\", this).call(this);\n\n      this.modulationIndex.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ModulationSynth.getDefaults(), {\n        modulationIndex: 10\n      });\n    }\n  }]);\n\n  return FMSynth;\n}(ModulationSynth);","map":{"version":3,"sources":["../../../Tone/instrument/FMSynth.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,oBAAT,QAAqC,uBAArC;AAEA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,eAAT,QAAwD,mBAAxD;AAMA;;;;;;;;;;;AAWG;;AAEH,WAAa,OAAb;AAAA;;AAAA;;AAWC,qBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAA1B;AAXQ,UAAA,IAAA,GAAe,SAAf;AAYR,QAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAApC;AAEA,UAAK,eAAL,GAAuB,IAAI,QAAJ,CAAa;AACnC,MAAA,OAAO,EAAE,MAAK,OADqB;AAEnC,MAAA,KAAK,EAAE,OAAO,CAAC;AAFoB,KAAb,CAAvB,CAJD,CASC;;AACA,UAAK,SAAL,CAAe,OAAf,CAAuB,MAAK,QAAL,CAAc,SAArC;;AACA,UAAK,SAAL,CAAe,KAAf,CAAqB,MAAK,WAA1B,EAAuC,MAAK,UAAL,CAAgB,SAAvD;;AACA,UAAK,SAAL,CAAe,KAAf,CAAqB,MAAK,eAA1B,EAA2C,MAAK,eAAhD;;AACA,UAAK,MAAL,CAAY,GAAZ,CAAgB,MAAK,QAAL,CAAc,MAA9B,EAAsC,MAAK,UAAL,CAAgB,MAAtD;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,eAAL,CAAqB,IAA7C;;AACA,UAAK,eAAL,CAAqB,OAArB,CAA6B,MAAK,QAAL,CAAc,SAA3C;;AACA,UAAK,QAAL,CAAc,OAAd,CAAsB,MAAK,MAA3B;;AAhBD;AAiBC;;AA5BF;AAAA;AAAA,8BAoCQ;AACN;;AACA,WAAK,eAAL,CAAqB,OAArB;AACA,aAAO,IAAP;AACA;AAxCF;AAAA;AAAA,kCA8BmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,eAAe,CAAC,WAAhB,EAAd,EAA6C;AACnD,QAAA,eAAe,EAAE;AADkC,OAA7C,CAAP;AAGA;AAlCF;;AAAA;AAAA,EAA6B,eAA7B","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\nexport class FMSynth extends ModulationSynth {\n    constructor() {\n        super(optionsFromArguments(FMSynth.getDefaults(), arguments));\n        this.name = \"FMSynth\";\n        const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n        this.modulationIndex = new Multiply({\n            context: this.context,\n            value: options.modulationIndex,\n        });\n        // control the two voices frequency\n        this.frequency.connect(this._carrier.frequency);\n        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n        this.frequency.chain(this.modulationIndex, this._modulationNode);\n        this.detune.fan(this._carrier.detune, this._modulator.detune);\n        this._modulator.connect(this._modulationNode.gain);\n        this._modulationNode.connect(this._carrier.frequency);\n        this._carrier.connect(this.output);\n    }\n    static getDefaults() {\n        return Object.assign(ModulationSynth.getDefaults(), {\n            modulationIndex: 10,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.modulationIndex.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=FMSynth.js.map"]},"metadata":{},"sourceType":"module"}