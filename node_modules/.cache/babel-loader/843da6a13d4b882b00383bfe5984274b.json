{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\n\nexport var IntervalTimeline = /*#__PURE__*/function (_Tone) {\n  _inherits(IntervalTimeline, _Tone);\n\n  var _super = _createSuper(IntervalTimeline);\n\n  function IntervalTimeline() {\n    var _this;\n\n    _classCallCheck(this, IntervalTimeline);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"IntervalTimeline\";\n    /**\n     * The root node of the inteval tree\n     */\n\n    _this._root = null;\n    /**\n     * Keep track of the length of the timeline.\n     */\n\n    _this._length = 0;\n    return _this;\n  }\n  /**\n   * The event to add to the timeline. All events must\n   * have a time and duration value\n   * @param  event  The event to add to the timeline\n   */\n\n\n  _createClass(IntervalTimeline, [{\n    key: \"add\",\n    value: function add(event) {\n      assert(isDefined(event.time), \"Events must have a time property\");\n      assert(isDefined(event.duration), \"Events must have a duration parameter\");\n      event.time = event.time.valueOf();\n      var node = new IntervalNode(event.time, event.time + event.duration, event);\n\n      if (this._root === null) {\n        this._root = node;\n      } else {\n        this._root.insert(node);\n      }\n\n      this._length++; // Restructure tree to be balanced\n\n      while (node !== null) {\n        node.updateHeight();\n        node.updateMax();\n\n        this._rebalance(node);\n\n        node = node.parent;\n      }\n\n      return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  event  The event to remove from the timeline\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(event) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(event.time, results);\n\n        for (var _i = 0, _results = results; _i < _results.length; _i++) {\n          var node = _results[_i];\n\n          if (node.event === event) {\n            this._removeNode(node);\n\n            this._length--;\n            break;\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * The number of items in the timeline.\n     * @readOnly\n     */\n\n  }, {\n    key: \"cancel\",\n\n    /**\n     * Remove events whose time time is after the given time\n     * @param  after  The time to query.\n     */\n    value: function cancel(after) {\n      var _this2 = this;\n\n      this.forEachFrom(after, function (event) {\n        return _this2.remove(event);\n      });\n      return this;\n    }\n    /**\n     * Set the root node as the given node\n     */\n\n  }, {\n    key: \"_setRoot\",\n    value: function _setRoot(node) {\n      this._root = node;\n\n      if (this._root !== null) {\n        this._root.parent = null;\n      }\n    }\n    /**\n     * Replace the references to the node in the node's parent\n     * with the replacement node.\n     */\n\n  }, {\n    key: \"_replaceNodeInParent\",\n    value: function _replaceNodeInParent(node, replacement) {\n      if (node.parent !== null) {\n        if (node.isLeftChild()) {\n          node.parent.left = replacement;\n        } else {\n          node.parent.right = replacement;\n        }\n\n        this._rebalance(node.parent);\n      } else {\n        this._setRoot(replacement);\n      }\n    }\n    /**\n     * Remove the node from the tree and replace it with\n     * a successor which follows the schema.\n     */\n\n  }, {\n    key: \"_removeNode\",\n    value: function _removeNode(node) {\n      if (node.left === null && node.right === null) {\n        this._replaceNodeInParent(node, null);\n      } else if (node.right === null) {\n        this._replaceNodeInParent(node, node.left);\n      } else if (node.left === null) {\n        this._replaceNodeInParent(node, node.right);\n      } else {\n        var balance = node.getBalance();\n        var replacement;\n        var temp = null;\n\n        if (balance > 0) {\n          if (node.left.right === null) {\n            replacement = node.left;\n            replacement.right = node.right;\n            temp = replacement;\n          } else {\n            replacement = node.left.right;\n\n            while (replacement.right !== null) {\n              replacement = replacement.right;\n            }\n\n            if (replacement.parent) {\n              replacement.parent.right = replacement.left;\n              temp = replacement.parent;\n              replacement.left = node.left;\n              replacement.right = node.right;\n            }\n          }\n        } else if (node.right.left === null) {\n          replacement = node.right;\n          replacement.left = node.left;\n          temp = replacement;\n        } else {\n          replacement = node.right.left;\n\n          while (replacement.left !== null) {\n            replacement = replacement.left;\n          }\n\n          if (replacement.parent) {\n            replacement.parent.left = replacement.right;\n            temp = replacement.parent;\n            replacement.left = node.left;\n            replacement.right = node.right;\n          }\n        }\n\n        if (node.parent !== null) {\n          if (node.isLeftChild()) {\n            node.parent.left = replacement;\n          } else {\n            node.parent.right = replacement;\n          }\n        } else {\n          this._setRoot(replacement);\n        }\n\n        if (temp) {\n          this._rebalance(temp);\n        }\n      }\n\n      node.dispose();\n    }\n    /**\n     * Rotate the tree to the left\n     */\n\n  }, {\n    key: \"_rotateLeft\",\n    value: function _rotateLeft(node) {\n      var parent = node.parent;\n      var isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)\n\n      var pivotNode = node.right;\n\n      if (pivotNode) {\n        node.right = pivotNode.left;\n        pivotNode.left = node;\n      }\n\n      if (parent !== null) {\n        if (isLeftChild) {\n          parent.left = pivotNode;\n        } else {\n          parent.right = pivotNode;\n        }\n      } else {\n        this._setRoot(pivotNode);\n      }\n    }\n    /**\n     * Rotate the tree to the right\n     */\n\n  }, {\n    key: \"_rotateRight\",\n    value: function _rotateRight(node) {\n      var parent = node.parent;\n      var isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)\n\n      var pivotNode = node.left;\n\n      if (pivotNode) {\n        node.left = pivotNode.right;\n        pivotNode.right = node;\n      }\n\n      if (parent !== null) {\n        if (isLeftChild) {\n          parent.left = pivotNode;\n        } else {\n          parent.right = pivotNode;\n        }\n      } else {\n        this._setRoot(pivotNode);\n      }\n    }\n    /**\n     * Balance the BST\n     */\n\n  }, {\n    key: \"_rebalance\",\n    value: function _rebalance(node) {\n      var balance = node.getBalance();\n\n      if (balance > 1 && node.left) {\n        if (node.left.getBalance() < 0) {\n          this._rotateLeft(node.left);\n        } else {\n          this._rotateRight(node);\n        }\n      } else if (balance < -1 && node.right) {\n        if (node.right.getBalance() > 0) {\n          this._rotateRight(node.right);\n        } else {\n          this._rotateLeft(node);\n        }\n      }\n    }\n    /**\n     * Get an event whose time and duration span the give time. Will\n     * return the match whose \"time\" value is closest to the given time.\n     * @return  The event which spans the desired time\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(time) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(time, results);\n\n        if (results.length > 0) {\n          var max = results[0];\n\n          for (var i = 1; i < results.length; i++) {\n            if (results[i].low > max.low) {\n              max = results[i];\n            }\n          }\n\n          return max.event;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Iterate over everything in the timeline.\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      if (this._root !== null) {\n        var allNodes = [];\n\n        this._root.traverse(function (node) {\n          return allNodes.push(node);\n        });\n\n        allNodes.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array in which the given time\n     * overlaps with the time and duration time of the event.\n     * @param  time The time to check if items are overlapping\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachAtTime\",\n    value: function forEachAtTime(time, callback) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(time, results);\n\n        results.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array in which the time is greater\n     * than or equal to the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachFrom\",\n    value: function forEachFrom(time, callback) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.searchAfter(time, results);\n\n        results.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(IntervalTimeline.prototype), \"dispose\", this).call(this);\n\n      if (this._root !== null) {\n        this._root.traverse(function (node) {\n          return node.dispose();\n        });\n      }\n\n      this._root = null;\n      return this;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }]);\n\n  return IntervalTimeline;\n}(Tone); //-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\n\nvar IntervalNode = /*#__PURE__*/function () {\n  function IntervalNode(low, high, event) {\n    _classCallCheck(this, IntervalNode);\n\n    // the nodes to the left\n    this._left = null; // the nodes to the right\n\n    this._right = null; // the parent node\n\n    this.parent = null; // the number of child nodes\n\n    this.height = 0;\n    this.event = event; // the low value\n\n    this.low = low; // the high value\n\n    this.high = high; // the high value for this and all child nodes\n\n    this.max = this.high;\n  }\n  /**\n   * Insert a node into the correct spot in the tree\n   */\n\n\n  _createClass(IntervalNode, [{\n    key: \"insert\",\n    value: function insert(node) {\n      if (node.low <= this.low) {\n        if (this.left === null) {\n          this.left = node;\n        } else {\n          this.left.insert(node);\n        }\n      } else if (this.right === null) {\n        this.right = node;\n      } else {\n        this.right.insert(node);\n      }\n    }\n    /**\n     * Search the tree for nodes which overlap\n     * with the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(point, results) {\n      // If p is to the right of the rightmost point of any interval\n      // in this node and all children, there won't be any matches.\n      if (point > this.max) {\n        return;\n      } // Search left children\n\n\n      if (this.left !== null) {\n        this.left.search(point, results);\n      } // Check this node\n\n\n      if (this.low <= point && this.high > point) {\n        results.push(this);\n      } // If p is to the left of the time of this interval,\n      // then it can't be in any child to the right.\n\n\n      if (this.low > point) {\n        return;\n      } // Search right children\n\n\n      if (this.right !== null) {\n        this.right.search(point, results);\n      }\n    }\n    /**\n     * Search the tree for nodes which are less\n     * than the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n\n  }, {\n    key: \"searchAfter\",\n    value: function searchAfter(point, results) {\n      // Check this node\n      if (this.low >= point) {\n        results.push(this);\n\n        if (this.left !== null) {\n          this.left.searchAfter(point, results);\n        }\n      } // search the right side\n\n\n      if (this.right !== null) {\n        this.right.searchAfter(point, results);\n      }\n    }\n    /**\n     * Invoke the callback on this element and both it's branches\n     * @param  {Function}  callback\n     */\n\n  }, {\n    key: \"traverse\",\n    value: function traverse(callback) {\n      callback(this);\n\n      if (this.left !== null) {\n        this.left.traverse(callback);\n      }\n\n      if (this.right !== null) {\n        this.right.traverse(callback);\n      }\n    }\n    /**\n     * Update the height of the node\n     */\n\n  }, {\n    key: \"updateHeight\",\n    value: function updateHeight() {\n      if (this.left !== null && this.right !== null) {\n        this.height = Math.max(this.left.height, this.right.height) + 1;\n      } else if (this.right !== null) {\n        this.height = this.right.height + 1;\n      } else if (this.left !== null) {\n        this.height = this.left.height + 1;\n      } else {\n        this.height = 0;\n      }\n    }\n    /**\n     * Update the height of the node\n     */\n\n  }, {\n    key: \"updateMax\",\n    value: function updateMax() {\n      this.max = this.high;\n\n      if (this.left !== null) {\n        this.max = Math.max(this.max, this.left.max);\n      }\n\n      if (this.right !== null) {\n        this.max = Math.max(this.max, this.right.max);\n      }\n    }\n    /**\n     * The balance is how the leafs are distributed on the node\n     * @return  Negative numbers are balanced to the right\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function getBalance() {\n      var balance = 0;\n\n      if (this.left !== null && this.right !== null) {\n        balance = this.left.height - this.right.height;\n      } else if (this.left !== null) {\n        balance = this.left.height + 1;\n      } else if (this.right !== null) {\n        balance = -(this.right.height + 1);\n      }\n\n      return balance;\n    }\n    /**\n     * @returns true if this node is the left child of its parent\n     */\n\n  }, {\n    key: \"isLeftChild\",\n    value: function isLeftChild() {\n      return this.parent !== null && this.parent.left === this;\n    }\n    /**\n     * get/set the left node\n     */\n\n  }, {\n    key: \"dispose\",\n\n    /**\n     * null out references.\n     */\n    value: function dispose() {\n      this.parent = null;\n      this._left = null;\n      this._right = null;\n      this.event = null;\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this._left;\n    },\n    set: function set(node) {\n      this._left = node;\n\n      if (node !== null) {\n        node.parent = this;\n      }\n\n      this.updateHeight();\n      this.updateMax();\n    }\n    /**\n     * get/set the right node\n     */\n\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this._right;\n    },\n    set: function set(node) {\n      this._right = node;\n\n      if (node !== null) {\n        node.parent = this;\n      }\n\n      this.updateHeight();\n      this.updateMax();\n    }\n  }]);\n\n  return IntervalNode;\n}();","map":{"version":3,"sources":["../../../../Tone/core/util/IntervalTimeline.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n    constructor() {\n        super(...arguments);\n        this.name = \"IntervalTimeline\";\n        /**\n         * The root node of the inteval tree\n         */\n        this._root = null;\n        /**\n         * Keep track of the length of the timeline.\n         */\n        this._length = 0;\n    }\n    /**\n     * The event to add to the timeline. All events must\n     * have a time and duration value\n     * @param  event  The event to add to the timeline\n     */\n    add(event) {\n        assert(isDefined(event.time), \"Events must have a time property\");\n        assert(isDefined(event.duration), \"Events must have a duration parameter\");\n        event.time = event.time.valueOf();\n        let node = new IntervalNode(event.time, event.time + event.duration, event);\n        if (this._root === null) {\n            this._root = node;\n        }\n        else {\n            this._root.insert(node);\n        }\n        this._length++;\n        // Restructure tree to be balanced\n        while (node !== null) {\n            node.updateHeight();\n            node.updateMax();\n            this._rebalance(node);\n            node = node.parent;\n        }\n        return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  event  The event to remove from the timeline\n     */\n    remove(event) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(event.time, results);\n            for (const node of results) {\n                if (node.event === event) {\n                    this._removeNode(node);\n                    this._length--;\n                    break;\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * The number of items in the timeline.\n     * @readOnly\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * Remove events whose time time is after the given time\n     * @param  after  The time to query.\n     */\n    cancel(after) {\n        this.forEachFrom(after, event => this.remove(event));\n        return this;\n    }\n    /**\n     * Set the root node as the given node\n     */\n    _setRoot(node) {\n        this._root = node;\n        if (this._root !== null) {\n            this._root.parent = null;\n        }\n    }\n    /**\n     * Replace the references to the node in the node's parent\n     * with the replacement node.\n     */\n    _replaceNodeInParent(node, replacement) {\n        if (node.parent !== null) {\n            if (node.isLeftChild()) {\n                node.parent.left = replacement;\n            }\n            else {\n                node.parent.right = replacement;\n            }\n            this._rebalance(node.parent);\n        }\n        else {\n            this._setRoot(replacement);\n        }\n    }\n    /**\n     * Remove the node from the tree and replace it with\n     * a successor which follows the schema.\n     */\n    _removeNode(node) {\n        if (node.left === null && node.right === null) {\n            this._replaceNodeInParent(node, null);\n        }\n        else if (node.right === null) {\n            this._replaceNodeInParent(node, node.left);\n        }\n        else if (node.left === null) {\n            this._replaceNodeInParent(node, node.right);\n        }\n        else {\n            const balance = node.getBalance();\n            let replacement;\n            let temp = null;\n            if (balance > 0) {\n                if (node.left.right === null) {\n                    replacement = node.left;\n                    replacement.right = node.right;\n                    temp = replacement;\n                }\n                else {\n                    replacement = node.left.right;\n                    while (replacement.right !== null) {\n                        replacement = replacement.right;\n                    }\n                    if (replacement.parent) {\n                        replacement.parent.right = replacement.left;\n                        temp = replacement.parent;\n                        replacement.left = node.left;\n                        replacement.right = node.right;\n                    }\n                }\n            }\n            else if (node.right.left === null) {\n                replacement = node.right;\n                replacement.left = node.left;\n                temp = replacement;\n            }\n            else {\n                replacement = node.right.left;\n                while (replacement.left !== null) {\n                    replacement = replacement.left;\n                }\n                if (replacement.parent) {\n                    replacement.parent.left = replacement.right;\n                    temp = replacement.parent;\n                    replacement.left = node.left;\n                    replacement.right = node.right;\n                }\n            }\n            if (node.parent !== null) {\n                if (node.isLeftChild()) {\n                    node.parent.left = replacement;\n                }\n                else {\n                    node.parent.right = replacement;\n                }\n            }\n            else {\n                this._setRoot(replacement);\n            }\n            if (temp) {\n                this._rebalance(temp);\n            }\n        }\n        node.dispose();\n    }\n    /**\n     * Rotate the tree to the left\n     */\n    _rotateLeft(node) {\n        const parent = node.parent;\n        const isLeftChild = node.isLeftChild();\n        // Make node.right the new root of this sub tree (instead of node)\n        const pivotNode = node.right;\n        if (pivotNode) {\n            node.right = pivotNode.left;\n            pivotNode.left = node;\n        }\n        if (parent !== null) {\n            if (isLeftChild) {\n                parent.left = pivotNode;\n            }\n            else {\n                parent.right = pivotNode;\n            }\n        }\n        else {\n            this._setRoot(pivotNode);\n        }\n    }\n    /**\n     * Rotate the tree to the right\n     */\n    _rotateRight(node) {\n        const parent = node.parent;\n        const isLeftChild = node.isLeftChild();\n        // Make node.left the new root of this sub tree (instead of node)\n        const pivotNode = node.left;\n        if (pivotNode) {\n            node.left = pivotNode.right;\n            pivotNode.right = node;\n        }\n        if (parent !== null) {\n            if (isLeftChild) {\n                parent.left = pivotNode;\n            }\n            else {\n                parent.right = pivotNode;\n            }\n        }\n        else {\n            this._setRoot(pivotNode);\n        }\n    }\n    /**\n     * Balance the BST\n     */\n    _rebalance(node) {\n        const balance = node.getBalance();\n        if (balance > 1 && node.left) {\n            if (node.left.getBalance() < 0) {\n                this._rotateLeft(node.left);\n            }\n            else {\n                this._rotateRight(node);\n            }\n        }\n        else if (balance < -1 && node.right) {\n            if (node.right.getBalance() > 0) {\n                this._rotateRight(node.right);\n            }\n            else {\n                this._rotateLeft(node);\n            }\n        }\n    }\n    /**\n     * Get an event whose time and duration span the give time. Will\n     * return the match whose \"time\" value is closest to the given time.\n     * @return  The event which spans the desired time\n     */\n    get(time) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(time, results);\n            if (results.length > 0) {\n                let max = results[0];\n                for (let i = 1; i < results.length; i++) {\n                    if (results[i].low > max.low) {\n                        max = results[i];\n                    }\n                }\n                return max.event;\n            }\n        }\n        return null;\n    }\n    /**\n     * Iterate over everything in the timeline.\n     * @param  callback The callback to invoke with every item\n     */\n    forEach(callback) {\n        if (this._root !== null) {\n            const allNodes = [];\n            this._root.traverse(node => allNodes.push(node));\n            allNodes.forEach(node => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array in which the given time\n     * overlaps with the time and duration time of the event.\n     * @param  time The time to check if items are overlapping\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAtTime(time, callback) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(time, results);\n            results.forEach(node => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array in which the time is greater\n     * than or equal to the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachFrom(time, callback) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.searchAfter(time, results);\n            results.forEach(node => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        if (this._root !== null) {\n            this._root.traverse(node => node.dispose());\n        }\n        this._root = null;\n        return this;\n    }\n}\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n    constructor(low, high, event) {\n        // the nodes to the left\n        this._left = null;\n        // the nodes to the right\n        this._right = null;\n        // the parent node\n        this.parent = null;\n        // the number of child nodes\n        this.height = 0;\n        this.event = event;\n        // the low value\n        this.low = low;\n        // the high value\n        this.high = high;\n        // the high value for this and all child nodes\n        this.max = this.high;\n    }\n    /**\n     * Insert a node into the correct spot in the tree\n     */\n    insert(node) {\n        if (node.low <= this.low) {\n            if (this.left === null) {\n                this.left = node;\n            }\n            else {\n                this.left.insert(node);\n            }\n        }\n        else if (this.right === null) {\n            this.right = node;\n        }\n        else {\n            this.right.insert(node);\n        }\n    }\n    /**\n     * Search the tree for nodes which overlap\n     * with the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n    search(point, results) {\n        // If p is to the right of the rightmost point of any interval\n        // in this node and all children, there won't be any matches.\n        if (point > this.max) {\n            return;\n        }\n        // Search left children\n        if (this.left !== null) {\n            this.left.search(point, results);\n        }\n        // Check this node\n        if (this.low <= point && this.high > point) {\n            results.push(this);\n        }\n        // If p is to the left of the time of this interval,\n        // then it can't be in any child to the right.\n        if (this.low > point) {\n            return;\n        }\n        // Search right children\n        if (this.right !== null) {\n            this.right.search(point, results);\n        }\n    }\n    /**\n     * Search the tree for nodes which are less\n     * than the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n    searchAfter(point, results) {\n        // Check this node\n        if (this.low >= point) {\n            results.push(this);\n            if (this.left !== null) {\n                this.left.searchAfter(point, results);\n            }\n        }\n        // search the right side\n        if (this.right !== null) {\n            this.right.searchAfter(point, results);\n        }\n    }\n    /**\n     * Invoke the callback on this element and both it's branches\n     * @param  {Function}  callback\n     */\n    traverse(callback) {\n        callback(this);\n        if (this.left !== null) {\n            this.left.traverse(callback);\n        }\n        if (this.right !== null) {\n            this.right.traverse(callback);\n        }\n    }\n    /**\n     * Update the height of the node\n     */\n    updateHeight() {\n        if (this.left !== null && this.right !== null) {\n            this.height = Math.max(this.left.height, this.right.height) + 1;\n        }\n        else if (this.right !== null) {\n            this.height = this.right.height + 1;\n        }\n        else if (this.left !== null) {\n            this.height = this.left.height + 1;\n        }\n        else {\n            this.height = 0;\n        }\n    }\n    /**\n     * Update the height of the node\n     */\n    updateMax() {\n        this.max = this.high;\n        if (this.left !== null) {\n            this.max = Math.max(this.max, this.left.max);\n        }\n        if (this.right !== null) {\n            this.max = Math.max(this.max, this.right.max);\n        }\n    }\n    /**\n     * The balance is how the leafs are distributed on the node\n     * @return  Negative numbers are balanced to the right\n     */\n    getBalance() {\n        let balance = 0;\n        if (this.left !== null && this.right !== null) {\n            balance = this.left.height - this.right.height;\n        }\n        else if (this.left !== null) {\n            balance = this.left.height + 1;\n        }\n        else if (this.right !== null) {\n            balance = -(this.right.height + 1);\n        }\n        return balance;\n    }\n    /**\n     * @returns true if this node is the left child of its parent\n     */\n    isLeftChild() {\n        return this.parent !== null && this.parent.left === this;\n    }\n    /**\n     * get/set the left node\n     */\n    get left() {\n        return this._left;\n    }\n    set left(node) {\n        this._left = node;\n        if (node !== null) {\n            node.parent = this;\n        }\n        this.updateHeight();\n        this.updateMax();\n    }\n    /**\n     * get/set the right node\n     */\n    get right() {\n        return this._right;\n    }\n    set right(node) {\n        this._right = node;\n        if (node !== null) {\n            node.parent = this;\n        }\n        this.updateHeight();\n        this.updateMax();\n    }\n    /**\n     * null out references.\n     */\n    dispose() {\n        this.parent = null;\n        this._left = null;\n        this._right = null;\n        this.event = null;\n    }\n}\n//# sourceMappingURL=IntervalTimeline.js.map"]},"metadata":{},"sourceType":"module"}