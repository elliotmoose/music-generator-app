{"ast":null,"code":"var Resource = require('resource-loader').Resource,\n    core = require('../core'),\n    extras = require('../extras'),\n    path = require('path');\n\nfunction parse(resource, texture) {\n  var data = {};\n  var info = resource.data.getElementsByTagName('info')[0];\n  var common = resource.data.getElementsByTagName('common')[0];\n  data.font = info.getAttribute('face');\n  data.size = parseInt(info.getAttribute('size'), 10);\n  data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n  data.chars = {}; //parse letters\n\n  var letters = resource.data.getElementsByTagName('char');\n\n  for (var i = 0; i < letters.length; i++) {\n    var charCode = parseInt(letters[i].getAttribute('id'), 10);\n    var textureRect = new core.Rectangle(parseInt(letters[i].getAttribute('x'), 10) + texture.frame.x, parseInt(letters[i].getAttribute('y'), 10) + texture.frame.y, parseInt(letters[i].getAttribute('width'), 10), parseInt(letters[i].getAttribute('height'), 10));\n    data.chars[charCode] = {\n      xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),\n      yOffset: parseInt(letters[i].getAttribute('yoffset'), 10),\n      xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),\n      kerning: {},\n      texture: new core.Texture(texture.baseTexture, textureRect)\n    };\n  } //parse kernings\n\n\n  var kernings = resource.data.getElementsByTagName('kerning');\n\n  for (i = 0; i < kernings.length; i++) {\n    var first = parseInt(kernings[i].getAttribute('first'), 10);\n    var second = parseInt(kernings[i].getAttribute('second'), 10);\n    var amount = parseInt(kernings[i].getAttribute('amount'), 10);\n    data.chars[second].kerning[first] = amount;\n  }\n\n  resource.bitmapFont = data; // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n  // but it's very likely to change\n\n  extras.BitmapText.fonts[data.font] = data;\n}\n\nmodule.exports = function () {\n  return function (resource, next) {\n    // skip if no data or not xml data\n    if (!resource.data || !resource.isXml) {\n      return next();\n    } // skip if not bitmap font data, using some silly duck-typing\n\n\n    if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {\n      return next();\n    }\n\n    var xmlUrl = path.dirname(resource.url);\n\n    if (xmlUrl === '.') {\n      xmlUrl = '';\n    }\n\n    if (this.baseUrl && xmlUrl) {\n      // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n      if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n        xmlUrl += '/';\n      } // remove baseUrl from xmlUrl\n\n\n      xmlUrl = xmlUrl.replace(this.baseUrl, '');\n    } // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n\n\n    if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n      xmlUrl += '/';\n    }\n\n    var textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');\n\n    if (core.utils.TextureCache[textureUrl]) {\n      //reuse existing texture\n      parse(resource, core.utils.TextureCache[textureUrl]);\n      next();\n    } else {\n      var loadOptions = {\n        crossOrigin: resource.crossOrigin,\n        loadType: Resource.LOAD_TYPE.IMAGE\n      }; // load the texture for the font\n\n      this.add(resource.name + '_image', textureUrl, loadOptions, function (res) {\n        parse(resource, res.texture);\n        next();\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/loaders/bitmapFontParser.js"],"names":["Resource","require","core","extras","path","parse","resource","texture","data","info","getElementsByTagName","common","font","getAttribute","size","parseInt","lineHeight","chars","letters","i","length","charCode","textureRect","Rectangle","frame","x","y","xOffset","yOffset","xAdvance","kerning","Texture","baseTexture","kernings","first","second","amount","bitmapFont","BitmapText","fonts","module","exports","next","isXml","xmlUrl","dirname","url","baseUrl","charAt","replace","textureUrl","utils","TextureCache","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","add","name","res"],"mappings":"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","sourcesContent":["var Resource = require('resource-loader').Resource,\n    core = require('../core'),\n    extras = require('../extras'),\n    path = require('path');\n\n\nfunction parse(resource, texture) {\n    var data = {};\n    var info = resource.data.getElementsByTagName('info')[0];\n    var common = resource.data.getElementsByTagName('common')[0];\n\n    data.font = info.getAttribute('face');\n    data.size = parseInt(info.getAttribute('size'), 10);\n    data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n    data.chars = {};\n\n    //parse letters\n    var letters = resource.data.getElementsByTagName('char');\n\n    for (var i = 0; i < letters.length; i++)\n    {\n        var charCode = parseInt(letters[i].getAttribute('id'), 10);\n\n        var textureRect = new core.Rectangle(\n            parseInt(letters[i].getAttribute('x'), 10) + texture.frame.x,\n            parseInt(letters[i].getAttribute('y'), 10) + texture.frame.y,\n            parseInt(letters[i].getAttribute('width'), 10),\n            parseInt(letters[i].getAttribute('height'), 10)\n        );\n\n        data.chars[charCode] = {\n            xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),\n            yOffset: parseInt(letters[i].getAttribute('yoffset'), 10),\n            xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),\n            kerning: {},\n            texture: new core.Texture(texture.baseTexture, textureRect)\n\n        };\n    }\n\n    //parse kernings\n    var kernings = resource.data.getElementsByTagName('kerning');\n    for (i = 0; i < kernings.length; i++)\n    {\n        var first = parseInt(kernings[i].getAttribute('first'), 10);\n        var second = parseInt(kernings[i].getAttribute('second'), 10);\n        var amount = parseInt(kernings[i].getAttribute('amount'), 10);\n\n        data.chars[second].kerning[first] = amount;\n    }\n\n    resource.bitmapFont = data;\n\n    // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n    // but it's very likely to change\n    extras.BitmapText.fonts[data.font] = data;\n}\n\n\nmodule.exports = function ()\n{\n    return function (resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || !resource.isXml)\n        {\n            return next();\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (\n            resource.data.getElementsByTagName('page').length === 0 ||\n            resource.data.getElementsByTagName('info').length === 0 ||\n            resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n            )\n        {\n            return next();\n        }\n\n        var xmlUrl = path.dirname(resource.url);\n\n        if (xmlUrl === '.') {\n            xmlUrl = '';\n        }\n\n        if (this.baseUrl && xmlUrl) {\n            // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n            if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n                xmlUrl += '/';\n            }\n\n            // remove baseUrl from xmlUrl\n            xmlUrl = xmlUrl.replace(this.baseUrl, '');\n        }\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n            xmlUrl += '/';\n        }\n        var textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');\n        if (core.utils.TextureCache[textureUrl]) {\n            //reuse existing texture\n            parse(resource, core.utils.TextureCache[textureUrl]);\n            next();\n        }\n        else {\n            var loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                loadType: Resource.LOAD_TYPE.IMAGE\n            };\n            // load the texture for the font\n            this.add(resource.name + '_image', textureUrl, loadOptions, function (res) {\n                parse(resource, res.texture);\n                next();\n            });\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"script"}