{"ast":null,"code":"import { createInvalidStateError } from '../factories/invalid-state-error';\nexport var wrapChannelSplitterNode = function wrapChannelSplitterNode(channelSplitterNode) {\n  var channelCount = channelSplitterNode.numberOfOutputs; // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n\n  Object.defineProperty(channelSplitterNode, 'channelCount', {\n    get: function get() {\n      return channelCount;\n    },\n    set: function set(value) {\n      if (value !== channelCount) {\n        throw createInvalidStateError();\n      }\n    }\n  }); // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n\n  Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n    get: function get() {\n      return 'explicit';\n    },\n    set: function set(value) {\n      if (value !== 'explicit') {\n        throw createInvalidStateError();\n      }\n    }\n  }); // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n\n  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n    get: function get() {\n      return 'discrete';\n    },\n    set: function set(value) {\n      if (value !== 'discrete') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/helpers/wrap-channel-splitter-node.ts"],"names":[],"mappings":"AAAA,SAAS,uBAAT,QAAwC,kCAAxC;AAGA,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,CAAC,mBAAD,EAA0D;AAC7F,MAAM,YAAY,GAAG,mBAAmB,CAAC,eAAzC,CAD6F,CAG7F;;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,mBAAtB,EAA2C,cAA3C,EAA2D;AACvD,IAAA,GAAG,EAAE;AAAA,aAAM,YAAN;AAAA,KADkD;AAEvD,IAAA,GAAG,EAAE,aAAC,KAAD,EAAU;AACX,UAAI,KAAK,KAAK,YAAd,EAA4B;AACxB,cAAM,uBAAuB,EAA7B;AACH;AACJ;AANsD,GAA3D,EAJ6F,CAa7F;;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,mBAAtB,EAA2C,kBAA3C,EAA+D;AAC3D,IAAA,GAAG,EAAE;AAAA,aAAM,UAAN;AAAA,KADsD;AAE3D,IAAA,GAAG,EAAE,aAAC,KAAD,EAAU;AACX,UAAI,KAAK,KAAK,UAAd,EAA0B;AACtB,cAAM,uBAAuB,EAA7B;AACH;AACJ;AAN0D,GAA/D,EAd6F,CAuB7F;;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,mBAAtB,EAA2C,uBAA3C,EAAoE;AAChE,IAAA,GAAG,EAAE;AAAA,aAAM,UAAN;AAAA,KAD2D;AAEhE,IAAA,GAAG,EAAE,aAAC,KAAD,EAAU;AACX,UAAI,KAAK,KAAK,UAAd,EAA0B;AACtB,cAAM,uBAAuB,EAA7B;AACH;AACJ;AAN+D,GAApE;AAQH,CAhCM","sourceRoot":"","sourcesContent":["import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=wrap-channel-splitter-node.js.map"]},"metadata":{},"sourceType":"module"}