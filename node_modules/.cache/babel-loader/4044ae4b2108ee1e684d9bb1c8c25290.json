{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nexport var ToneWithContext = /*#__PURE__*/function (_Tone) {\n  _inherits(ToneWithContext, _Tone);\n\n  var _super = _createSuper(ToneWithContext);\n\n  function ToneWithContext() {\n    var _this;\n\n    _classCallCheck(this, ToneWithContext);\n\n    _this = _super.call(this);\n    var options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (_this.defaultContext) {\n      _this.context = _this.defaultContext;\n    } else {\n      _this.context = options.context;\n    }\n\n    return _this;\n  }\n\n  _createClass(ToneWithContext, [{\n    key: \"now\",\n\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.now());\n     * }, 100);\n     */\n    value: function now() {\n      return this.context.currentTime + this.context.lookAhead;\n    }\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.immediate());\n     * }, 100);\n     */\n\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return this.context.currentTime;\n    }\n    /**\n     * The duration in seconds of one sample.\n     * @example\n     * console.log(Tone.Transport.sampleTime);\n     */\n\n  }, {\n    key: \"toSeconds\",\n\n    /**\n     * Convert the incoming time to seconds.\n     * This is calculated against the current [[Tone.Transport]] bpm\n     * @example\n     * const gain = new Tone.Gain();\n     * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n     * // ramp the tempo to 60 bpm over 30 seconds\n     * Tone.getTransport().bpm.rampTo(60, 30);\n     */\n    value: function toSeconds(time) {\n      return new TimeClass(this.context, time).toSeconds();\n    }\n    /**\n     * Convert the input to a frequency number\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toFrequency(\"4n\"));\n     */\n\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency(freq) {\n      return new FrequencyClass(this.context, freq).toFrequency();\n    }\n    /**\n     * Convert the input time into ticks\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toTicks(\"4n\"));\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks(time) {\n      return new TransportTimeClass(this.context, time).toTicks();\n    } //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n\n  }, {\n    key: \"_getPartialProperties\",\n    value: function _getPartialProperties(props) {\n      var options = this.get(); // remove attributes from the prop that are not in the partial\n\n      Object.keys(options).forEach(function (name) {\n        if (isUndef(props[name])) {\n          delete options[name];\n        }\n      });\n      return options;\n    }\n    /**\n     * Get the object's attributes.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.get());\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this2 = this;\n\n      var defaults = getDefaultsFromInstance(this);\n      Object.keys(defaults).forEach(function (attribute) {\n        if (Reflect.has(_this2, attribute)) {\n          var member = _this2[attribute];\n\n          if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n            defaults[attribute] = member.value;\n          } else if (member instanceof ToneWithContext) {\n            defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n          } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n            defaults[attribute] = member;\n          } else {\n            // remove all undefined and unserializable attributes\n            delete defaults[attribute];\n          }\n        }\n      });\n      return defaults;\n    }\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * const filter = new Tone.Filter().toDestination();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: \"C6\",\n     * \ttype: \"highpass\"\n     * });\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(props) {\n      var _this3 = this;\n\n      Object.keys(props).forEach(function (attribute) {\n        if (Reflect.has(_this3, attribute) && isDefined(_this3[attribute])) {\n          if (_this3[attribute] && isDefined(_this3[attribute].value) && isDefined(_this3[attribute].setValueAtTime)) {\n            // small optimization\n            if (_this3[attribute].value !== props[attribute]) {\n              _this3[attribute].value = props[attribute];\n            }\n          } else if (_this3[attribute] instanceof ToneWithContext) {\n            _this3[attribute].set(props[attribute]);\n          } else {\n            _this3[attribute] = props[attribute];\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"sampleTime\",\n    get: function get() {\n      return 1 / this.context.sampleRate;\n    }\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     * @example\n     * console.log(Tone.Destination.blockTime);\n     */\n\n  }, {\n    key: \"blockTime\",\n    get: function get() {\n      return 128 / this.context.sampleRate;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        context: getContext()\n      };\n    }\n  }]);\n\n  return ToneWithContext;\n}(Tone);","map":{"version":3,"sources":["../../../../Tone/core/context/ToneWithContext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport class ToneWithContext extends Tone {\n    constructor() {\n        super();\n        const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n        if (this.defaultContext) {\n            this.context = this.defaultContext;\n        }\n        else {\n            this.context = options.context;\n        }\n    }\n    static getDefaults() {\n        return {\n            context: getContext(),\n        };\n    }\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.now());\n     * }, 100);\n     */\n    now() {\n        return this.context.currentTime + this.context.lookAhead;\n    }\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.immediate());\n     * }, 100);\n     */\n    immediate() {\n        return this.context.currentTime;\n    }\n    /**\n     * The duration in seconds of one sample.\n     * @example\n     * console.log(Tone.Transport.sampleTime);\n     */\n    get sampleTime() {\n        return 1 / this.context.sampleRate;\n    }\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     * @example\n     * console.log(Tone.Destination.blockTime);\n     */\n    get blockTime() {\n        return 128 / this.context.sampleRate;\n    }\n    /**\n     * Convert the incoming time to seconds.\n     * This is calculated against the current [[Tone.Transport]] bpm\n     * @example\n     * const gain = new Tone.Gain();\n     * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n     * // ramp the tempo to 60 bpm over 30 seconds\n     * Tone.getTransport().bpm.rampTo(60, 30);\n     */\n    toSeconds(time) {\n        return new TimeClass(this.context, time).toSeconds();\n    }\n    /**\n     * Convert the input to a frequency number\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toFrequency(\"4n\"));\n     */\n    toFrequency(freq) {\n        return new FrequencyClass(this.context, freq).toFrequency();\n    }\n    /**\n     * Convert the input time into ticks\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toTicks(\"4n\"));\n     */\n    toTicks(time) {\n        return new TransportTimeClass(this.context, time).toTicks();\n    }\n    //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n    _getPartialProperties(props) {\n        const options = this.get();\n        // remove attributes from the prop that are not in the partial\n        Object.keys(options).forEach(name => {\n            if (isUndef(props[name])) {\n                delete options[name];\n            }\n        });\n        return options;\n    }\n    /**\n     * Get the object's attributes.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.get());\n     */\n    get() {\n        const defaults = getDefaultsFromInstance(this);\n        Object.keys(defaults).forEach(attribute => {\n            if (Reflect.has(this, attribute)) {\n                const member = this[attribute];\n                if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n                    defaults[attribute] = member.value;\n                }\n                else if (member instanceof ToneWithContext) {\n                    defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n                    // otherwise make sure it's a serializable type\n                }\n                else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n                    defaults[attribute] = member;\n                }\n                else {\n                    // remove all undefined and unserializable attributes\n                    delete defaults[attribute];\n                }\n            }\n        });\n        return defaults;\n    }\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * const filter = new Tone.Filter().toDestination();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: \"C6\",\n     * \ttype: \"highpass\"\n     * });\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n     * player.autostart = true;\n     */\n    set(props) {\n        Object.keys(props).forEach(attribute => {\n            if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n                if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n                    // small optimization\n                    if (this[attribute].value !== props[attribute]) {\n                        this[attribute].value = props[attribute];\n                    }\n                }\n                else if (this[attribute] instanceof ToneWithContext) {\n                    this[attribute].set(props[attribute]);\n                }\n                else {\n                    this[attribute] = props[attribute];\n                }\n            }\n        });\n        return this;\n    }\n}\n//# sourceMappingURL=ToneWithContext.js.map"]},"metadata":{},"sourceType":"module"}