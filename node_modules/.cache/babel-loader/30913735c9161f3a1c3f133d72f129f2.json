{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\n\nexport var WaveShaper = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(WaveShaper, _SignalOperator);\n\n  var _super = _createSuper(WaveShaper);\n\n  function WaveShaper() {\n    var _this;\n\n    _classCallCheck(this, WaveShaper);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n    _this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n\n    _this._shaper = _this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n\n    _this.input = _this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n\n    _this.output = _this._shaper;\n    var options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      _this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      _this.setMap(options.mapping, options.length);\n    }\n\n    return _this;\n  }\n\n  _createClass(WaveShaper, [{\n    key: \"setMap\",\n\n    /**\n     * Uses a mapping function to set the value of the curve.\n     * @param mapping The function used to define the values.\n     *                The mapping function take two arguments:\n     *                the first is the value at the current position\n     *                which goes from -1 to 1 over the number of elements\n     *                in the curve array. The second argument is the array position.\n     * @example\n     * const shaper = new Tone.WaveShaper();\n     * // map the input signal from [-1, 1] to [0, 10]\n     * shaper.setMap((val, index) => (val + 1) * 5);\n     */\n    value: function setMap(mapping) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;\n      var array = new Float32Array(length);\n\n      for (var i = 0, len = length; i < len; i++) {\n        var normalized = i / (len - 1) * 2 - 1;\n        array[i] = mapping(normalized, i);\n      }\n\n      this.curve = array;\n      return this;\n    }\n    /**\n     * The array to set as the waveshaper curve. For linear curves\n     * array length does not make much difference, but for complex curves\n     * longer arrays will provide smoother interpolation.\n     */\n\n  }, {\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(WaveShaper.prototype), \"dispose\", this).call(this);\n\n      this._shaper.disconnect();\n\n      return this;\n    }\n  }, {\n    key: \"curve\",\n    get: function get() {\n      return this._shaper.curve;\n    },\n    set: function set(mapping) {\n      this._shaper.curve = mapping;\n    }\n    /**\n     * Specifies what type of oversampling (if any) should be used when\n     * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      var isOverSampleType = [\"none\", \"2x\", \"4x\"].some(function (str) {\n        return str.includes(oversampling);\n      });\n      assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n      this._shaper.oversample = oversampling;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        length: 1024\n      });\n    }\n  }]);\n\n  return WaveShaper;\n}(SignalOperator);","map":{"version":3,"sources":["../../../Tone/signal/WaveShaper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator {\n    constructor() {\n        super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n        this.name = \"WaveShaper\";\n        /**\n         * the waveshaper node\n         */\n        this._shaper = this.context.createWaveShaper();\n        /**\n         * The input to the waveshaper node.\n         */\n        this.input = this._shaper;\n        /**\n         * The output from the waveshaper node\n         */\n        this.output = this._shaper;\n        const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n        if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n            this.curve = Float32Array.from(options.mapping);\n        }\n        else if (isFunction(options.mapping)) {\n            this.setMap(options.mapping, options.length);\n        }\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            length: 1024,\n        });\n    }\n    /**\n     * Uses a mapping function to set the value of the curve.\n     * @param mapping The function used to define the values.\n     *                The mapping function take two arguments:\n     *                the first is the value at the current position\n     *                which goes from -1 to 1 over the number of elements\n     *                in the curve array. The second argument is the array position.\n     * @example\n     * const shaper = new Tone.WaveShaper();\n     * // map the input signal from [-1, 1] to [0, 10]\n     * shaper.setMap((val, index) => (val + 1) * 5);\n     */\n    setMap(mapping, length = 1024) {\n        const array = new Float32Array(length);\n        for (let i = 0, len = length; i < len; i++) {\n            const normalized = (i / (len - 1)) * 2 - 1;\n            array[i] = mapping(normalized, i);\n        }\n        this.curve = array;\n        return this;\n    }\n    /**\n     * The array to set as the waveshaper curve. For linear curves\n     * array length does not make much difference, but for complex curves\n     * longer arrays will provide smoother interpolation.\n     */\n    get curve() {\n        return this._shaper.curve;\n    }\n    set curve(mapping) {\n        this._shaper.curve = mapping;\n    }\n    /**\n     * Specifies what type of oversampling (if any) should be used when\n     * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        const isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n        assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n        this._shaper.oversample = oversampling;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._shaper.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=WaveShaper.js.map"]},"metadata":{},"sourceType":"module"}