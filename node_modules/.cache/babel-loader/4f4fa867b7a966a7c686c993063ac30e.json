{"ast":null,"code":"/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n * @private\n */\nfunction WebGLGraphicsData(gl) {\n  /**\n   * The current WebGL drawing context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl; //TODO does this need to be split before uploding??\n\n  /**\n   * An array of color components (r,g,b)\n   * @member {Array}\n   */\n\n  this.color = [0, 0, 0]; // color split!\n\n  /**\n   * An array of points to draw\n   * @member {Array}\n   */\n\n  this.points = [];\n  /**\n   * The indices of the vertices\n   * @member {Array}\n   */\n\n  this.indices = [];\n  /**\n   * The main buffer\n   * @member {WebGLBuffer}\n   */\n\n  this.buffer = gl.createBuffer();\n  /**\n   * The index buffer\n   * @member {WebGLBuffer}\n   */\n\n  this.indexBuffer = gl.createBuffer();\n  /**\n   * todo @alvin\n   * @member {number}\n   */\n\n  this.mode = 1;\n  /**\n   * The alpha of the graphics\n   * @member {number}\n   */\n\n  this.alpha = 1;\n  /**\n   * Whether this graphics is dirty or not\n   * @member {boolean}\n   */\n\n  this.dirty = true;\n  this.glPoints = null;\n  this.glIndices = null;\n}\n\nWebGLGraphicsData.prototype.constructor = WebGLGraphicsData;\nmodule.exports = WebGLGraphicsData;\n/**\n * Resets the vertices and the indices\n */\n\nWebGLGraphicsData.prototype.reset = function () {\n  this.points.length = 0;\n  this.indices.length = 0;\n};\n/**\n * Binds the buffers and uploads the data\n */\n\n\nWebGLGraphicsData.prototype.upload = function () {\n  var gl = this.gl; //    this.lastIndex = graphics.graphicsData.length;\n\n  this.glPoints = new Float32Array(this.points);\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, this.glPoints, gl.STATIC_DRAW);\n  this.glIndices = new Uint16Array(this.indices);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.glIndices, gl.STATIC_DRAW);\n  this.dirty = false;\n};\n\nWebGLGraphicsData.prototype.destroy = function () {\n  this.color = null;\n  this.points = null;\n  this.indices = null;\n  this.gl.deleteBuffer(this.buffer);\n  this.gl.deleteBuffer(this.indexBuffer);\n  this.gl = null;\n  this.buffer = null;\n  this.indexBuffer = null;\n  this.glPoints = null;\n  this.glIndices = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/graphics/webgl/WebGLGraphicsData.js"],"names":["WebGLGraphicsData","gl","color","points","indices","buffer","createBuffer","indexBuffer","mode","alpha","dirty","glPoints","glIndices","prototype","constructor","module","exports","reset","length","upload","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","Uint16Array","ELEMENT_ARRAY_BUFFER","destroy","deleteBuffer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,CAA2BC,EAA3B,EAA+B;AAE3B;AACJ;AACA;AACA;AACA;AACI,OAAKA,EAAL,GAAUA,EAAV,CAP2B,CAS3B;;AACA;AACJ;AACA;AACA;;AACI,OAAKC,KAAL,GAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAd2B,CAcL;;AAEtB;AACJ;AACA;AACA;;AACI,OAAKC,MAAL,GAAc,EAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,OAAL,GAAe,EAAf;AACA;AACJ;AACA;AACA;;AACI,OAAKC,MAAL,GAAcJ,EAAE,CAACK,YAAH,EAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,WAAL,GAAmBN,EAAE,CAACK,YAAH,EAAnB;AAEA;AACJ;AACA;AACA;;AACI,OAAKE,IAAL,GAAY,CAAZ;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,KAAL,GAAa,CAAb;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,KAAL,GAAa,IAAb;AAEA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACH;;AAEDZ,iBAAiB,CAACa,SAAlB,CAA4BC,WAA5B,GAA0Cd,iBAA1C;AACAe,MAAM,CAACC,OAAP,GAAiBhB,iBAAjB;AAEA;AACA;AACA;;AACAA,iBAAiB,CAACa,SAAlB,CAA4BI,KAA5B,GAAoC,YAAY;AAC5C,OAAKd,MAAL,CAAYe,MAAZ,GAAqB,CAArB;AACA,OAAKd,OAAL,CAAac,MAAb,GAAsB,CAAtB;AACH,CAHD;AAKA;AACA;AACA;;;AACAlB,iBAAiB,CAACa,SAAlB,CAA4BM,MAA5B,GAAqC,YAAY;AAC7C,MAAIlB,EAAE,GAAG,KAAKA,EAAd,CAD6C,CAGjD;;AACI,OAAKU,QAAL,GAAgB,IAAIS,YAAJ,CAAiB,KAAKjB,MAAtB,CAAhB;AAEAF,EAAAA,EAAE,CAACoB,UAAH,CAAcpB,EAAE,CAACqB,YAAjB,EAA+B,KAAKjB,MAApC;AACAJ,EAAAA,EAAE,CAACsB,UAAH,CAActB,EAAE,CAACqB,YAAjB,EAA+B,KAAKX,QAApC,EAA8CV,EAAE,CAACuB,WAAjD;AAEA,OAAKZ,SAAL,GAAiB,IAAIa,WAAJ,CAAgB,KAAKrB,OAArB,CAAjB;AAEAH,EAAAA,EAAE,CAACoB,UAAH,CAAcpB,EAAE,CAACyB,oBAAjB,EAAuC,KAAKnB,WAA5C;AACAN,EAAAA,EAAE,CAACsB,UAAH,CAActB,EAAE,CAACyB,oBAAjB,EAAuC,KAAKd,SAA5C,EAAuDX,EAAE,CAACuB,WAA1D;AAEA,OAAKd,KAAL,GAAa,KAAb;AACH,CAfD;;AAiBAV,iBAAiB,CAACa,SAAlB,CAA4Bc,OAA5B,GAAsC,YAAY;AAC9C,OAAKzB,KAAL,GAAa,IAAb;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,OAAL,GAAe,IAAf;AAEA,OAAKH,EAAL,CAAQ2B,YAAR,CAAqB,KAAKvB,MAA1B;AACA,OAAKJ,EAAL,CAAQ2B,YAAR,CAAqB,KAAKrB,WAA1B;AAEA,OAAKN,EAAL,GAAU,IAAV;AAEA,OAAKI,MAAL,GAAc,IAAd;AACA,OAAKE,WAAL,GAAmB,IAAnB;AAEA,OAAKI,QAAL,GAAgB,IAAhB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACH,CAfD","sourcesContent":["/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n * @private\n */\nfunction WebGLGraphicsData(gl) {\n\n    /**\n     * The current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    //TODO does this need to be split before uploding??\n    /**\n     * An array of color components (r,g,b)\n     * @member {Array}\n     */\n    this.color = [0,0,0]; // color split!\n\n    /**\n     * An array of points to draw\n     * @member {Array}\n     */\n    this.points = [];\n\n    /**\n     * The indices of the vertices\n     * @member {Array}\n     */\n    this.indices = [];\n    /**\n     * The main buffer\n     * @member {WebGLBuffer}\n     */\n    this.buffer = gl.createBuffer();\n\n    /**\n     * The index buffer\n     * @member {WebGLBuffer}\n     */\n    this.indexBuffer = gl.createBuffer();\n\n    /**\n     * todo @alvin\n     * @member {number}\n     */\n    this.mode = 1;\n\n    /**\n     * The alpha of the graphics\n     * @member {number}\n     */\n    this.alpha = 1;\n\n    /**\n     * Whether this graphics is dirty or not\n     * @member {boolean}\n     */\n    this.dirty = true;\n\n    this.glPoints = null;\n    this.glIndices = null;\n}\n\nWebGLGraphicsData.prototype.constructor = WebGLGraphicsData;\nmodule.exports = WebGLGraphicsData;\n\n/**\n * Resets the vertices and the indices\n */\nWebGLGraphicsData.prototype.reset = function () {\n    this.points.length = 0;\n    this.indices.length = 0;\n};\n\n/**\n * Binds the buffers and uploads the data\n */\nWebGLGraphicsData.prototype.upload = function () {\n    var gl = this.gl;\n\n//    this.lastIndex = graphics.graphicsData.length;\n    this.glPoints = new Float32Array(this.points);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.glPoints, gl.STATIC_DRAW);\n\n    this.glIndices = new Uint16Array(this.indices);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.glIndices, gl.STATIC_DRAW);\n\n    this.dirty = false;\n};\n\nWebGLGraphicsData.prototype.destroy = function () {\n    this.color = null;\n    this.points = null;\n    this.indices = null;\n\n    this.gl.deleteBuffer(this.buffer);\n    this.gl.deleteBuffer(this.indexBuffer);\n    \n    this.gl = null;\n\n    this.buffer = null;\n    this.indexBuffer = null;\n\n    this.glPoints = null;\n    this.glIndices = null;\n};\n"]},"metadata":{},"sourceType":"script"}