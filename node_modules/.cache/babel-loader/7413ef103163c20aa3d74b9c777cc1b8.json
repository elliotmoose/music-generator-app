{"ast":null,"code":"var Rectangle = require('./Rectangle'),\n    CONST = require('../../const');\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the center of this circle\n * @param y {number} The Y coordinate of the center of this circle\n * @param radius {number} The radius of the circle\n */\n\n\nfunction Circle(x, y, radius) {\n  /**\n   * @member {number}\n   * @default 0\n   */\n  this.x = x || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.y = y || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.radius = radius || 0;\n  /**\n   * The type of the object, mainly used to avoid `instanceof` checks\n   *\n   * @member {number}\n   */\n\n  this.type = CONST.SHAPES.CIRC;\n}\n\nCircle.prototype.constructor = Circle;\nmodule.exports = Circle;\n/**\n * Creates a clone of this Circle instance\n *\n * @return {Circle} a copy of the Circle\n */\n\nCircle.prototype.clone = function () {\n  return new Circle(this.x, this.y, this.radius);\n};\n/**\n * Checks whether the x and y coordinates given are contained within this circle\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this Circle\n */\n\n\nCircle.prototype.contains = function (x, y) {\n  if (this.radius <= 0) {\n    return false;\n  }\n\n  var dx = this.x - x,\n      dy = this.y - y,\n      r2 = this.radius * this.radius;\n  dx *= dx;\n  dy *= dy;\n  return dx + dy <= r2;\n};\n/**\n* Returns the framing rectangle of the circle as a Rectangle object\n*\n* @return {Rectangle} the framing rectangle\n*/\n\n\nCircle.prototype.getBounds = function () {\n  return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/math/shapes/Circle.js"],"names":["Rectangle","require","CONST","Circle","x","y","radius","type","SHAPES","CIRC","prototype","constructor","module","exports","clone","contains","dx","dy","r2","getBounds"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,MAAtB,EACA;AACI;AACJ;AACA;AACA;AACI,OAAKF,CAAL,GAASA,CAAC,IAAI,CAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,CAAL,GAASA,CAAC,IAAI,CAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,MAAL,GAAcA,MAAM,IAAI,CAAxB;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,IAAL,GAAYL,KAAK,CAACM,MAAN,CAAaC,IAAzB;AACH;;AAEDN,MAAM,CAACO,SAAP,CAAiBC,WAAjB,GAA+BR,MAA/B;AACAS,MAAM,CAACC,OAAP,GAAiBV,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACO,SAAP,CAAiBI,KAAjB,GAAyB,YACzB;AACI,SAAO,IAAIX,MAAJ,CAAW,KAAKC,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,KAAKC,MAAhC,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,MAAM,CAACO,SAAP,CAAiBK,QAAjB,GAA4B,UAAUX,CAAV,EAAaC,CAAb,EAC5B;AACI,MAAI,KAAKC,MAAL,IAAe,CAAnB,EACA;AACI,WAAO,KAAP;AACH;;AAED,MAAIU,EAAE,GAAI,KAAKZ,CAAL,GAASA,CAAnB;AAAA,MACIa,EAAE,GAAI,KAAKZ,CAAL,GAASA,CADnB;AAAA,MAEIa,EAAE,GAAG,KAAKZ,MAAL,GAAc,KAAKA,MAF5B;AAIAU,EAAAA,EAAE,IAAIA,EAAN;AACAC,EAAAA,EAAE,IAAIA,EAAN;AAEA,SAAQD,EAAE,GAAGC,EAAL,IAAWC,EAAnB;AACH,CAfD;AAiBA;AACA;AACA;AACA;AACA;;;AACAf,MAAM,CAACO,SAAP,CAAiBS,SAAjB,GAA6B,YAC7B;AACI,SAAO,IAAInB,SAAJ,CAAc,KAAKI,CAAL,GAAS,KAAKE,MAA5B,EAAoC,KAAKD,CAAL,GAAS,KAAKC,MAAlD,EAA0D,KAAKA,MAAL,GAAc,CAAxE,EAA2E,KAAKA,MAAL,GAAc,CAAzF,CAAP;AACH,CAHD","sourcesContent":["var Rectangle = require('./Rectangle'),\n    CONST = require('../../const');\n\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the center of this circle\n * @param y {number} The Y coordinate of the center of this circle\n * @param radius {number} The radius of the circle\n */\nfunction Circle(x, y, radius)\n{\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.radius = radius || 0;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     */\n    this.type = CONST.SHAPES.CIRC;\n}\n\nCircle.prototype.constructor = Circle;\nmodule.exports = Circle;\n\n/**\n * Creates a clone of this Circle instance\n *\n * @return {Circle} a copy of the Circle\n */\nCircle.prototype.clone = function ()\n{\n    return new Circle(this.x, this.y, this.radius);\n};\n\n/**\n * Checks whether the x and y coordinates given are contained within this circle\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this Circle\n */\nCircle.prototype.contains = function (x, y)\n{\n    if (this.radius <= 0)\n    {\n        return false;\n    }\n\n    var dx = (this.x - x),\n        dy = (this.y - y),\n        r2 = this.radius * this.radius;\n\n    dx *= dx;\n    dy *= dy;\n\n    return (dx + dy <= r2);\n};\n\n/**\n* Returns the framing rectangle of the circle as a Rectangle object\n*\n* @return {Rectangle} the framing rectangle\n*/\nCircle.prototype.getBounds = function ()\n{\n    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n};\n"]},"metadata":{},"sourceType":"script"}