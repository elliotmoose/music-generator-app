{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nexport var Distortion = /*#__PURE__*/function (_Effect) {\n  _inherits(Distortion, _Effect);\n\n  var _super = _createSuper(Distortion);\n\n  function Distortion() {\n    var _this;\n\n    _classCallCheck(this, Distortion);\n\n    _this = _super.call(this, optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n    _this.name = \"Distortion\";\n    var options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._distortion = options.distortion;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.distortion = options.distortion;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  _createClass(Distortion, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Distortion.prototype), \"dispose\", this).call(this);\n\n      this._shaper.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"distortion\",\n\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    get: function get() {\n      return this._distortion;\n    },\n    set: function set(amount) {\n      this._distortion = amount;\n      var k = amount * 100;\n      var deg = Math.PI / 180;\n\n      this._shaper.setMap(function (x) {\n        if (Math.abs(x) < 0.001) {\n          // should output 0 when input is 0\n          return 0;\n        } else {\n          return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        distortion: 0.4,\n        oversample: \"none\"\n      });\n    }\n  }]);\n\n  return Distortion;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/Distortion.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,UAAT,QAA2B,sBAA3B;AACA,SAAS,MAAT,QAAsC,UAAtC;AAOA;;;;;;;;;AASG;;AACH,WAAa,UAAb;AAAA;;AAAA;;AAmBC,wBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAA1B;AAnBQ,UAAA,IAAA,GAAe,YAAf;AAoBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAApC;AAEA,UAAK,OAAL,GAAe,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,MAAK,OADe;AAE7B,MAAA,MAAM,EAAE;AAFqB,KAAf,CAAf;AAKA,UAAK,WAAL,GAAmB,OAAO,CAAC,UAA3B;;AAEA,UAAK,aAAL,CAAmB,MAAK,OAAxB;;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AAdD;AAeC;;AAlCF;AAAA;AAAA,8BAyEQ;AACN;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,aAAO,IAAP;AACA;AA7EF;AAAA;;AA2CC;;AAEG;AA7CJ,wBA8Ce;AACb,aAAO,KAAK,WAAZ;AACA,KAhDF;AAAA,sBAiDgB,MAjDhB,EAiDsB;AACpB,WAAK,WAAL,GAAmB,MAAnB;AACA,UAAM,CAAC,GAAG,MAAM,GAAG,GAAnB;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,EAAL,GAAU,GAAtB;;AACA,WAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,CAAD,EAAM;AACzB,YAAI,IAAI,CAAC,GAAL,CAAS,CAAT,IAAc,KAAlB,EAAyB;AACxB;AACA,iBAAO,CAAP;AACA,SAHD,MAGO;AACN,iBAAO,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,EAAd,GAAmB,GAAnB,IAA0B,IAAI,CAAC,EAAL,GAAU,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAxC,CAAP;AACA;AACD,OAPD;AAQA;AAED;;AAEG;;AAjEJ;AAAA;AAAA,wBAkEe;AACb,aAAO,KAAK,OAAL,CAAa,UAApB;AACA,KApEF;AAAA,sBAqEgB,YArEhB,EAqE4B;AAC1B,WAAK,OAAL,CAAa,UAAb,GAA0B,YAA1B;AACA;AAvEF;AAAA;AAAA,kCAoCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,UAAU,EAAE,GAD8B;AAE1C,QAAA,UAAU,EAAE;AAF8B,OAApC,CAAP;AAIA;AAzCF;;AAAA;AAAA,EAAgC,MAAhC","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect {\n    constructor() {\n        super(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n        this.name = \"Distortion\";\n        const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n        this._shaper = new WaveShaper({\n            context: this.context,\n            length: 4096,\n        });\n        this._distortion = options.distortion;\n        this.connectEffect(this._shaper);\n        this.distortion = options.distortion;\n        this.oversample = options.oversample;\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            distortion: 0.4,\n            oversample: \"none\",\n        });\n    }\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    get distortion() {\n        return this._distortion;\n    }\n    set distortion(amount) {\n        this._distortion = amount;\n        const k = amount * 100;\n        const deg = Math.PI / 180;\n        this._shaper.setMap((x) => {\n            if (Math.abs(x) < 0.001) {\n                // should output 0 when input is 0\n                return 0;\n            }\n            else {\n                return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n            }\n        });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        this._shaper.oversample = oversampling;\n    }\n    dispose() {\n        super.dispose();\n        this._shaper.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Distortion.js.map"]},"metadata":{},"sourceType":"module"}