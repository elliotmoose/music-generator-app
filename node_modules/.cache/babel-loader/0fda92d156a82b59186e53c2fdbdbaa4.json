{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createBiquadFilterNodeRendererFactory = function createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeBiquadFilterNodes = new WeakMap();\n\n    var createBiquadFilterNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeBiquadFilterNode, nativeBiquadFilterNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeBiquadFilterNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n                if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                  options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                  };\n                  nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n                if (nativeBiquadFilterNodeIsOwnedByContext) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n\n              case 9:\n                _context.next = 11;\n                return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n\n              case 11:\n                _context.next = 13;\n                return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n\n              case 13:\n                _context.next = 23;\n                break;\n\n              case 15:\n                _context.next = 17;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n\n              case 17:\n                _context.next = 19;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n\n              case 19:\n                _context.next = 21;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n\n              case 21:\n                _context.next = 23;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n\n              case 23:\n                _context.next = 25;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n\n              case 25:\n                return _context.abrupt(\"return\", nativeBiquadFilterNode);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createBiquadFilterNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/biquad-filter-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,qCAAqC,GAA4C,SAAjF,qCAAiF,CAC1F,iBAD0F,EAE1F,4BAF0F,EAG1F,kBAH0F,EAI1F,gBAJ0F,EAK1F,uBAL0F,EAM1F;AACA,SAAO,YAAmE;AACtE,QAAM,+BAA+B,GAAG,IAAI,OAAJ,EAAxC;;AAEA,QAAM,sBAAsB;AAAA,0EAAG,iBAC3B,KAD2B,EAE3B,yBAF2B,EAG3B,KAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKvB,gBAAA,sBALuB,GAKE,kBAAkB,CAA6B,KAA7B,CALpB;AAO3B;;;AAGG;;AACG,gBAAA,sCAXqB,GAWoB,gBAAgB,CAAC,sBAAD,EAAyB,yBAAzB,CAXpC;;AAa3B,oBAAI,CAAC,sCAAL,EAA6C;AACnC,kBAAA,OADmC,GACzB;AACZ,oBAAA,CAAC,EAAE,sBAAsB,CAAC,CAAvB,CAAyB,KADhB;AAEZ,oBAAA,YAAY,EAAE,sBAAsB,CAAC,YAFzB;AAGZ,oBAAA,gBAAgB,EAAE,sBAAsB,CAAC,gBAH7B;AAIZ,oBAAA,qBAAqB,EAAE,sBAAsB,CAAC,qBAJlC;AAKZ,oBAAA,MAAM,EAAE,sBAAsB,CAAC,MAAvB,CAA8B,KAL1B;AAMZ,oBAAA,SAAS,EAAE,sBAAsB,CAAC,SAAvB,CAAiC,KANhC;AAOZ,oBAAA,IAAI,EAAE,sBAAsB,CAAC,IAAvB,CAA4B,KAPtB;AAQZ,oBAAA,IAAI,EAAE,sBAAsB,CAAC;AARjB,mBADyB;AAYzC,kBAAA,sBAAsB,GAAG,4BAA4B,CAAC,yBAAD,EAA4B,OAA5B,CAArD;AACH;;AAED,gBAAA,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,EAA+D,sBAA/D;;AA5B2B,oBA8BtB,sCA9BsB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA+BjB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,CAAlC,EAAqC,sBAAsB,CAAC,CAA5D,EAA+D,KAA/D,CA/BC;;AAAA;AAAA;AAAA,uBAgCjB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,MAAlC,EAA0C,sBAAsB,CAAC,MAAjE,EAAyE,KAAzE,CAhCC;;AAAA;AAAA;AAAA,uBAiCjB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,sBAAsB,CAAC,SAApE,EAA+E,KAA/E,CAjCC;;AAAA;AAAA;AAAA,uBAkCjB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,IAAlC,EAAwC,sBAAsB,CAAC,IAA/D,EAAqE,KAArE,CAlCC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAoCjB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,CAAlC,EAAqC,sBAAsB,CAAC,CAA5D,EAA+D,KAA/D,CApCA;;AAAA;AAAA;AAAA,uBAqCjB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,MAAlC,EAA0C,sBAAsB,CAAC,MAAjE,EAAyE,KAAzE,CArCA;;AAAA;AAAA;AAAA,uBAsCjB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,sBAAsB,CAAC,SAApE,EAA+E,KAA/E,CAtCA;;AAAA;AAAA;AAAA,uBAuCjB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,IAAlC,EAAwC,sBAAsB,CAAC,IAA/D,EAAqE,KAArE,CAvCA;;AAAA;AAAA;AAAA,uBA0CrB,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,sBAAnC,EAA2D,KAA3D,CA1CF;;AAAA;AAAA,iDA4CpB,sBA5CoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAtB,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AA+CA,WAAO;AACH,MAAA,MADG,kBAEC,KAFD,EAGC,yBAHD,EAIC,KAJD,EAIgC;AAE/B,YAAM,8BAA8B,GAAG,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,CAAvC;;AAEA,YAAI,8BAA8B,KAAK,SAAvC,EAAkD;AAC9C,iBAAO,OAAO,CAAC,OAAR,CAAgB,8BAAhB,CAAP;AACH;;AAED,eAAO,sBAAsB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAA7B;AACH;AAbE,KAAP;AAeH,GAjED;AAkEH,CAzEM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}