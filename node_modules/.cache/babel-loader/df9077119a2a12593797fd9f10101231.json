{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAnalyserNodeRendererFactory = function createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAnalyserNodes = new WeakMap();\n\n    var createAnalyserNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeAnalyserNode, nativeAnalyserNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n                if (!nativeAnalyserNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                  };\n                  nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAnalyserNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAnalyserNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/analyser-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,iCAAiC,GAAwC,SAAzE,iCAAyE,CAClF,wBADkF,EAElF,kBAFkF,EAGlF,uBAHkF,EAIlF;AACA,SAAO,YAAmE;AACtE,QAAM,2BAA2B,GAAG,IAAI,OAAJ,EAApC;;AAEA,QAAM,kBAAkB;AAAA,0EAAG,iBACvB,KADuB,EAEvB,yBAFuB,EAGvB,KAHuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKnB,gBAAA,kBALmB,GAKE,kBAAkB,CAAyB,KAAzB,CALpB,EAOvB;;AACM,gBAAA,kCARiB,GAQoB,gBAAgB,CAAC,kBAAD,EAAqB,yBAArB,CARpC;;AAUvB,oBAAI,CAAC,kCAAL,EAAyC;AAC/B,kBAAA,OAD+B,GACrB;AACZ,oBAAA,YAAY,EAAE,kBAAkB,CAAC,YADrB;AAEZ,oBAAA,gBAAgB,EAAE,kBAAkB,CAAC,gBAFzB;AAGZ,oBAAA,qBAAqB,EAAE,kBAAkB,CAAC,qBAH9B;AAIZ,oBAAA,OAAO,EAAE,kBAAkB,CAAC,OAJhB;AAKZ,oBAAA,WAAW,EAAE,kBAAkB,CAAC,WALpB;AAMZ,oBAAA,WAAW,EAAE,kBAAkB,CAAC,WANpB;AAOZ,oBAAA,qBAAqB,EAAE,kBAAkB,CAAC;AAP9B,mBADqB;AAWrC,kBAAA,kBAAkB,GAAG,wBAAwB,CAAC,yBAAD,EAA4B,OAA5B,CAA7C;AACH;;AAED,gBAAA,2BAA2B,CAAC,GAA5B,CAAgC,yBAAhC,EAA2D,kBAA3D;AAxBuB;AAAA,uBA0BjB,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,kBAAnC,EAAuD,KAAvD,CA1BN;;AAAA;AAAA,iDA4BhB,kBA5BgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAlB,kBAAkB;AAAA;AAAA;AAAA,OAAxB;;AA+BA,WAAO;AACH,MAAA,MADG,kBAEC,KAFD,EAGC,yBAHD,EAIC,KAJD,EAIgC;AAE/B,YAAM,0BAA0B,GAAG,2BAA2B,CAAC,GAA5B,CAAgC,yBAAhC,CAAnC;;AAEA,YAAI,0BAA0B,KAAK,SAAnC,EAA8C;AAC1C,iBAAO,OAAO,CAAC,OAAR,CAAgB,0BAAhB,CAAP;AACH;;AAED,eAAO,kBAAkB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,KAAnC,CAAzB;AACH;AAbE,KAAP;AAeH,GAjDD;AAkDH,CAvDM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=analyser-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}