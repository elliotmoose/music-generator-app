{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\n\nexport var Solo = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Solo, _ToneAudioNode);\n\n  var _super = _createSuper(Solo);\n\n  function Solo() {\n    var _this;\n\n    _classCallCheck(this, Solo);\n\n    _this = _super.call(this, optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n    _this.name = \"Solo\";\n    var options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context\n    });\n\n    if (!Solo._allSolos.has(_this.context)) {\n      Solo._allSolos.set(_this.context, new Set());\n    }\n\n    Solo._allSolos.get(_this.context).add(_assertThisInitialized(_this)); // set initially\n\n\n    _this.solo = options.solo;\n    return _this;\n  }\n\n  _createClass(Solo, [{\n    key: \"_addSolo\",\n\n    /**\n     * Add this to the soloed array\n     */\n    value: function _addSolo() {\n      if (!Solo._soloed.has(this.context)) {\n        Solo._soloed.set(this.context, new Set());\n      }\n\n      Solo._soloed.get(this.context).add(this);\n    }\n    /**\n     * Remove this from the soloed array\n     */\n\n  }, {\n    key: \"_removeSolo\",\n    value: function _removeSolo() {\n      if (Solo._soloed.has(this.context)) {\n        Solo._soloed.get(this.context).delete(this);\n      }\n    }\n    /**\n     * Is this on the soloed array\n     */\n\n  }, {\n    key: \"_isSoloed\",\n    value: function _isSoloed() {\n      return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n    }\n    /**\n     * Returns true if no one is soloed\n     */\n\n  }, {\n    key: \"_noSolos\",\n    value: function _noSolos() {\n      // either does not have any soloed added\n      return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items\n      Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n    }\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n\n  }, {\n    key: \"_updateSolo\",\n    value: function _updateSolo() {\n      if (this._isSoloed()) {\n        this.input.gain.value = 1;\n      } else if (this._noSolos()) {\n        // no one is soloed\n        this.input.gain.value = 1;\n      } else {\n        this.input.gain.value = 0;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Solo.prototype), \"dispose\", this).call(this);\n\n      Solo._allSolos.get(this.context).delete(this);\n\n      this._removeSolo();\n\n      return this;\n    }\n  }, {\n    key: \"solo\",\n\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    get: function get() {\n      return this._isSoloed();\n    },\n    set: function set(solo) {\n      if (solo) {\n        this._addSolo();\n      } else {\n        this._removeSolo();\n      }\n\n      Solo._allSolos.get(this.context).forEach(function (instance) {\n        return instance._updateSolo();\n      });\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this.input.gain.value === 0;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        solo: false\n      });\n    }\n  }]);\n\n  return Solo;\n}(ToneAudioNode);\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\n\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\n\nSolo._soloed = new Map();","map":{"version":3,"sources":["../../../../Tone/component/channel/Solo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n        this.name = \"Solo\";\n        const options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n        this.input = this.output = new Gain({\n            context: this.context,\n        });\n        if (!Solo._allSolos.has(this.context)) {\n            Solo._allSolos.set(this.context, new Set());\n        }\n        Solo._allSolos.get(this.context).add(this);\n        // set initially\n        this.solo = options.solo;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            solo: false,\n        });\n    }\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    get solo() {\n        return this._isSoloed();\n    }\n    set solo(solo) {\n        if (solo) {\n            this._addSolo();\n        }\n        else {\n            this._removeSolo();\n        }\n        Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n    get muted() {\n        return this.input.gain.value === 0;\n    }\n    /**\n     * Add this to the soloed array\n     */\n    _addSolo() {\n        if (!Solo._soloed.has(this.context)) {\n            Solo._soloed.set(this.context, new Set());\n        }\n        Solo._soloed.get(this.context).add(this);\n    }\n    /**\n     * Remove this from the soloed array\n     */\n    _removeSolo() {\n        if (Solo._soloed.has(this.context)) {\n            Solo._soloed.get(this.context).delete(this);\n        }\n    }\n    /**\n     * Is this on the soloed array\n     */\n    _isSoloed() {\n        return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n    }\n    /**\n     * Returns true if no one is soloed\n     */\n    _noSolos() {\n        // either does not have any soloed added\n        return !Solo._soloed.has(this.context) ||\n            // or has a solo set but doesn't include any items\n            (Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0);\n    }\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n    _updateSolo() {\n        if (this._isSoloed()) {\n            this.input.gain.value = 1;\n        }\n        else if (this._noSolos()) {\n            // no one is soloed\n            this.input.gain.value = 1;\n        }\n        else {\n            this.input.gain.value = 0;\n        }\n    }\n    dispose() {\n        super.dispose();\n        Solo._allSolos.get(this.context).delete(this);\n        this._removeSolo();\n        return this;\n    }\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\nSolo._soloed = new Map();\n//# sourceMappingURL=Solo.js.map"]},"metadata":{},"sourceType":"module"}