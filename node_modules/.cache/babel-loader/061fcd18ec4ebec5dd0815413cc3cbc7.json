{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BinarySearch_1 = require(\"./BinarySearch\");\n\nvar ControlChange_1 = require(\"./ControlChange\");\n\nvar ControlChanges_1 = require(\"./ControlChanges\");\n\nvar PitchBend_1 = require(\"./PitchBend\");\n\nvar Instrument_1 = require(\"./Instrument\");\n\nvar Note_1 = require(\"./Note\");\n\nvar privateHeaderMap = new WeakMap();\n/**\n * A Track is a collection of notes and controlChanges\n */\n\nvar Track =\n/** @class */\nfunction () {\n  function Track(trackData, header) {\n    var _this = this;\n    /**\n     * The name of the track\n     */\n\n\n    this.name = \"\";\n    /**\n     * The track's note events\n     */\n\n    this.notes = [];\n    /**\n     * The control change events\n     */\n\n    this.controlChanges = ControlChanges_1.createControlChanges();\n    /**\n     * The pitch bend events\n     */\n\n    this.pitchBends = [];\n    privateHeaderMap.set(this, header);\n\n    if (trackData) {\n      var nameEvent = trackData.find(function (e) {\n        return e.type === \"trackName\";\n      });\n      this.name = nameEvent ? nameEvent.text : \"\";\n    }\n\n    this.instrument = new Instrument_1.Instrument(trackData, this); // defaults to 0\n\n    this.channel = 0;\n\n    if (trackData) {\n      var noteOns = trackData.filter(function (event) {\n        return event.type === \"noteOn\";\n      });\n      var noteOffs = trackData.filter(function (event) {\n        return event.type === \"noteOff\";\n      });\n\n      var _loop_1 = function _loop_1() {\n        var currentNote = noteOns.shift(); // set the channel based on the note\n\n        this_1.channel = currentNote.channel; // find the corresponding note off\n\n        var offIndex = noteOffs.findIndex(function (note) {\n          return note.noteNumber === currentNote.noteNumber && note.absoluteTime >= currentNote.absoluteTime;\n        });\n\n        if (offIndex !== -1) {\n          // once it's got the note off, add it\n          var noteOff = noteOffs.splice(offIndex, 1)[0];\n          this_1.addNote({\n            durationTicks: noteOff.absoluteTime - currentNote.absoluteTime,\n            midi: currentNote.noteNumber,\n            noteOffVelocity: noteOff.velocity / 127,\n            ticks: currentNote.absoluteTime,\n            velocity: currentNote.velocity / 127\n          });\n        }\n      };\n\n      var this_1 = this;\n\n      while (noteOns.length) {\n        _loop_1();\n      }\n\n      var controlChanges = trackData.filter(function (event) {\n        return event.type === \"controller\";\n      });\n      controlChanges.forEach(function (event) {\n        _this.addCC({\n          number: event.controllerType,\n          ticks: event.absoluteTime,\n          value: event.value / 127\n        });\n      });\n      var pitchBends = trackData.filter(function (event) {\n        return event.type === \"pitchBend\";\n      });\n      pitchBends.forEach(function (event) {\n        _this.addPitchBend({\n          ticks: event.absoluteTime,\n          // scale the value between -2^13 to 2^13 to -2 to 2\n          value: event.value / Math.pow(2, 13)\n        });\n      }); // const endOfTrack = trackData.find(event => event.type === \"endOfTrack\");\n    }\n  }\n  /**\n   * Add a note to the notes array\n   * @param props The note properties to add\n   */\n\n\n  Track.prototype.addNote = function (props) {\n    var header = privateHeaderMap.get(this);\n    var note = new Note_1.Note({\n      midi: 0,\n      ticks: 0,\n      velocity: 1\n    }, {\n      ticks: 0,\n      velocity: 0\n    }, header);\n    Object.assign(note, props);\n    BinarySearch_1.insert(this.notes, note, \"ticks\");\n    return this;\n  };\n  /**\n   * Add a control change to the track\n   * @param props\n   */\n\n\n  Track.prototype.addCC = function (props) {\n    var header = privateHeaderMap.get(this);\n    var cc = new ControlChange_1.ControlChange({\n      controllerType: props.number\n    }, header);\n    delete props.number;\n    Object.assign(cc, props);\n\n    if (!Array.isArray(this.controlChanges[cc.number])) {\n      this.controlChanges[cc.number] = [];\n    }\n\n    BinarySearch_1.insert(this.controlChanges[cc.number], cc, \"ticks\");\n    return this;\n  };\n  /**\n   * Add a control change to the track\n   */\n\n\n  Track.prototype.addPitchBend = function (props) {\n    var header = privateHeaderMap.get(this);\n    var pb = new PitchBend_1.PitchBend({}, header);\n    Object.assign(pb, props);\n    BinarySearch_1.insert(this.pitchBends, pb, \"ticks\");\n    return this;\n  };\n\n  Object.defineProperty(Track.prototype, \"duration\", {\n    /**\n     * The end time of the last event in the track\n     */\n    get: function get() {\n      if (!this.notes.length) {\n        return 0;\n      }\n\n      var maxDuration = this.notes[this.notes.length - 1].time + this.notes[this.notes.length - 1].duration;\n\n      for (var i = 0; i < this.notes.length - 1; i++) {\n        var duration = this.notes[i].time + this.notes[i].duration;\n\n        if (maxDuration < duration) {\n          maxDuration = duration;\n        }\n      }\n\n      return maxDuration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Track.prototype, \"durationTicks\", {\n    /**\n     * The end time of the last event in the track in ticks\n     */\n    get: function get() {\n      if (!this.notes.length) {\n        return 0;\n      }\n\n      var maxDuration = this.notes[this.notes.length - 1].ticks + this.notes[this.notes.length - 1].durationTicks;\n\n      for (var i = 0; i < this.notes.length - 1; i++) {\n        var duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\n        if (maxDuration < duration) {\n          maxDuration = duration;\n        }\n      }\n\n      return maxDuration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Assign the json values to this track\n   */\n\n  Track.prototype.fromJSON = function (json) {\n    var _this = this;\n\n    this.name = json.name;\n    this.channel = json.channel;\n    this.instrument = new Instrument_1.Instrument(undefined, this);\n    this.instrument.fromJSON(json.instrument);\n\n    for (var number in json.controlChanges) {\n      if (json.controlChanges[number]) {\n        json.controlChanges[number].forEach(function (cc) {\n          _this.addCC({\n            number: cc.number,\n            ticks: cc.ticks,\n            value: cc.value\n          });\n        });\n      }\n    }\n\n    json.notes.forEach(function (n) {\n      _this.addNote({\n        durationTicks: n.durationTicks,\n        midi: n.midi,\n        ticks: n.ticks,\n        velocity: n.velocity\n      });\n    });\n  };\n  /**\n   * Convert the track into a JSON format\n   */\n\n\n  Track.prototype.toJSON = function () {\n    // convert all the CCs to JSON\n    var controlChanges = {};\n\n    for (var i = 0; i < 127; i++) {\n      if (this.controlChanges.hasOwnProperty(i)) {\n        controlChanges[i] = this.controlChanges[i].map(function (c) {\n          return c.toJSON();\n        });\n      }\n    }\n\n    return {\n      channel: this.channel,\n      controlChanges: controlChanges,\n      pitchBends: this.pitchBends.map(function (pb) {\n        return pb.toJSON();\n      }),\n      instrument: this.instrument.toJSON(),\n      name: this.name,\n      notes: this.notes.map(function (n) {\n        return n.toJSON();\n      })\n    };\n  };\n\n  return Track;\n}();\n\nexports.Track = Track;","map":{"version":3,"sources":["../src/Track.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BinarySearch_1 = require(\"./BinarySearch\");\nvar ControlChange_1 = require(\"./ControlChange\");\nvar ControlChanges_1 = require(\"./ControlChanges\");\nvar PitchBend_1 = require(\"./PitchBend\");\nvar Instrument_1 = require(\"./Instrument\");\nvar Note_1 = require(\"./Note\");\nvar privateHeaderMap = new WeakMap();\n/**\n * A Track is a collection of notes and controlChanges\n */\nvar Track = /** @class */ (function () {\n    function Track(trackData, header) {\n        var _this = this;\n        /**\n         * The name of the track\n         */\n        this.name = \"\";\n        /**\n         * The track's note events\n         */\n        this.notes = [];\n        /**\n         * The control change events\n         */\n        this.controlChanges = ControlChanges_1.createControlChanges();\n        /**\n         * The pitch bend events\n         */\n        this.pitchBends = [];\n        privateHeaderMap.set(this, header);\n        if (trackData) {\n            var nameEvent = trackData.find(function (e) { return e.type === \"trackName\"; });\n            this.name = nameEvent ? nameEvent.text : \"\";\n        }\n        this.instrument = new Instrument_1.Instrument(trackData, this);\n        // defaults to 0\n        this.channel = 0;\n        if (trackData) {\n            var noteOns = trackData.filter(function (event) { return event.type === \"noteOn\"; });\n            var noteOffs = trackData.filter(function (event) { return event.type === \"noteOff\"; });\n            var _loop_1 = function () {\n                var currentNote = noteOns.shift();\n                // set the channel based on the note\n                this_1.channel = currentNote.channel;\n                // find the corresponding note off\n                var offIndex = noteOffs.findIndex(function (note) { return note.noteNumber === currentNote.noteNumber && note.absoluteTime >= currentNote.absoluteTime; });\n                if (offIndex !== -1) {\n                    // once it's got the note off, add it\n                    var noteOff = noteOffs.splice(offIndex, 1)[0];\n                    this_1.addNote({\n                        durationTicks: noteOff.absoluteTime - currentNote.absoluteTime,\n                        midi: currentNote.noteNumber,\n                        noteOffVelocity: noteOff.velocity / 127,\n                        ticks: currentNote.absoluteTime,\n                        velocity: currentNote.velocity / 127,\n                    });\n                }\n            };\n            var this_1 = this;\n            while (noteOns.length) {\n                _loop_1();\n            }\n            var controlChanges = trackData.filter(function (event) { return event.type === \"controller\"; });\n            controlChanges.forEach(function (event) {\n                _this.addCC({\n                    number: event.controllerType,\n                    ticks: event.absoluteTime,\n                    value: event.value / 127,\n                });\n            });\n            var pitchBends = trackData.filter(function (event) { return event.type === \"pitchBend\"; });\n            pitchBends.forEach(function (event) {\n                _this.addPitchBend({\n                    ticks: event.absoluteTime,\n                    // scale the value between -2^13 to 2^13 to -2 to 2\n                    value: event.value / Math.pow(2, 13),\n                });\n            });\n            // const endOfTrack = trackData.find(event => event.type === \"endOfTrack\");\n        }\n    }\n    /**\n     * Add a note to the notes array\n     * @param props The note properties to add\n     */\n    Track.prototype.addNote = function (props) {\n        var header = privateHeaderMap.get(this);\n        var note = new Note_1.Note({\n            midi: 0,\n            ticks: 0,\n            velocity: 1,\n        }, {\n            ticks: 0,\n            velocity: 0,\n        }, header);\n        Object.assign(note, props);\n        BinarySearch_1.insert(this.notes, note, \"ticks\");\n        return this;\n    };\n    /**\n     * Add a control change to the track\n     * @param props\n     */\n    Track.prototype.addCC = function (props) {\n        var header = privateHeaderMap.get(this);\n        var cc = new ControlChange_1.ControlChange({\n            controllerType: props.number,\n        }, header);\n        delete props.number;\n        Object.assign(cc, props);\n        if (!Array.isArray(this.controlChanges[cc.number])) {\n            this.controlChanges[cc.number] = [];\n        }\n        BinarySearch_1.insert(this.controlChanges[cc.number], cc, \"ticks\");\n        return this;\n    };\n    /**\n     * Add a control change to the track\n     */\n    Track.prototype.addPitchBend = function (props) {\n        var header = privateHeaderMap.get(this);\n        var pb = new PitchBend_1.PitchBend({}, header);\n        Object.assign(pb, props);\n        BinarySearch_1.insert(this.pitchBends, pb, \"ticks\");\n        return this;\n    };\n    Object.defineProperty(Track.prototype, \"duration\", {\n        /**\n         * The end time of the last event in the track\n         */\n        get: function () {\n            if (!this.notes.length) {\n                return 0;\n            }\n            var maxDuration = this.notes[this.notes.length - 1].time + this.notes[this.notes.length - 1].duration;\n            for (var i = 0; i < this.notes.length - 1; i++) {\n                var duration = this.notes[i].time + this.notes[i].duration;\n                if (maxDuration < duration) {\n                    maxDuration = duration;\n                }\n            }\n            return maxDuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Track.prototype, \"durationTicks\", {\n        /**\n         * The end time of the last event in the track in ticks\n         */\n        get: function () {\n            if (!this.notes.length) {\n                return 0;\n            }\n            var maxDuration = this.notes[this.notes.length - 1].ticks + this.notes[this.notes.length - 1].durationTicks;\n            for (var i = 0; i < this.notes.length - 1; i++) {\n                var duration = this.notes[i].ticks + this.notes[i].durationTicks;\n                if (maxDuration < duration) {\n                    maxDuration = duration;\n                }\n            }\n            return maxDuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Assign the json values to this track\n     */\n    Track.prototype.fromJSON = function (json) {\n        var _this = this;\n        this.name = json.name;\n        this.channel = json.channel;\n        this.instrument = new Instrument_1.Instrument(undefined, this);\n        this.instrument.fromJSON(json.instrument);\n        for (var number in json.controlChanges) {\n            if (json.controlChanges[number]) {\n                json.controlChanges[number].forEach(function (cc) {\n                    _this.addCC({\n                        number: cc.number,\n                        ticks: cc.ticks,\n                        value: cc.value,\n                    });\n                });\n            }\n        }\n        json.notes.forEach(function (n) {\n            _this.addNote({\n                durationTicks: n.durationTicks,\n                midi: n.midi,\n                ticks: n.ticks,\n                velocity: n.velocity,\n            });\n        });\n    };\n    /**\n     * Convert the track into a JSON format\n     */\n    Track.prototype.toJSON = function () {\n        // convert all the CCs to JSON\n        var controlChanges = {};\n        for (var i = 0; i < 127; i++) {\n            if (this.controlChanges.hasOwnProperty(i)) {\n                controlChanges[i] = this.controlChanges[i].map(function (c) { return c.toJSON(); });\n            }\n        }\n        return {\n            channel: this.channel,\n            controlChanges: controlChanges,\n            pitchBends: this.pitchBends.map(function (pb) { return pb.toJSON(); }),\n            instrument: this.instrument.toJSON(),\n            name: this.name,\n            notes: this.notes.map(function (n) { return n.toJSON(); }),\n        };\n    };\n    return Track;\n}());\nexports.Track = Track;\n//# sourceMappingURL=Track.js.map"]},"metadata":{},"sourceType":"script"}