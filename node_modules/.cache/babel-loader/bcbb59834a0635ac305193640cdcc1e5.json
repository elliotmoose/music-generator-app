{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var PWMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PWMOscillator, _Source);\n\n  var _super = _createSuper(PWMOscillator);\n\n  function PWMOscillator() {\n    var _this;\n\n    _classCallCheck(this, PWMOscillator);\n\n    _this = _super.call(this, optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    _this.name = \"PWMOscillator\";\n    _this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    _this._scale = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    var options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    _this._pulse = new PulseOscillator({\n      context: _this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n\n    _this._pulse.carrierType = \"sine\";\n    _this.modulationFrequency = _this._pulse.frequency;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase\n    });\n    _this.frequency = _this._modulator.frequency;\n    _this.detune = _this._modulator.detune; // connections\n\n    _this._modulator.chain(_this._scale, _this._pulse.width);\n\n    _this._pulse.connect(_this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(PWMOscillator, [{\n    key: \"_start\",\n\n    /**\n     * start the oscillator\n     */\n    value: function _start(time) {\n      time = this.toSeconds(time);\n\n      this._modulator.start(time);\n\n      this._pulse.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._modulator.stop(time);\n\n      this._pulse.stop(time);\n    }\n    /**\n     * restart the oscillator\n     */\n\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n\n      this._pulse.restart(time);\n    }\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PWMOscillator.prototype), \"dispose\", this).call(this);\n\n      this._pulse.dispose();\n\n      this._scale.dispose();\n\n      this._modulator.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._modulator.phase;\n    },\n    set: function set(phase) {\n      this._modulator.phase = phase;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        modulationFrequency: 0.4,\n        phase: 0,\n        type: \"pwm\"\n      });\n    }\n  }]);\n\n  return PWMOscillator;\n}(Source);","map":{"version":3,"sources":["../../../../Tone/source/oscillator/PWMOscillator.ts"],"names":[],"mappings":";;;;;;;;;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,QAAyB,2BAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AAEA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,gBAAT,QAAgF,uBAAhF;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAIA;;;;;;;;;;AAUG;;AACH,WAAa,aAAb;AAAA;;AAAA;;AAiDC,2BAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,qBAAd,CAAzC,CAA1B;AAhDQ,UAAA,IAAA,GAAe,eAAf;AAEA,UAAA,UAAA,GAAa,KAAb;AAWT;;;AAGG;;AACK,UAAA,MAAA,GAAmB,IAAI,QAAJ,CAAa;AACvC,MAAA,OAAO,EAAE,MAAK,OADyB;AAEvC,MAAA,KAAK,EAAE;AAFgC,KAAb,CAAnB;AAgCP,QAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,qBAAd,CAAzC,CAApC;AAEA,UAAK,MAAL,GAAc,IAAI,eAAJ,CAAoB;AACjC,MAAA,OAAO,EAAE,MAAK,OADmB;AAEjC,MAAA,SAAS,EAAE,OAAO,CAAC;AAFc,KAApB,CAAd,CAJD,CAQC;;AACA,UAAK,MAAL,CAAY,WAAZ,GAA0B,MAA1B;AAEA,UAAK,mBAAL,GAA2B,MAAK,MAAL,CAAY,SAAvC;AAEA,UAAK,UAAL,GAAkB,IAAI,UAAJ,CAAe;AAChC,MAAA,OAAO,EAAE,MAAK,OADkB;AAEhC,MAAA,MAAM,EAAE,OAAO,CAAC,MAFgB;AAGhC,MAAA,SAAS,EAAE,OAAO,CAAC,SAHa;AAIhC,MAAA,MAAM,EAAE;AAAA,eAAM,MAAK,MAAL,+BAAN;AAAA,OAJwB;AAKhC,MAAA,KAAK,EAAE,OAAO,CAAC;AALiB,KAAf,CAAlB;AAQA,UAAK,SAAL,GAAiB,MAAK,UAAL,CAAgB,SAAjC;AACA,UAAK,MAAL,GAAc,MAAK,UAAL,CAAgB,MAA9B,CAtBD,CAwBC;;AACA,UAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAK,MAA3B,EAAmC,MAAK,MAAL,CAAY,KAA/C;;AACA,UAAK,MAAL,CAAY,OAAZ,CAAoB,MAAK,MAAzB;;AACA,IAAA,QAAQ,gCAAO,CAAC,qBAAD,EAAwB,WAAxB,EAAqC,QAArC,CAAP,CAAR;AA3BD;AA4BC;;AA7EF;AAAA;;AAwFC;;AAEG;AA1FJ,2BA2FkB,IA3FlB,EA2F4B;AAC1B,MAAA,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,CAAP;;AACA,WAAK,UAAL,CAAgB,KAAhB,CAAsB,IAAtB;;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;AACA;AAED;;AAEG;;AAnGJ;AAAA;AAAA,0BAoGiB,IApGjB,EAoG2B;AACzB,MAAA,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,CAAP;;AACA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA;AAED;;AAEG;;AA5GJ;AAAA;AAAA,6BA6GoB,IA7GpB,EA6GiC;AAC/B,WAAK,UAAL,CAAgB,OAAhB,CAAwB,IAAxB;;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB;AACA;AAED;;AAEG;;AApHJ;AAAA;AAAA,8BAwJ4B;AAAA,UAAb,MAAa,uEAAJ,IAAI;;;;;;iDACnB,gBAAgB,CAAC,IAAD,EAAO,MAAP,C;;;;;;;;;AACvB;AAED;;AAEG;;AA9JJ;AAAA;AAAA,8BA+JQ;AACN;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,aAAO,IAAP;AACA;AArKF;AAAA;AAAA,wBAqHS;AACP,aAAO,KAAP;AACA;AAED;;AAEG;;AA3HJ;AAAA;AAAA,wBA4Ha;AACX,aAAO,KAAP;AACA;AAED;;AAEG;;AAlIJ;AAAA;AAAA,wBAmIa;AACX,aAAO,EAAP;AACA;AAED;;AAEG;;AAzIJ;AAAA;AAAA,wBA0IiB;AACf,aAAO,CAAP;AACA;AAED;;AAEG;;AAhJJ;AAAA;AAAA,wBAiJU;AACR,aAAO,KAAK,UAAL,CAAgB,KAAvB;AACA,KAnJF;AAAA,sBAoJW,KApJX,EAoJyB;AACvB,WAAK,UAAL,CAAgB,KAAhB,GAAwB,KAAxB;AACA;AAtJF;AAAA;AAAA,kCA+EmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,MAAM,EAAE,CADkC;AAE1C,QAAA,SAAS,EAAE,GAF+B;AAG1C,QAAA,mBAAmB,EAAE,GAHqB;AAI1C,QAAA,KAAK,EAAE,CAJmC;AAK1C,QAAA,IAAI,EAAE;AALoC,OAApC,CAAP;AAOA;AAvFF;;AAAA;AAAA,EAAmC,MAAnC","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source {\n    constructor() {\n        super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n        this.name = \"PWMOscillator\";\n        this.sourceType = \"pwm\";\n        /**\n         * Scale the oscillator so it doesn't go silent\n         * at the extreme values.\n         */\n        this._scale = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n        this._pulse = new PulseOscillator({\n            context: this.context,\n            frequency: options.modulationFrequency,\n        });\n        // change the pulse oscillator type\n        this._pulse.carrierType = \"sine\";\n        this.modulationFrequency = this._pulse.frequency;\n        this._modulator = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n        });\n        this.frequency = this._modulator.frequency;\n        this.detune = this._modulator.detune;\n        // connections\n        this._modulator.chain(this._scale, this._pulse.width);\n        this._pulse.connect(this.output);\n        readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            modulationFrequency: 0.4,\n            phase: 0,\n            type: \"pwm\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._modulator.start(time);\n        this._pulse.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._modulator.stop(time);\n        this._pulse.stop(time);\n    }\n    /**\n     * restart the oscillator\n     */\n    _restart(time) {\n        this._modulator.restart(time);\n        this._pulse.restart(time);\n    }\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n    get type() {\n        return \"pwm\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n    get baseType() {\n        return \"pwm\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n    get partials() {\n        return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n    get partialCount() {\n        return 0;\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n    get phase() {\n        return this._modulator.phase;\n    }\n    set phase(phase) {\n        this._modulator.phase = phase;\n    }\n    asArray(length = 1024) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._pulse.dispose();\n        this._scale.dispose();\n        this._modulator.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PWMOscillator.js.map"]},"metadata":{},"sourceType":"module"}