{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport var PluckSynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(PluckSynth, _Instrument);\n\n  var _super = _createSuper(PluckSynth);\n\n  function PluckSynth() {\n    var _this;\n\n    _classCallCheck(this, PluckSynth);\n\n    _this = _super.call(this, optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    _this.name = \"PluckSynth\";\n    var options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    _this._noise = new Noise({\n      context: _this.context,\n      type: \"pink\"\n    });\n    _this.attackNoise = options.attackNoise;\n    _this._lfcf = new LowpassCombFilter({\n      context: _this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    _this.resonance = options.resonance;\n    _this.release = options.release;\n\n    _this._noise.connect(_this._lfcf);\n\n    _this._lfcf.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(PluckSynth, [{\n    key: \"triggerAttack\",\n    value: function triggerAttack(note, time) {\n      var freq = this.toFrequency(note);\n      time = this.toSeconds(time);\n      var delayAmount = 1 / freq;\n\n      this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n      this._noise.start(time);\n\n      this._noise.stop(time + delayAmount * this.attackNoise);\n\n      this._lfcf.resonance.cancelScheduledValues(time);\n\n      this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n      return this;\n    }\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PluckSynth.prototype), \"dispose\", this).call(this);\n\n      this._noise.dispose();\n\n      this._lfcf.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"dampening\",\n\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    get: function get() {\n      return this._lfcf.dampening;\n    },\n    set: function set(fq) {\n      this._lfcf.dampening = fq;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Instrument.getDefaults(), {\n        attackNoise: 1,\n        dampening: 4000,\n        resonance: 0.7,\n        release: 1\n      });\n    }\n  }]);\n\n  return PluckSynth;\n}(Instrument);","map":{"version":3,"sources":["../../../Tone/instrument/PluckSynth.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,iBAAT,QAAkC,uCAAlC;AACA,SAAS,SAAT,QAA0B,uBAA1B;AACA,SAAS,oBAAT,QAAqC,uBAArC;AAEA,SAAS,KAAT,QAAsB,iBAAtB;AACA,SAAS,UAAT,QAA8C,cAA9C;AASA;;;;;;;;;AASG;;AACH,WAAa,UAAb;AAAA;;AAAA;;AA6BC,wBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAA1B;AA7BQ,UAAA,IAAA,GAAO,YAAP;AA8BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,CAApC;AAEA,UAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AACvB,MAAA,OAAO,EAAE,MAAK,OADS;AAEvB,MAAA,IAAI,EAAE;AAFiB,KAAV,CAAd;AAKA,UAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AAEA,UAAK,KAAL,GAAa,IAAI,iBAAJ,CAAsB;AAClC,MAAA,OAAO,EAAE,MAAK,OADoB;AAElC,MAAA,SAAS,EAAE,OAAO,CAAC,SAFe;AAGlC,MAAA,SAAS,EAAE,OAAO,CAAC;AAHe,KAAtB,CAAb;AAMA,UAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;AACA,UAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;;AAEA,UAAK,MAAL,CAAY,OAAZ,CAAoB,MAAK,KAAzB;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,MAAxB;;AAtBD;AAuBC;;AApDF;AAAA;AAAA,kCA2Ee,IA3Ef,EA2EgC,IA3EhC,EA2E2C;AACzC,UAAM,IAAI,GAAG,KAAK,WAAL,CAAiB,IAAjB,CAAb;AACA,MAAA,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,CAAP;AACA,UAAM,WAAW,GAAG,IAAI,IAAxB;;AACA,WAAK,KAAL,CAAW,SAAX,CAAqB,cAArB,CAAoC,WAApC,EAAiD,IAAjD;;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,GAAG,WAAW,GAAG,KAAK,WAA3C;;AACA,WAAK,KAAL,CAAW,SAAX,CAAqB,qBAArB,CAA2C,IAA3C;;AACA,WAAK,KAAL,CAAW,SAAX,CAAqB,cAArB,CAAoC,KAAK,SAAzC,EAAoD,IAApD;;AACA,aAAO,IAAP;AACA;AAED;;AAEG;;AAzFJ;AAAA;AAAA,mCA0FgB,IA1FhB,EA0F2B;AACzB,WAAK,KAAL,CAAW,SAAX,CAAqB,YAArB,CAAkC,CAAlC,EAAqC,KAAK,OAA1C,EAAmD,IAAnD;;AACA,aAAO,IAAP;AACA;AA7FF;AAAA;AAAA,8BA+FQ;AACN;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,WAAK,KAAL,CAAW,OAAX;;AACA,aAAO,IAAP;AACA;AApGF;AAAA;;AA+DC;;;;AAIG;AAnEJ,wBAoEc;AACZ,aAAO,KAAK,KAAL,CAAW,SAAlB;AACA,KAtEF;AAAA,sBAuEe,EAvEf,EAuEiB;AACf,WAAK,KAAL,CAAW,SAAX,GAAuB,EAAvB;AACA;AAzEF;AAAA;AAAA,kCAsDmB;AACjB,aAAO,SAAS,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B;AAC1C,QAAA,WAAW,EAAE,CAD6B;AAE1C,QAAA,SAAS,EAAE,IAF+B;AAG1C,QAAA,SAAS,EAAE,GAH+B;AAI1C,QAAA,OAAO,EAAE;AAJiC,OAA3B,CAAhB;AAMA;AA7DF;;AAAA;AAAA,EAAgC,UAAhC","sourceRoot":"","sourcesContent":["import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument {\n    constructor() {\n        super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n        this.name = \"PluckSynth\";\n        const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n        this._noise = new Noise({\n            context: this.context,\n            type: \"pink\"\n        });\n        this.attackNoise = options.attackNoise;\n        this._lfcf = new LowpassCombFilter({\n            context: this.context,\n            dampening: options.dampening,\n            resonance: options.resonance,\n        });\n        this.resonance = options.resonance;\n        this.release = options.release;\n        this._noise.connect(this._lfcf);\n        this._lfcf.connect(this.output);\n    }\n    static getDefaults() {\n        return deepMerge(Instrument.getDefaults(), {\n            attackNoise: 1,\n            dampening: 4000,\n            resonance: 0.7,\n            release: 1,\n        });\n    }\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    get dampening() {\n        return this._lfcf.dampening;\n    }\n    set dampening(fq) {\n        this._lfcf.dampening = fq;\n    }\n    triggerAttack(note, time) {\n        const freq = this.toFrequency(note);\n        time = this.toSeconds(time);\n        const delayAmount = 1 / freq;\n        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n        this._noise.start(time);\n        this._noise.stop(time + delayAmount * this.attackNoise);\n        this._lfcf.resonance.cancelScheduledValues(time);\n        this._lfcf.resonance.setValueAtTime(this.resonance, time);\n        return this;\n    }\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n    triggerRelease(time) {\n        this._lfcf.resonance.linearRampTo(0, this.release, time);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._noise.dispose();\n        this._lfcf.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PluckSynth.js.map"]},"metadata":{},"sourceType":"module"}