{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport var createAudioContextConstructor = function createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) {\n  return /*#__PURE__*/function (_baseAudioContextCons) {\n    _inherits(AudioContext, _baseAudioContextCons);\n\n    var _super = _createSuper(AudioContext);\n\n    function AudioContext() {\n      var _this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, AudioContext);\n\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      var nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome, Edge and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(\"The provided value '\".concat(options.latencyHint, \"' is not a valid enum value of type AudioContextLatencyCategory.\"));\n      } // Bug #150 Safari does not support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      _this = _super.call(this, nativeAudioContext, 2);\n      var latencyHint = options.latencyHint;\n      var sampleRate = nativeAudioContext.sampleRate; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      _this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      _this._nativeAudioContext = nativeAudioContext; // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        _this._nativeGainNode = nativeAudioContext.createGain();\n        _this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        _this._nativeGainNode.gain.value = 1e-37;\n\n        _this._nativeOscillatorNode.connect(_this._nativeGainNode).connect(nativeAudioContext.destination);\n\n        _this._nativeOscillatorNode.start();\n      } else {\n        _this._nativeGainNode = null;\n        _this._nativeOscillatorNode = null;\n      }\n\n      _this._state = null;\n      /*\n       * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n       * changes to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        _this._state = 'suspended';\n\n        var revokeState = function revokeState() {\n          if (_this._state === 'suspended') {\n            _this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n\n      return _this;\n    }\n\n    _createClass(AudioContext, [{\n      key: \"close\",\n      value: function close() {\n        var _this2 = this;\n\n        // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n        if (this.state === 'closed') {\n          return this._nativeAudioContext.close().then(function () {\n            throw createInvalidStateError();\n          });\n        } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n        if (this._state === 'suspended') {\n          this._state = null;\n        }\n\n        return this._nativeAudioContext.close().then(function () {\n          if (_this2._nativeGainNode !== null && _this2._nativeOscillatorNode !== null) {\n            _this2._nativeOscillatorNode.stop();\n\n            _this2._nativeGainNode.disconnect();\n\n            _this2._nativeOscillatorNode.disconnect();\n          }\n\n          deactivateAudioGraph(_this2);\n        });\n      }\n    }, {\n      key: \"createMediaElementSource\",\n      value: function createMediaElementSource(mediaElement) {\n        return new mediaElementAudioSourceNodeConstructor(this, {\n          mediaElement: mediaElement\n        });\n      }\n    }, {\n      key: \"createMediaStreamDestination\",\n      value: function createMediaStreamDestination() {\n        return new mediaStreamAudioDestinationNodeConstructor(this);\n      }\n    }, {\n      key: \"createMediaStreamSource\",\n      value: function createMediaStreamSource(mediaStream) {\n        return new mediaStreamAudioSourceNodeConstructor(this, {\n          mediaStream: mediaStream\n        });\n      }\n    }, {\n      key: \"createMediaStreamTrackSource\",\n      value: function createMediaStreamTrackSource(mediaStreamTrack) {\n        return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n          mediaStreamTrack: mediaStreamTrack\n        });\n      }\n    }, {\n      key: \"resume\",\n      value: function resume() {\n        var _this3 = this;\n\n        if (this._state === 'suspended') {\n          return new Promise(function (resolve, reject) {\n            var resolvePromise = function resolvePromise() {\n              _this3._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n              if (_this3._nativeAudioContext.state === 'running') {\n                resolve();\n              } else {\n                _this3.resume().then(resolve, reject);\n              }\n            };\n\n            _this3._nativeAudioContext.addEventListener('statechange', resolvePromise);\n          });\n        }\n\n        return this._nativeAudioContext.resume().catch(function (err) {\n          // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined || err.code === 15) {\n            throw createInvalidStateError();\n          }\n\n          throw err;\n        });\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend() {\n        return this._nativeAudioContext.suspend().catch(function (err) {\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined) {\n            throw createInvalidStateError();\n          }\n\n          throw err;\n        });\n      }\n    }, {\n      key: \"baseLatency\",\n      get: function get() {\n        return this._baseLatency;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state !== null ? this._state : this._nativeAudioContext.state;\n      }\n    }]);\n\n    return AudioContext;\n  }(baseAudioContextConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/audio-context-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome, Edge and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                        ? 512 / sampleRate\n                        : latencyHint === 'interactive' || latencyHint === undefined\n                            ? 256 / sampleRate\n                            : latencyHint === 'playback'\n                                ? 1024 / sampleRate\n                                : /*\n                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                                   * ScriptProcessorNode.\n                                   */\n                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n                this._nativeGainNode.gain.value = 1e-37;\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            }\n            else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n            this._state = null;\n            /*\n             * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n                deactivateAudioGraph(this);\n            });\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamDestination() {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}