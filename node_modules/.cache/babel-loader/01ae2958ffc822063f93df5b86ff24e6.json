{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createDecrementCycleCounter = function createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) {\n  return function (audioNode, count) {\n    var cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    var nativeContext = getNativeContext(audioNode.context);\n    var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n        var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n            outputs = _getAudioNodeConnecti.outputs;\n\n        var _iterator = _createForOfIteratorHelper(outputs),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var output = _step.value;\n\n            if (isAudioNodeOutputConnection(output)) {\n              var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"sources":["../../../src/factories/decrement-cycle-counter.ts"],"names":[],"mappings":";AAAA,SAAS,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,IAAM,2BAA2B,GAAkC,SAA7D,2BAA6D,CACtE,uCADsE,EAEtE,aAFsE,EAGtE,uBAHsE,EAItE,kBAJsE,EAKtE,mBALsE,EAMtE,gBANsE,EAOtE,iBAPsE,EAQtE,2BARsE,EAStE;AACA,SAAO,UAAC,SAAD,EAAY,KAAZ,EAAqB;AACxB,QAAM,YAAY,GAAG,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAArB;;AAEA,QAAI,YAAY,KAAK,SAArB,EAAgC;AAC5B,YAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,QAAM,aAAa,GAAG,gBAAgB,CAAC,SAAS,CAAC,OAAX,CAAtC;AACA,QAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;;AAEA,QAAI,YAAY,KAAK,KAArB,EAA4B;AACxB,MAAA,aAAa,CAAC,MAAd,CAAqB,SAArB;;AAEA,UAAI,CAAC,SAAD,IAAc,iBAAiB,CAAC,SAAD,CAAnC,EAAgD;AAC5C,YAAM,qBAAqB,GAAG,kBAAkB,CAAC,SAAD,CAAhD;;AAD4C,oCAExB,uBAAuB,CAAC,SAAD,CAFC;AAAA,YAEpC,OAFoC,yBAEpC,OAFoC;;AAAA,mDAIvB,OAJuB;AAAA;;AAAA;AAI5C,8DAA8B;AAAA,gBAAnB,MAAmB;;AAC1B,gBAAI,2BAA2B,CAAC,MAAD,CAA/B,EAAyC;AACrC,kBAAM,0BAA0B,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAD,CAAP,CAArD;AAEA,cAAA,uCAAuC,CAAC,qBAAD,EAAwB,0BAAxB,EAAoD,MAAM,CAAC,CAAD,CAA1D,EAA+D,MAAM,CAAC,CAAD,CAArE,CAAvC;AACH,aAJD,MAIO;AACH,kBAAM,2BAA2B,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAD,CAAP,CAAvD;AAEA,cAAA,qBAAqB,CAAC,OAAtB,CAA8B,2BAA9B,EAA2D,MAAM,CAAC,CAAD,CAAjE;AACH;AACJ;AAd2C;AAAA;AAAA;AAAA;AAAA;AAe/C;AACJ,KAnBD,MAmBO;AACH,MAAA,aAAa,CAAC,GAAd,CAAkB,SAAlB,EAA6B,YAAY,GAAG,KAA5C;AACH;AACJ,GAhCD;AAiCH,CA3CM","sourceRoot":"","sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=decrement-cycle-counter.js.map"]},"metadata":{},"sourceType":"module"}