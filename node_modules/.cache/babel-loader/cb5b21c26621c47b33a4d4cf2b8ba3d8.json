{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\n\nexport var Subtract = /*#__PURE__*/function (_Signal) {\n  _inherits(Subtract, _Signal);\n\n  var _super = _createSuper(Subtract);\n\n  function Subtract() {\n    var _this;\n\n    _classCallCheck(this, Subtract);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n    _this.override = false;\n    _this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n\n    _this._neg = new Negate({\n      context: _this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n\n    _this.subtrahend = _this._param;\n    connectSeries(_this._constantSource, _this._neg, _this._sum);\n    return _this;\n  }\n\n  _createClass(Subtract, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Subtract.prototype), \"dispose\", this).call(this);\n\n      this._neg.dispose();\n\n      this._sum.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n\n  return Subtract;\n}(Signal);","map":{"version":3,"sources":["../../../Tone/signal/Subtract.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,IAAT,QAAqB,sBAArB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,MAAT,QAAsC,kBAAtC;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;AACH,WAAa,QAAb;AAAA;;AAAA;;AA6BC,sBAAA;AAAA;;AAAA;;AACC,8BAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAAlC,CAAN;AA5BD,UAAA,QAAA,GAAW,KAAX;AAES,UAAA,IAAA,GAAe,UAAf;AAET;;AAEG;;AACK,UAAA,IAAA,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAb;AACC,UAAA,KAAA,GAAc,MAAK,IAAnB;AACA,UAAA,MAAA,GAAe,MAAK,IAApB;AAET;;AAEG;;AACK,UAAA,IAAA,GAAe,IAAI,MAAJ,CAAW;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAX,CAAf;AAER;;AAEG;;AACH,UAAA,UAAA,GAA8B,MAAK,MAAnC;AAWC,IAAA,aAAa,CAAC,MAAK,eAAN,EAAuB,MAAK,IAA5B,EAAkC,MAAK,IAAvC,CAAb;AAHD;AAIC;;AAjCF;AAAA;AAAA,8BAyCQ;AACN;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,aAAO,IAAP;AACA;AA9CF;AAAA;AAAA,kCAmCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,KAAK,EAAE;AADmC,OAApC,CAAP;AAGA;AAvCF;;AAAA;AAAA,EAA8B,MAA9B","sourceRoot":"","sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n        this.override = false;\n        this.name = \"Subtract\";\n        /**\n         * the summing node\n         */\n        this._sum = new Gain({ context: this.context });\n        this.input = this._sum;\n        this.output = this._sum;\n        /**\n         * Negate the input of the second input before connecting it to the summing node.\n         */\n        this._neg = new Negate({ context: this.context });\n        /**\n         * The value which is subtracted from the main signal\n         */\n        this.subtrahend = this._param;\n        connectSeries(this._constantSource, this._neg, this._sum);\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._neg.dispose();\n        this._sum.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Subtract.js.map"]},"metadata":{},"sourceType":"module"}