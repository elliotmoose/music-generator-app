{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport var createTestAudioWorkletProcessorPostMessageSupport = function createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var blob, offlineAudioContext, url, isEmittingMessageEvents, isEmittingProcessorErrorEvents, audioWorkletNode, oscillator;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nativeAudioWorkletNodeConstructor === null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 2:\n            if (!(nativeOfflineAudioContextConstructor === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 4:\n            blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n              type: 'application/javascript; charset=utf-8'\n            });\n            offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 8000);\n            url = URL.createObjectURL(blob);\n            isEmittingMessageEvents = false;\n            isEmittingProcessorErrorEvents = false;\n            _context.prev = 9;\n            _context.next = 12;\n            return offlineAudioContext.audioWorklet.addModule(url);\n\n          case 12:\n            audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n              numberOfOutputs: 0\n            });\n            oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = function () {\n              return isEmittingMessageEvents = true;\n            };\n\n            audioWorkletNode.onprocessorerror = function () {\n              return isEmittingProcessorErrorEvents = true;\n            };\n\n            oscillator.connect(audioWorkletNode);\n            _context.next = 19;\n            return offlineAudioContext.startRendering();\n\n          case 19:\n            _context.next = 23;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](9);\n\n          case 23:\n            _context.prev = 23;\n            URL.revokeObjectURL(url);\n            return _context.finish(23);\n\n          case 26:\n            return _context.abrupt(\"return\", isEmittingMessageEvents && !isEmittingProcessorErrorEvents);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 21, 23, 26]]);\n  }));\n};","map":{"version":3,"sources":["../../../src/factories/test-audio-worklet-processor-post-message-support.ts"],"names":[],"mappings":";;AAEA;AACA,OAAO,IAAM,iDAAiD,GAAwD,SAAzG,iDAAyG,CAClH,iCADkH,EAElH,oCAFkH,EAGlH;AACA,+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEC,iCAAiC,KAAK,IAFvC;AAAA;AAAA;AAAA;;AAAA,6CAGQ,IAHR;;AAAA;AAAA,kBAMC,oCAAoC,KAAK,IAN1C;AAAA;AAAA;AAAA;;AAAA,6CAOQ,KAPR;;AAAA;AAUG,YAAA,IAVH,GAUU,IAAI,IAAJ,CACT,CAAC,sHAAD,CADS,EAET;AACI,cAAA,IAAI,EAAE;AADV,aAFS,CAVV;AAgBG,YAAA,mBAhBH,GAgByB,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,IAAjD,CAhBzB;AAiBG,YAAA,GAjBH,GAiBS,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAjBT;AAmBC,YAAA,uBAnBD,GAmB2B,KAnB3B;AAoBC,YAAA,8BApBD,GAoBkC,KApBlC;AAAA;AAAA;AAAA,mBAuBO,mBAAmB,CAAC,YAApB,CAAiC,SAAjC,CAA2C,GAA3C,CAvBP;;AAAA;AAyBO,YAAA,gBAzBP,GAyB0B,IAAI,iCAAJ,CAAsC,mBAAtC,EAA2D,GAA3D,EAAgE;AAAE,cAAA,eAAe,EAAE;AAAnB,aAAhE,CAzB1B;AA0BO,YAAA,UA1BP,GA0BoB,mBAAmB,CAAC,gBAApB,EA1BpB;;AA4BC,YAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC;AAAA,qBAAO,uBAAuB,GAAG,IAAjC;AAAA,aAAlC;;AACA,YAAA,gBAAgB,CAAC,gBAAjB,GAAoC;AAAA,qBAAO,8BAA8B,GAAG,IAAxC;AAAA,aAApC;;AAEA,YAAA,UAAU,CAAC,OAAX,CAAmB,gBAAnB;AA/BD;AAAA,mBAiCO,mBAAmB,CAAC,cAApB,EAjCP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqCC,YAAA,GAAG,CAAC,eAAJ,CAAoB,GAApB;AArCD;;AAAA;AAAA,6CAwCI,uBAAuB,IAAI,CAAC,8BAxChC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0CH,CA9CM","sourceRoot":"","sourcesContent":["// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 8000);\n        const url = URL.createObjectURL(blob);\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n            oscillator.connect(audioWorkletNode);\n            await offlineAudioContext.startRendering();\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map"]},"metadata":{},"sourceType":"module"}