{"ast":null,"code":"/**\n * A standard object to store the Uvs of a texture\n *\n * @class\n * @private\n */\nfunction TextureUvs() {\n  this.x0 = 0;\n  this.y0 = 0;\n  this.x1 = 1;\n  this.y1 = 0;\n  this.x2 = 1;\n  this.y2 = 1;\n  this.x3 = 0;\n  this.y3 = 1;\n}\n\nmodule.exports = TextureUvs;\n/**\n * Sets the texture Uvs based on the given frame information\n * @param frame {Rectangle}\n * @param baseFrame {Rectangle}\n * @param rotate {boolean} Whether or not the frame is rotated\n * @private\n */\n\nTextureUvs.prototype.set = function (frame, baseFrame, rotate) {\n  var tw = baseFrame.width;\n  var th = baseFrame.height;\n\n  if (rotate) {\n    this.x0 = (frame.x + frame.height) / tw;\n    this.y0 = frame.y / th;\n    this.x1 = (frame.x + frame.height) / tw;\n    this.y1 = (frame.y + frame.width) / th;\n    this.x2 = frame.x / tw;\n    this.y2 = (frame.y + frame.width) / th;\n    this.x3 = frame.x / tw;\n    this.y3 = frame.y / th;\n  } else {\n    this.x0 = frame.x / tw;\n    this.y0 = frame.y / th;\n    this.x1 = (frame.x + frame.width) / tw;\n    this.y1 = frame.y / th;\n    this.x2 = (frame.x + frame.width) / tw;\n    this.y2 = (frame.y + frame.height) / th;\n    this.x3 = frame.x / tw;\n    this.y3 = (frame.y + frame.height) / th;\n  }\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/textures/TextureUvs.js"],"names":["TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","module","exports","prototype","set","frame","baseFrame","rotate","tw","width","th","height","x","y"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,GACA;AACI,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,EAAL,GAAU,CAAV;AAEA,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,EAAL,GAAU,CAAV;AAEA,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,EAAL,GAAU,CAAV;AAEA,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,EAAL,GAAU,CAAV;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,UAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAU,CAACW,SAAX,CAAqBC,GAArB,GAA2B,UAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,MAA5B,EAC3B;AACI,MAAIC,EAAE,GAAGF,SAAS,CAACG,KAAnB;AACA,MAAIC,EAAE,GAAGJ,SAAS,CAACK,MAAnB;;AAEA,MAAGJ,MAAH,EACA;AACI,SAAKd,EAAL,GAAU,CAACY,KAAK,CAACO,CAAN,GAAUP,KAAK,CAACM,MAAjB,IAA2BH,EAArC;AACA,SAAKd,EAAL,GAAUW,KAAK,CAACQ,CAAN,GAAUH,EAApB;AAEA,SAAKf,EAAL,GAAU,CAACU,KAAK,CAACO,CAAN,GAAUP,KAAK,CAACM,MAAjB,IAA2BH,EAArC;AACA,SAAKZ,EAAL,GAAU,CAACS,KAAK,CAACQ,CAAN,GAAUR,KAAK,CAACI,KAAjB,IAA0BC,EAApC;AAEA,SAAKb,EAAL,GAAUQ,KAAK,CAACO,CAAN,GAAUJ,EAApB;AACA,SAAKV,EAAL,GAAU,CAACO,KAAK,CAACQ,CAAN,GAAUR,KAAK,CAACI,KAAjB,IAA0BC,EAApC;AAEA,SAAKX,EAAL,GAAUM,KAAK,CAACO,CAAN,GAAUJ,EAApB;AACA,SAAKR,EAAL,GAAUK,KAAK,CAACQ,CAAN,GAAUH,EAApB;AACH,GAbD,MAeA;AAEI,SAAKjB,EAAL,GAAUY,KAAK,CAACO,CAAN,GAAUJ,EAApB;AACA,SAAKd,EAAL,GAAUW,KAAK,CAACQ,CAAN,GAAUH,EAApB;AAEA,SAAKf,EAAL,GAAU,CAACU,KAAK,CAACO,CAAN,GAAUP,KAAK,CAACI,KAAjB,IAA0BD,EAApC;AACA,SAAKZ,EAAL,GAAUS,KAAK,CAACQ,CAAN,GAAUH,EAApB;AAEA,SAAKb,EAAL,GAAU,CAACQ,KAAK,CAACO,CAAN,GAAUP,KAAK,CAACI,KAAjB,IAA0BD,EAApC;AACA,SAAKV,EAAL,GAAU,CAACO,KAAK,CAACQ,CAAN,GAAUR,KAAK,CAACM,MAAjB,IAA2BD,EAArC;AAEA,SAAKX,EAAL,GAAUM,KAAK,CAACO,CAAN,GAAUJ,EAApB;AACA,SAAKR,EAAL,GAAU,CAACK,KAAK,CAACQ,CAAN,GAAUR,KAAK,CAACM,MAAjB,IAA2BD,EAArC;AACH;AACJ,CAlCD","sourcesContent":["\n/**\n * A standard object to store the Uvs of a texture\n *\n * @class\n * @private\n */\nfunction TextureUvs()\n{\n    this.x0 = 0;\n    this.y0 = 0;\n\n    this.x1 = 1;\n    this.y1 = 0;\n\n    this.x2 = 1;\n    this.y2 = 1;\n\n    this.x3 = 0;\n    this.y3 = 1;\n}\n\nmodule.exports = TextureUvs;\n\n/**\n * Sets the texture Uvs based on the given frame information\n * @param frame {Rectangle}\n * @param baseFrame {Rectangle}\n * @param rotate {boolean} Whether or not the frame is rotated\n * @private\n */\nTextureUvs.prototype.set = function (frame, baseFrame, rotate)\n{\n    var tw = baseFrame.width;\n    var th = baseFrame.height;\n\n    if(rotate)\n    {\n        this.x0 = (frame.x + frame.height) / tw;\n        this.y0 = frame.y / th;\n\n        this.x1 = (frame.x + frame.height) / tw;\n        this.y1 = (frame.y + frame.width) / th;\n\n        this.x2 = frame.x / tw;\n        this.y2 = (frame.y + frame.width) / th;\n\n        this.x3 = frame.x / tw;\n        this.y3 = frame.y / th;\n    }\n    else\n    {\n\n        this.x0 = frame.x / tw;\n        this.y0 = frame.y / th;\n\n        this.x1 = (frame.x + frame.width) / tw;\n        this.y1 = frame.y / th;\n\n        this.x2 = (frame.x + frame.width) / tw;\n        this.y2 = (frame.y + frame.height) / th;\n\n        this.x3 = frame.x / tw;\n        this.y3 = (frame.y + frame.height) / th;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}