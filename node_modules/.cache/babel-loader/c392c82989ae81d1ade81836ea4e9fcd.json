{"ast":null,"code":"var WebGLManager = require('./WebGLManager'),\n    TextureShader = require('../shaders/TextureShader'),\n    ComplexPrimitiveShader = require('../shaders/ComplexPrimitiveShader'),\n    PrimitiveShader = require('../shaders/PrimitiveShader'),\n    utils = require('../../../utils');\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.WebGLManager\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\n\n\nfunction ShaderManager(renderer) {\n  WebGLManager.call(this, renderer);\n  /**\n   * @member {number}\n   */\n\n  this.maxAttibs = 10;\n  /**\n   * @member {any[]}\n   */\n\n  this.attribState = [];\n  /**\n   * @member {any[]}\n   */\n\n  this.tempAttribState = [];\n\n  for (var i = 0; i < this.maxAttibs; i++) {\n    this.attribState[i] = false;\n  }\n  /**\n   * @member {any[]}\n   */\n\n\n  this.stack = [];\n  /**\n   * @member {number}\n   * @private\n   */\n\n  this._currentId = -1;\n  /**\n   * @member {Shader}\n   * @private\n   */\n\n  this.currentShader = null; //    this.initPlugins();\n}\n\nShaderManager.prototype = Object.create(WebGLManager.prototype);\nShaderManager.prototype.constructor = ShaderManager;\nutils.pluginTarget.mixin(ShaderManager);\nmodule.exports = ShaderManager;\n/**\n * Called when there is a WebGL context change.\n *\n */\n\nShaderManager.prototype.onContextChange = function () {\n  this.initPlugins();\n  var gl = this.renderer.gl; // get the maximum number of attribute correctly as this tends to vary\n\n  this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  this.attribState = [];\n\n  for (var i = 0; i < this.maxAttibs; i++) {\n    this.attribState[i] = false;\n  } // TODO - Why are these not plugins? We can't decouple primitives unless they are....\n\n\n  this.defaultShader = new TextureShader(this);\n  this.primitiveShader = new PrimitiveShader(this);\n  this.complexPrimitiveShader = new ComplexPrimitiveShader(this);\n};\n/**\n * Takes the attributes given in parameters and uploads them.\n *\n * @param attribs {Array} attribs\n */\n\n\nShaderManager.prototype.setAttribs = function (attribs) {\n  // reset temp state\n  var i;\n\n  for (i = 0; i < this.tempAttribState.length; i++) {\n    this.tempAttribState[i] = false;\n  } // set the new attribs\n\n\n  for (var a in attribs) {\n    this.tempAttribState[attribs[a]] = true;\n  }\n\n  var gl = this.renderer.gl;\n\n  for (i = 0; i < this.attribState.length; i++) {\n    if (this.attribState[i] !== this.tempAttribState[i]) {\n      this.attribState[i] = this.tempAttribState[i];\n\n      if (this.attribState[i]) {\n        gl.enableVertexAttribArray(i);\n      } else {\n        gl.disableVertexAttribArray(i);\n      }\n    }\n  }\n};\n/**\n * Sets the current shader.\n *\n * @param shader {Shader} the shader to upload\n */\n\n\nShaderManager.prototype.setShader = function (shader) {\n  if (this._currentId === shader.uid) {\n    return false;\n  }\n\n  this._currentId = shader.uid;\n  this.currentShader = shader;\n  this.renderer.gl.useProgram(shader.program);\n  this.setAttribs(shader.attributes);\n  return true;\n};\n/**\n * Destroys this object.\n *\n */\n\n\nShaderManager.prototype.destroy = function () {\n  WebGLManager.prototype.destroy.call(this);\n  this.destroyPlugins();\n  this.attribState = null;\n  this.tempAttribState = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/webgl/managers/ShaderManager.js"],"names":["WebGLManager","require","TextureShader","ComplexPrimitiveShader","PrimitiveShader","utils","ShaderManager","renderer","call","maxAttibs","attribState","tempAttribState","i","stack","_currentId","currentShader","prototype","Object","create","constructor","pluginTarget","mixin","module","exports","onContextChange","initPlugins","gl","getParameter","MAX_VERTEX_ATTRIBS","defaultShader","primitiveShader","complexPrimitiveShader","setAttribs","attribs","length","a","enableVertexAttribArray","disableVertexAttribArray","setShader","shader","uid","useProgram","program","attributes","destroy","destroyPlugins"],"mappings":"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","sourcesContent":["var WebGLManager = require('./WebGLManager'),\n    TextureShader = require('../shaders/TextureShader'),\n    ComplexPrimitiveShader = require('../shaders/ComplexPrimitiveShader'),\n    PrimitiveShader = require('../shaders/PrimitiveShader'),\n    utils = require('../../../utils');\n\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.WebGLManager\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\nfunction ShaderManager(renderer)\n{\n    WebGLManager.call(this, renderer);\n\n    /**\n     * @member {number}\n     */\n    this.maxAttibs = 10;\n\n    /**\n     * @member {any[]}\n     */\n    this.attribState = [];\n\n    /**\n     * @member {any[]}\n     */\n    this.tempAttribState = [];\n\n    for (var i = 0; i < this.maxAttibs; i++)\n    {\n        this.attribState[i] = false;\n    }\n\n    /**\n     * @member {any[]}\n     */\n    this.stack = [];\n\n    /**\n     * @member {number}\n     * @private\n     */\n    this._currentId = -1;\n\n    /**\n     * @member {Shader}\n     * @private\n     */\n    this.currentShader = null;\n\n//    this.initPlugins();\n}\n\nShaderManager.prototype = Object.create(WebGLManager.prototype);\nShaderManager.prototype.constructor = ShaderManager;\nutils.pluginTarget.mixin(ShaderManager);\n\nmodule.exports = ShaderManager;\n\n/**\n * Called when there is a WebGL context change.\n *\n */\nShaderManager.prototype.onContextChange = function ()\n{\n    this.initPlugins();\n\n    var gl = this.renderer.gl;\n\n    // get the maximum number of attribute correctly as this tends to vary\n    this.maxAttibs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n    this.attribState = [];\n\n    for (var i = 0; i < this.maxAttibs; i++)\n    {\n        this.attribState[i] = false;\n    }\n\n    // TODO - Why are these not plugins? We can't decouple primitives unless they are....\n    this.defaultShader = new TextureShader(this);\n    this.primitiveShader = new PrimitiveShader(this);\n    this.complexPrimitiveShader = new ComplexPrimitiveShader(this);\n};\n\n/**\n * Takes the attributes given in parameters and uploads them.\n *\n * @param attribs {Array} attribs\n */\nShaderManager.prototype.setAttribs = function (attribs)\n{\n    // reset temp state\n    var i;\n\n    for (i = 0; i < this.tempAttribState.length; i++)\n    {\n        this.tempAttribState[i] = false;\n    }\n\n    // set the new attribs\n    for (var a in attribs)\n    {\n        this.tempAttribState[attribs[a]] = true;\n    }\n\n    var gl = this.renderer.gl;\n\n    for (i = 0; i < this.attribState.length; i++)\n    {\n        if (this.attribState[i] !== this.tempAttribState[i])\n        {\n            this.attribState[i] = this.tempAttribState[i];\n\n            if (this.attribState[i])\n            {\n                gl.enableVertexAttribArray(i);\n            }\n            else\n            {\n                gl.disableVertexAttribArray(i);\n            }\n        }\n    }\n};\n\n/**\n * Sets the current shader.\n *\n * @param shader {Shader} the shader to upload\n */\nShaderManager.prototype.setShader = function (shader)\n{\n    if (this._currentId === shader.uid)\n    {\n        return false;\n    }\n\n    this._currentId = shader.uid;\n\n    this.currentShader = shader;\n\n    this.renderer.gl.useProgram(shader.program);\n    this.setAttribs(shader.attributes);\n\n    return true;\n};\n\n/**\n * Destroys this object.\n *\n */\nShaderManager.prototype.destroy = function ()\n{\n    WebGLManager.prototype.destroy.call(this);\n\n    this.destroyPlugins();\n\n    this.attribState = null;\n\n    this.tempAttribState = null;\n};\n"]},"metadata":{},"sourceType":"script"}