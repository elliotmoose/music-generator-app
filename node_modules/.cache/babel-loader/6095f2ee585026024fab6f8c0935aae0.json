{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\n\nexport var TimeBaseClass = /*#__PURE__*/function (_Tone) {\n  _inherits(TimeBaseClass, _Tone);\n\n  var _super = _createSuper(TimeBaseClass);\n\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  function TimeBaseClass(context, value, units) {\n    var _this;\n\n    _classCallCheck(this, TimeBaseClass);\n\n    _this = _super.call(this);\n    /**\n     * The default units\n     */\n\n    _this.defaultUnits = \"s\";\n    _this._val = value;\n    _this._units = units;\n    _this.context = context;\n    _this._expressions = _this._getExpressions();\n    return _this;\n  }\n  /**\n   * All of the time encoding expressions\n   */\n\n\n  _createClass(TimeBaseClass, [{\n    key: \"_getExpressions\",\n    value: function _getExpressions() {\n      var _this2 = this;\n\n      return {\n        hz: {\n          method: function method(value) {\n            return _this2._frequencyToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n        },\n        i: {\n          method: function method(value) {\n            return _this2._ticksToUnits(parseInt(value, 10));\n          },\n          regexp: /^(\\d+)i$/i\n        },\n        m: {\n          method: function method(value) {\n            return _this2._beatsToUnits(parseInt(value, 10) * _this2._getTimeSignature());\n          },\n          regexp: /^(\\d+)m$/i\n        },\n        n: {\n          method: function method(value, dot) {\n            var numericValue = parseInt(value, 10);\n            var scalar = dot === \".\" ? 1.5 : 1;\n\n            if (numericValue === 1) {\n              return _this2._beatsToUnits(_this2._getTimeSignature()) * scalar;\n            } else {\n              return _this2._beatsToUnits(4 / numericValue) * scalar;\n            }\n          },\n          regexp: /^(\\d+)n(\\.?)$/i\n        },\n        number: {\n          method: function method(value) {\n            return _this2._expressions[_this2.defaultUnits].method.call(_this2, value);\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)$/\n        },\n        s: {\n          method: function method(value) {\n            return _this2._secondsToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)s$/\n        },\n        samples: {\n          method: function method(value) {\n            return parseInt(value, 10) / _this2.context.sampleRate;\n          },\n          regexp: /^(\\d+)samples$/\n        },\n        t: {\n          method: function method(value) {\n            var numericValue = parseInt(value, 10);\n            return _this2._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n          },\n          regexp: /^(\\d+)t$/i\n        },\n        tr: {\n          method: function method(m, q, s) {\n            var total = 0;\n\n            if (m && m !== \"0\") {\n              total += _this2._beatsToUnits(_this2._getTimeSignature() * parseFloat(m));\n            }\n\n            if (q && q !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(q));\n            }\n\n            if (s && s !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(s) / 4);\n            }\n\n            return total;\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n        }\n      };\n    } //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (this._val instanceof TimeBaseClass) {\n        this.fromType(this._val);\n      }\n\n      if (isUndef(this._val)) {\n        return this._noArg();\n      } else if (isString(this._val) && isUndef(this._units)) {\n        for (var units in this._expressions) {\n          if (this._expressions[units].regexp.test(this._val.trim())) {\n            this._units = units;\n            break;\n          }\n        }\n      } else if (isObject(this._val)) {\n        var total = 0;\n\n        for (var typeName in this._val) {\n          if (isDefined(this._val[typeName])) {\n            var quantity = this._val[typeName]; // @ts-ignore\n\n            var time = new this.constructor(this.context, typeName).valueOf() * quantity;\n            total += time;\n          }\n        }\n\n        return total;\n      }\n\n      if (isDefined(this._units)) {\n        var expr = this._expressions[this._units];\n\n        var matching = this._val.toString().trim().match(expr.regexp);\n\n        if (matching) {\n          return expr.method.apply(this, matching.slice(1));\n        } else {\n          return expr.method.call(this, this._val);\n        }\n      } else if (isString(this._val)) {\n        return parseFloat(this._val);\n      } else {\n        return this._val;\n      }\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Returns the value of a frequency in the current units\n     */\n\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return 1 / freq;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 60 / this._getBpm() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return seconds;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ticks * this._beatsToUnits(1) / this._getPPQ();\n    }\n    /**\n     * With no arguments, return 'now'\n     */\n\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return this._now();\n    } //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Return the bpm\n     */\n\n  }, {\n    key: \"_getBpm\",\n    value: function _getBpm() {\n      return this.context.transport.bpm.value;\n    }\n    /**\n     * Return the timeSignature\n     */\n\n  }, {\n    key: \"_getTimeSignature\",\n    value: function _getTimeSignature() {\n      return this.context.transport.timeSignature;\n    }\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n\n  }, {\n    key: \"_getPPQ\",\n    value: function _getPPQ() {\n      return this.context.transport.PPQ;\n    } //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n\n  }, {\n    key: \"fromType\",\n    value: function fromType(type) {\n      this._units = undefined;\n\n      switch (this.defaultUnits) {\n        case \"s\":\n          this._val = type.toSeconds();\n          break;\n\n        case \"i\":\n          this._val = type.toTicks();\n          break;\n\n        case \"hz\":\n          this._val = type.toFrequency();\n          break;\n\n        case \"midi\":\n          this._val = type.toMidi();\n          break;\n      }\n\n      return this;\n    }\n    /**\n     * Return the value in hertz\n     */\n\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency() {\n      return 1 / this.toSeconds();\n    }\n    /**\n     * Return the time in samples\n     */\n\n  }, {\n    key: \"toSamples\",\n    value: function toSamples() {\n      return this.toSeconds() * this.context.sampleRate;\n    }\n    /**\n     * Return the time in milliseconds.\n     */\n\n  }, {\n    key: \"toMilliseconds\",\n    value: function toMilliseconds() {\n      return this.toSeconds() * 1000;\n    }\n  }]);\n\n  return TimeBaseClass;\n}(Tone);","map":{"version":3,"sources":["../../../../Tone/core/type/TimeBase.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport class TimeBaseClass extends Tone {\n    /**\n     * @param context The context associated with the time value. Used to compute\n     * Transport and context-relative timing.\n     * @param  value  The time value as a number, string or object\n     * @param  units  Unit values\n     */\n    constructor(context, value, units) {\n        super();\n        /**\n         * The default units\n         */\n        this.defaultUnits = \"s\";\n        this._val = value;\n        this._units = units;\n        this.context = context;\n        this._expressions = this._getExpressions();\n    }\n    /**\n     * All of the time encoding expressions\n     */\n    _getExpressions() {\n        return {\n            hz: {\n                method: (value) => {\n                    return this._frequencyToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n            },\n            i: {\n                method: (value) => {\n                    return this._ticksToUnits(parseInt(value, 10));\n                },\n                regexp: /^(\\d+)i$/i,\n            },\n            m: {\n                method: (value) => {\n                    return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n                },\n                regexp: /^(\\d+)m$/i,\n            },\n            n: {\n                method: (value, dot) => {\n                    const numericValue = parseInt(value, 10);\n                    const scalar = dot === \".\" ? 1.5 : 1;\n                    if (numericValue === 1) {\n                        return this._beatsToUnits(this._getTimeSignature()) * scalar;\n                    }\n                    else {\n                        return this._beatsToUnits(4 / numericValue) * scalar;\n                    }\n                },\n                regexp: /^(\\d+)n(\\.?)$/i,\n            },\n            number: {\n                method: (value) => {\n                    return this._expressions[this.defaultUnits].method.call(this, value);\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)$/,\n            },\n            s: {\n                method: (value) => {\n                    return this._secondsToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)s$/,\n            },\n            samples: {\n                method: (value) => {\n                    return parseInt(value, 10) / this.context.sampleRate;\n                },\n                regexp: /^(\\d+)samples$/,\n            },\n            t: {\n                method: (value) => {\n                    const numericValue = parseInt(value, 10);\n                    return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n                },\n                regexp: /^(\\d+)t$/i,\n            },\n            tr: {\n                method: (m, q, s) => {\n                    let total = 0;\n                    if (m && m !== \"0\") {\n                        total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n                    }\n                    if (q && q !== \"0\") {\n                        total += this._beatsToUnits(parseFloat(q));\n                    }\n                    if (s && s !== \"0\") {\n                        total += this._beatsToUnits(parseFloat(s) / 4);\n                    }\n                    return total;\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n            },\n        };\n    }\n    //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n    valueOf() {\n        if (this._val instanceof TimeBaseClass) {\n            this.fromType(this._val);\n        }\n        if (isUndef(this._val)) {\n            return this._noArg();\n        }\n        else if (isString(this._val) && isUndef(this._units)) {\n            for (const units in this._expressions) {\n                if (this._expressions[units].regexp.test(this._val.trim())) {\n                    this._units = units;\n                    break;\n                }\n            }\n        }\n        else if (isObject(this._val)) {\n            let total = 0;\n            for (const typeName in this._val) {\n                if (isDefined(this._val[typeName])) {\n                    const quantity = this._val[typeName];\n                    // @ts-ignore\n                    const time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n                    total += time;\n                }\n            }\n            return total;\n        }\n        if (isDefined(this._units)) {\n            const expr = this._expressions[this._units];\n            const matching = this._val.toString().trim().match(expr.regexp);\n            if (matching) {\n                return expr.method.apply(this, matching.slice(1));\n            }\n            else {\n                return expr.method.call(this, this._val);\n            }\n        }\n        else if (isString(this._val)) {\n            return parseFloat(this._val);\n        }\n        else {\n            return this._val;\n        }\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    _frequencyToUnits(freq) {\n        return 1 / freq;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return (60 / this._getBpm()) * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return seconds;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return (ticks * (this._beatsToUnits(1)) / this._getPPQ());\n    }\n    /**\n     * With no arguments, return 'now'\n     */\n    _noArg() {\n        return this._now();\n    }\n    //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the bpm\n     */\n    _getBpm() {\n        return this.context.transport.bpm.value;\n    }\n    /**\n     * Return the timeSignature\n     */\n    _getTimeSignature() {\n        return this.context.transport.timeSignature;\n    }\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n    _getPPQ() {\n        return this.context.transport.PPQ;\n    }\n    //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n    fromType(type) {\n        this._units = undefined;\n        switch (this.defaultUnits) {\n            case \"s\":\n                this._val = type.toSeconds();\n                break;\n            case \"i\":\n                this._val = type.toTicks();\n                break;\n            case \"hz\":\n                this._val = type.toFrequency();\n                break;\n            case \"midi\":\n                this._val = type.toMidi();\n                break;\n        }\n        return this;\n    }\n    /**\n     * Return the value in hertz\n     */\n    toFrequency() {\n        return 1 / this.toSeconds();\n    }\n    /**\n     * Return the time in samples\n     */\n    toSamples() {\n        return this.toSeconds() * this.context.sampleRate;\n    }\n    /**\n     * Return the time in milliseconds.\n     */\n    toMilliseconds() {\n        return this.toSeconds() * 1000;\n    }\n}\n//# sourceMappingURL=TimeBase.js.map"]},"metadata":{},"sourceType":"module"}