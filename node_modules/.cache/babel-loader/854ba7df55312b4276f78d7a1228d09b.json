{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\n\nexport var Abs = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Abs, _SignalOperator);\n\n  var _super = _createSuper(Abs);\n\n  function Abs() {\n    var _this;\n\n    _classCallCheck(this, Abs);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    _this._abs = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(val) {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    _this.input = _this._abs;\n    /**\n     * The output range [0, 1]\n     */\n\n    _this.output = _this._abs;\n    return _this;\n  }\n  /**\n   * clean up\n   */\n\n\n  _createClass(Abs, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Abs.prototype), \"dispose\", this).call(this);\n\n      this._abs.dispose();\n\n      return this;\n    }\n  }]);\n\n  return Abs;\n}(SignalOperator);","map":{"version":3,"sources":["../../../Tone/signal/Abs.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA;;;;;;;;;;;AAWG;;AACH,WAAa,GAAb;AAAA;;AAAA;;AAAA,iBAAA;AAAA;;AAAA;;;AAEU,UAAA,IAAA,GAAe,KAAf;AAET;;AAEG;;AACK,UAAA,IAAA,GAAO,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,MAAK,OADe;AAE7B,MAAA,OAAO,EAAE,iBAAA,GAAG,EAAG;AACd,YAAI,IAAI,CAAC,GAAL,CAAS,GAAT,IAAgB,KAApB,EAA2B;AAC1B,iBAAO,CAAP;AACA,SAFD,MAEO;AACN,iBAAO,IAAI,CAAC,GAAL,CAAS,GAAT,CAAP;AACA;AACD;AAR4B,KAAf,CAAP;AAWR;;AAEG;;AACH,UAAA,KAAA,GAAQ,MAAK,IAAb;AAEA;;AAEG;;AACH,UAAA,MAAA,GAAS,MAAK,IAAd;AA1BD;AAoCC;AARA;;AAEG;;;AA9BJ;AAAA;AAAA,8BA+BQ;AACN;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,aAAO,IAAP;AACA;AAnCF;;AAAA;AAAA,EAAyB,cAAzB","sourceRoot":"","sourcesContent":["import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator {\n    constructor() {\n        super(...arguments);\n        this.name = \"Abs\";\n        /**\n         * The node which converts the audio ranges\n         */\n        this._abs = new WaveShaper({\n            context: this.context,\n            mapping: val => {\n                if (Math.abs(val) < 0.001) {\n                    return 0;\n                }\n                else {\n                    return Math.abs(val);\n                }\n            },\n        });\n        /**\n         * The AudioRange input [-1, 1]\n         */\n        this.input = this._abs;\n        /**\n         * The output range [0, 1]\n         */\n        this.output = this._abs;\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this._abs.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Abs.js.map"]},"metadata":{},"sourceType":"module"}