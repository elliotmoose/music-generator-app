{"ast":null,"code":"/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport var createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = function createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor) {\n  return function () {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(function (resolve) {\n      var isPending = true;\n\n      var resolvePromise = function resolvePromise(err) {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n\n      var promise; // Bug #26: Safari throws a synchronous error.\n\n      try {\n        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, function () {// Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      } // Bug #21: Safari does not support promises yet.\n\n\n      if (promise !== undefined) {\n        // Bug #6: Chrome, Edge, Firefox and Opera do not call the errorCallback.\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/test-audio-context-decode-audio-data-method-type-error-support.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAO,IAAM,2DAA2D,GAAkE,SAA7H,2DAA6H,CACtI,oCADsI,EAEtI;AACA,SAAO,YAAK;AACR,QAAI,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAO,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAP;AACH;;AAED,QAAM,mBAAmB,GAAG,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B,CALQ,CAOR;;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AAC3B,UAAI,SAAS,GAAG,IAAhB;;AAEA,UAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,GAAD,EAAe;AAClC,YAAI,SAAJ,EAAe;AACX,UAAA,SAAS,GAAG,KAAZ;AAEA,UAAA,mBAAmB,CAAC,cAApB;AAEA,UAAA,OAAO,CAAC,GAAG,YAAY,SAAhB,CAAP;AACH;AACJ,OARD;;AAUA,UAAI,OAAJ,CAb2B,CAe3B;;AACA,UAAI;AACA,QAAA,OAAO,GAAG,mBAAmB,CACzB;AADyB,SAExB,eAFK,CAGG,IAHH,EAIF,YAAK,CACD;AACH,SANC,EAOF,cAPE,CAAV;AASH,OAVD,CAUE,OAAO,GAAP,EAAY;AACV,QAAA,cAAc,CAAC,GAAD,CAAd;AACH,OA5B0B,CA8B3B;;;AACA,UAAI,OAAO,KAAK,SAAhB,EAA2B;AACvB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,cAAd;AACH;AACJ,KAnCM,CAAP;AAoCH,GA5CD;AA6CH,CAhDM","sourceRoot":"","sourcesContent":["/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n            const resolvePromise = (err) => {\n                if (isPending) {\n                    isPending = false;\n                    offlineAudioContext.startRendering();\n                    resolve(err instanceof TypeError);\n                }\n            };\n            let promise;\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                promise = offlineAudioContext\n                    // Bug #1: Safari requires a successCallback.\n                    .decodeAudioData(null, () => {\n                    // Ignore the success callback.\n                }, resolvePromise);\n            }\n            catch (err) {\n                resolvePromise(err);\n            }\n            // Bug #21: Safari does not support promises yet.\n            if (promise !== undefined) {\n                // Bug #6: Chrome, Edge, Firefox and Opera do not call the errorCallback.\n                promise.catch(resolvePromise);\n            }\n        });\n    };\n};\n//# sourceMappingURL=test-audio-context-decode-audio-data-method-type-error-support.js.map"]},"metadata":{},"sourceType":"module"}