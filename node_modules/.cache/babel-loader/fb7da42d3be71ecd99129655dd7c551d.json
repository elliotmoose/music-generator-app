{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\n\nexport var MidSideMerge = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideMerge, _ToneAudioNode);\n\n  var _super = _createSuper(MidSideMerge);\n\n  function MidSideMerge() {\n    var _this;\n\n    _classCallCheck(this, MidSideMerge);\n\n    _this = _super.call(this, optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    _this.name = \"MidSideMerge\";\n    _this.mid = new Gain({\n      context: _this.context\n    });\n    _this.side = new Gain({\n      context: _this.context\n    });\n    _this._left = new Add({\n      context: _this.context\n    });\n    _this._leftMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._right = new Subtract({\n      context: _this.context\n    });\n    _this._rightMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._merge = _this.output = new Merge({\n      context: _this.context\n    });\n\n    _this.mid.fan(_this._left);\n\n    _this.side.connect(_this._left.addend);\n\n    _this.mid.connect(_this._right);\n\n    _this.side.connect(_this._right.subtrahend);\n\n    _this._left.connect(_this._leftMult);\n\n    _this._right.connect(_this._rightMult);\n\n    _this._leftMult.connect(_this._merge, 0, 0);\n\n    _this._rightMult.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  _createClass(MidSideMerge, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideMerge.prototype), \"dispose\", this).call(this);\n\n      this.mid.dispose();\n      this.side.dispose();\n\n      this._leftMult.dispose();\n\n      this._rightMult.dispose();\n\n      this._left.dispose();\n\n      this._right.dispose();\n\n      return this;\n    }\n  }]);\n\n  return MidSideMerge;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/MidSideMerge.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,GAAT,QAAoB,kBAApB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;AAOG;;AACH,WAAa,YAAb;AAAA;;AAAA;;AAkDC,0BAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,YAAY,CAAC,WAAb,EAAD,EAA6B,SAA7B,CAA1B;AAjDQ,UAAA,IAAA,GAAe,cAAf;AAkDR,UAAK,GAAL,GAAW,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAX;AACA,UAAK,IAAL,GAAY,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAZ;AACA,UAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAR,CAAb;AACA,UAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAC7B,MAAA,OAAO,EAAE,MAAK,OADe;AAE7B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFiB,KAAb,CAAjB;AAIA,UAAK,MAAL,GAAc,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAb,CAAd;AACA,UAAK,UAAL,GAAkB,IAAI,QAAJ,CAAa;AAC9B,MAAA,OAAO,EAAE,MAAK,OADgB;AAE9B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFkB,KAAb,CAAlB;AAIA,UAAK,MAAL,GAAc,MAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAV,CAA5B;;AAEA,UAAK,GAAL,CAAS,GAAT,CAAa,MAAK,KAAlB;;AACA,UAAK,IAAL,CAAU,OAAV,CAAkB,MAAK,KAAL,CAAW,MAA7B;;AACA,UAAK,GAAL,CAAS,OAAT,CAAiB,MAAK,MAAtB;;AACA,UAAK,IAAL,CAAU,OAAV,CAAkB,MAAK,MAAL,CAAY,UAA9B;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,SAAxB;;AACA,UAAK,MAAL,CAAY,OAAZ,CAAoB,MAAK,UAAzB;;AACA,UAAK,SAAL,CAAe,OAAf,CAAuB,MAAK,MAA5B,EAAoC,CAApC,EAAuC,CAAvC;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC;;AAvBD;AAwBC;;AA1EF;AAAA;AAAA,8BA4EQ;AACN;;AACA,WAAK,GAAL,CAAS,OAAT;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,WAAK,KAAL,CAAW,OAAX;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,aAAO,IAAP;AACA;AArFF;;AAAA;AAAA,EAAkC,aAAlC","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n        this.name = \"MidSideMerge\";\n        this.mid = new Gain({ context: this.context });\n        this.side = new Gain({ context: this.context });\n        this._left = new Add({ context: this.context });\n        this._leftMult = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2\n        });\n        this._right = new Subtract({ context: this.context });\n        this._rightMult = new Multiply({\n            context: this.context,\n            value: Math.SQRT1_2\n        });\n        this._merge = this.output = new Merge({ context: this.context });\n        this.mid.fan(this._left);\n        this.side.connect(this._left.addend);\n        this.mid.connect(this._right);\n        this.side.connect(this._right.subtrahend);\n        this._left.connect(this._leftMult);\n        this._right.connect(this._rightMult);\n        this._leftMult.connect(this._merge, 0, 0);\n        this._rightMult.connect(this._merge, 0, 1);\n    }\n    dispose() {\n        super.dispose();\n        this.mid.dispose();\n        this.side.dispose();\n        this._leftMult.dispose();\n        this._rightMult.dispose();\n        this._left.dispose();\n        this._right.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideMerge.js.map"]},"metadata":{},"sourceType":"module"}