{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\n\nexport var Channel = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Channel, _ToneAudioNode);\n\n  var _super = _createSuper(Channel);\n\n  function Channel() {\n    var _this;\n\n    _classCallCheck(this, Channel);\n\n    _this = _super.call(this, optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    _this.name = \"Channel\";\n    var options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    _this._solo = _this.input = new Solo({\n      solo: options.solo,\n      context: _this.context\n    });\n    _this._panVol = _this.output = new PanVol({\n      context: _this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    _this.pan = _this._panVol.pan;\n    _this.volume = _this._panVol.volume;\n\n    _this._solo.connect(_this._panVol);\n\n    readOnly(_assertThisInitialized(_this), [\"pan\", \"volume\"]);\n    return _this;\n  }\n\n  _createClass(Channel, [{\n    key: \"_getBus\",\n\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n    value: function _getBus(name) {\n      if (!Channel.buses.has(name)) {\n        Channel.buses.set(name, new Gain({\n          context: this.context\n        }));\n      }\n\n      return Channel.buses.get(name);\n    }\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * [[connect]], except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since [[send]]\n     * and [[receive]] can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(name) {\n      var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var bus = this._getBus(name);\n\n      var sendKnob = new Gain({\n        context: this.context,\n        units: \"decibels\",\n        gain: volume\n      });\n      this.connect(sendKnob);\n      sendKnob.connect(bus);\n      return sendKnob;\n    }\n    /**\n     * Receive audio from a channel which was connected with [[send]].\n     * @param name The channel name to receive audio from.\n     */\n\n  }, {\n    key: \"receive\",\n    value: function receive(name) {\n      var bus = this._getBus(name);\n\n      bus.connect(this);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Channel.prototype), \"dispose\", this).call(this);\n\n      this._panVol.dispose();\n\n      this.pan.dispose();\n      this.volume.dispose();\n\n      this._solo.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"solo\",\n\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n     */\n    get: function get() {\n      return this._solo.solo;\n    },\n    set: function set(solo) {\n      this._solo.solo = solo;\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._solo.muted || this.mute;\n    }\n    /**\n     * Mute/unmute the volume\n     */\n\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this._panVol.mute;\n    },\n    set: function set(mute) {\n      this._panVol.mute = mute;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        pan: 0,\n        volume: 0,\n        mute: false,\n        solo: false,\n        channelCount: 1\n      });\n    }\n  }]);\n\n  return Channel;\n}(ToneAudioNode);\n/**\n * Store the send/receive channels by name.\n */\n\nChannel.buses = new Map();","map":{"version":3,"sources":["../../../../Tone/component/channel/Channel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n        this.name = \"Channel\";\n        const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n        this._solo = this.input = new Solo({\n            solo: options.solo,\n            context: this.context,\n        });\n        this._panVol = this.output = new PanVol({\n            context: this.context,\n            pan: options.pan,\n            volume: options.volume,\n            mute: options.mute,\n            channelCount: options.channelCount\n        });\n        this.pan = this._panVol.pan;\n        this.volume = this._panVol.volume;\n        this._solo.connect(this._panVol);\n        readOnly(this, [\"pan\", \"volume\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            pan: 0,\n            volume: 0,\n            mute: false,\n            solo: false,\n            channelCount: 1,\n        });\n    }\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n     */\n    get solo() {\n        return this._solo.solo;\n    }\n    set solo(solo) {\n        this._solo.solo = solo;\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n    get muted() {\n        return this._solo.muted || this.mute;\n    }\n    /**\n     * Mute/unmute the volume\n     */\n    get mute() {\n        return this._panVol.mute;\n    }\n    set mute(mute) {\n        this._panVol.mute = mute;\n    }\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n    _getBus(name) {\n        if (!Channel.buses.has(name)) {\n            Channel.buses.set(name, new Gain({ context: this.context }));\n        }\n        return Channel.buses.get(name);\n    }\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * [[connect]], except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since [[send]]\n     * and [[receive]] can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n    send(name, volume = 0) {\n        const bus = this._getBus(name);\n        const sendKnob = new Gain({\n            context: this.context,\n            units: \"decibels\",\n            gain: volume,\n        });\n        this.connect(sendKnob);\n        sendKnob.connect(bus);\n        return sendKnob;\n    }\n    /**\n     * Receive audio from a channel which was connected with [[send]].\n     * @param name The channel name to receive audio from.\n     */\n    receive(name) {\n        const bus = this._getBus(name);\n        bus.connect(this);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._panVol.dispose();\n        this.pan.dispose();\n        this.volume.dispose();\n        this._solo.dispose();\n        return this;\n    }\n}\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();\n//# sourceMappingURL=Channel.js.map"]},"metadata":{},"sourceType":"module"}