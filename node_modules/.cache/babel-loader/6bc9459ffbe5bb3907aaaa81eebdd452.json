{"ast":null,"code":"var AbstractFilter = require('./AbstractFilter'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n *\n * Basic FXAA implementation based on the code on geeks3d.com with the\n * modification that the texture2DLod stuff was removed since it's\n * unsupported by WebGL.\n *\n * --\n * From:\n * https://github.com/mitsuhiko/webgl-meincraft\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI\n *\n */\n\n\nfunction FXAAFilter() {\n  AbstractFilter.call(this, // vertex shader\n  fs.readFileSync(__dirname + '/FXAA.vert', 'utf8'), // fragment shader\n  fs.readFileSync(__dirname + '/FXAA.frag', 'utf8'), // uniforms\n  {\n    resolution: {\n      type: 'v2',\n      value: {\n        x: 1,\n        y: 1\n      }\n    }\n  });\n}\n\nFXAAFilter.prototype = Object.create(AbstractFilter.prototype);\nFXAAFilter.prototype.constructor = FXAAFilter;\nmodule.exports = FXAAFilter;\n\nFXAAFilter.prototype.applyFilter = function (renderer, input, output) {\n  var filterManager = renderer.filterManager;\n  var shader = this.getShader(renderer); // draw the filter...\n\n  filterManager.applyFilter(shader, input, output);\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/webgl/filters/FXAAFilter.js"],"names":["AbstractFilter","require","fs","FXAAFilter","call","readFileSync","__dirname","resolution","type","value","x","y","prototype","Object","create","constructor","module","exports","applyFilter","renderer","input","output","filterManager","shader","getShader"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,GACA;AACIH,EAAAA,cAAc,CAACI,IAAf,CAAoB,IAApB,EACI;AACAF,EAAAA,EAAE,CAACG,YAAH,CAAgBC,SAAS,GAAG,YAA5B,EAA0C,MAA1C,CAFJ,EAGI;AACAJ,EAAAA,EAAE,CAACG,YAAH,CAAgBC,SAAS,GAAG,YAA5B,EAA0C,MAA1C,CAJJ,EAKI;AACA;AACIC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX;AAArB;AADhB,GANJ;AAWH;;AAEDR,UAAU,CAACS,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAcd,cAAc,CAACY,SAA7B,CAAvB;AACAT,UAAU,CAACS,SAAX,CAAqBG,WAArB,GAAmCZ,UAAnC;AACAa,MAAM,CAACC,OAAP,GAAiBd,UAAjB;;AAEAA,UAAU,CAACS,SAAX,CAAqBM,WAArB,GAAmC,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,MAA3B,EACnC;AACI,MAAIC,aAAa,GAAGH,QAAQ,CAACG,aAA7B;AAEA,MAAIC,MAAM,GAAG,KAAKC,SAAL,CAAgBL,QAAhB,CAAb,CAHJ,CAIK;;AACDG,EAAAA,aAAa,CAACJ,WAAd,CAA0BK,MAA1B,EAAkCH,KAAlC,EAAyCC,MAAzC;AACH,CAPD","sourcesContent":["var AbstractFilter = require('./AbstractFilter');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n *\n * Basic FXAA implementation based on the code on geeks3d.com with the\n * modification that the texture2DLod stuff was removed since it's\n * unsupported by WebGL.\n *\n * --\n * From:\n * https://github.com/mitsuhiko/webgl-meincraft\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI\n *\n */\nfunction FXAAFilter()\n{\n    AbstractFilter.call(this,\n        // vertex shader\n        fs.readFileSync(__dirname + '/FXAA.vert', 'utf8'),\n        // fragment shader\n        fs.readFileSync(__dirname + '/FXAA.frag', 'utf8'),\n        // uniforms\n        {\n            resolution: { type: 'v2', value: { x: 1, y: 1 } }\n        }\n    );\n\n}\n\nFXAAFilter.prototype = Object.create(AbstractFilter.prototype);\nFXAAFilter.prototype.constructor = FXAAFilter;\nmodule.exports = FXAAFilter;\n\nFXAAFilter.prototype.applyFilter = function (renderer, input, output)\n{\n    var filterManager = renderer.filterManager;\n\n    var shader = this.getShader( renderer );\n     // draw the filter...\n    filterManager.applyFilter(shader, input, output);\n};\n"]},"metadata":{},"sourceType":"script"}