{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nexport var NoiseSynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(NoiseSynth, _Instrument);\n\n  var _super = _createSuper(NoiseSynth);\n\n  function NoiseSynth() {\n    var _this;\n\n    _classCallCheck(this, NoiseSynth);\n\n    _this = _super.call(this, optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    _this.name = \"NoiseSynth\";\n    var options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    _this.noise = new Noise(Object.assign({\n      context: _this.context\n    }, options.noise));\n    _this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: _this.context\n    }, options.envelope)); // connect the noise to the output\n\n    _this.noise.chain(_this.envelope, _this.output);\n\n    return _this;\n  }\n\n  _createClass(NoiseSynth, [{\n    key: \"triggerAttack\",\n\n    /**\n     * Start the attack portion of the envelopes. Unlike other\n     * instruments, Tone.NoiseSynth doesn't have a note.\n     * @example\n     * const noiseSynth = new Tone.NoiseSynth().toDestination();\n     * noiseSynth.triggerAttack();\n     */\n    value: function triggerAttack(time) {\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      time = this.toSeconds(time); // the envelopes\n\n      this.envelope.triggerAttack(time, velocity); // start the noise\n\n      this.noise.start(time);\n\n      if (this.envelope.sustain === 0) {\n        this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      }\n\n      return this;\n    }\n    /**\n     * Start the release portion of the envelopes.\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      time = this.toSeconds(time);\n      this.envelope.triggerRelease(time);\n      this.noise.stop(time + this.toSeconds(this.envelope.release));\n      return this;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 0);\n\n        this._syncMethod(\"triggerRelease\", 0);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(duration, time) {\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      time = this.toSeconds(time);\n      duration = this.toSeconds(duration);\n      this.triggerAttack(time, velocity);\n      this.triggerRelease(time + duration);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(NoiseSynth.prototype), \"dispose\", this).call(this);\n\n      this.noise.dispose();\n      this.envelope.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Instrument.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          decay: 0.1,\n          sustain: 0.0\n        }),\n        noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n          type: \"white\"\n        })\n      });\n    }\n  }]);\n\n  return NoiseSynth;\n}(Instrument);","map":{"version":3,"sources":["../../../Tone/instrument/NoiseSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument {\n    constructor() {\n        super(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n        this.name = \"NoiseSynth\";\n        const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n        this.noise = new Noise(Object.assign({\n            context: this.context,\n        }, options.noise));\n        this.envelope = new AmplitudeEnvelope(Object.assign({\n            context: this.context,\n        }, options.envelope));\n        // connect the noise to the output\n        this.noise.chain(this.envelope, this.output);\n    }\n    static getDefaults() {\n        return Object.assign(Instrument.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                decay: 0.1,\n                sustain: 0.0,\n            }),\n            noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n                type: \"white\",\n            }),\n        });\n    }\n    /**\n     * Start the attack portion of the envelopes. Unlike other\n     * instruments, Tone.NoiseSynth doesn't have a note.\n     * @example\n     * const noiseSynth = new Tone.NoiseSynth().toDestination();\n     * noiseSynth.triggerAttack();\n     */\n    triggerAttack(time, velocity = 1) {\n        time = this.toSeconds(time);\n        // the envelopes\n        this.envelope.triggerAttack(time, velocity);\n        // start the noise\n        this.noise.start(time);\n        if (this.envelope.sustain === 0) {\n            this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n        }\n        return this;\n    }\n    /**\n     * Start the release portion of the envelopes.\n     */\n    triggerRelease(time) {\n        time = this.toSeconds(time);\n        this.envelope.triggerRelease(time);\n        this.noise.stop(time + this.toSeconds(this.envelope.release));\n        return this;\n    }\n    sync() {\n        if (this._syncState()) {\n            this._syncMethod(\"triggerAttack\", 0);\n            this._syncMethod(\"triggerRelease\", 0);\n        }\n        return this;\n    }\n    triggerAttackRelease(duration, time, velocity = 1) {\n        time = this.toSeconds(time);\n        duration = this.toSeconds(duration);\n        this.triggerAttack(time, velocity);\n        this.triggerRelease(time + duration);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this.noise.dispose();\n        this.envelope.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=NoiseSynth.js.map"]},"metadata":{},"sourceType":"module"}