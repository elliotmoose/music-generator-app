{"ast":null,"code":"var Shader = require('./Shader');\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n * @param shaderManager {ShaderManager} The webgl shader manager this shader works for.\n * @param [vertexSrc] {string} The source of the vertex shader.\n * @param [fragmentSrc] {string} The source of the fragment shader.\n * @param [customUniforms] {object} Custom uniforms to use to augment the built-in ones.\n * @param [fragmentSrc] {string} The source of the fragment shader.\n */\n\n\nfunction TextureShader(shaderManager, vertexSrc, fragmentSrc, customUniforms, customAttributes) {\n  var uniforms = {\n    uSampler: {\n      type: 'sampler2D',\n      value: 0\n    },\n    projectionMatrix: {\n      type: 'mat3',\n      value: new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])\n    }\n  };\n\n  if (customUniforms) {\n    for (var u in customUniforms) {\n      uniforms[u] = customUniforms[u];\n    }\n  }\n\n  var attributes = {\n    aVertexPosition: 0,\n    aTextureCoord: 0,\n    aColor: 0\n  };\n\n  if (customAttributes) {\n    for (var a in customAttributes) {\n      attributes[a] = customAttributes[a];\n    }\n  }\n  /**\n   * The vertex shader.\n   * @member {Array}\n   */\n\n\n  vertexSrc = vertexSrc || TextureShader.defaultVertexSrc;\n  /**\n   * The fragment shader.\n   * @member {Array}\n   */\n\n  fragmentSrc = fragmentSrc || TextureShader.defaultFragmentSrc;\n  Shader.call(this, shaderManager, vertexSrc, fragmentSrc, uniforms, attributes);\n} // constructor\n\n\nTextureShader.prototype = Object.create(Shader.prototype);\nTextureShader.prototype.constructor = TextureShader;\nmodule.exports = TextureShader;\nTextureShader.defaultVertexSrc = ['precision lowp float;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'attribute vec4 aColor;', 'uniform mat3 projectionMatrix;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'void main(void){', '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);', '   vTextureCoord = aTextureCoord;', '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);', '}'].join('\\n');\nTextureShader.defaultFragmentSrc = ['precision lowp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform sampler2D uSampler;', 'void main(void){', '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;', '}'].join('\\n');","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/webgl/shaders/TextureShader.js"],"names":["Shader","require","TextureShader","shaderManager","vertexSrc","fragmentSrc","customUniforms","customAttributes","uniforms","uSampler","type","value","projectionMatrix","Float32Array","u","attributes","aVertexPosition","aTextureCoord","aColor","a","defaultVertexSrc","defaultFragmentSrc","call","prototype","Object","create","constructor","module","exports","join"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,aAAvB,EAAsCC,SAAtC,EAAiDC,WAAjD,EAA8DC,cAA9D,EAA8EC,gBAA9E,EACA;AACI,MAAIC,QAAQ,GAAG;AAEXC,IAAAA,QAAQ,EAAY;AAAEC,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KAFT;AAGXC,IAAAA,gBAAgB,EAAI;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE,IAAIE,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EACC,CADD,EACI,CADJ,EACO,CADP,EAEC,CAFD,EAEI,CAFJ,EAEO,CAFP,CAAjB;AAAvB;AAHT,GAAf;;AAQA,MAAIP,cAAJ,EACA;AACI,SAAK,IAAIQ,CAAT,IAAcR,cAAd,EACA;AACIE,MAAAA,QAAQ,CAACM,CAAD,CAAR,GAAcR,cAAc,CAACQ,CAAD,CAA5B;AACH;AACJ;;AAGD,MAAIC,UAAU,GAAG;AACbC,IAAAA,eAAe,EAAK,CADP;AAEbC,IAAAA,aAAa,EAAO,CAFP;AAGbC,IAAAA,MAAM,EAAc;AAHP,GAAjB;;AAMA,MAAIX,gBAAJ,EACA;AACI,SAAK,IAAIY,CAAT,IAAcZ,gBAAd,EACA;AACIQ,MAAAA,UAAU,CAACI,CAAD,CAAV,GAAgBZ,gBAAgB,CAACY,CAAD,CAAhC;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACIf,EAAAA,SAAS,GAAGA,SAAS,IAAIF,aAAa,CAACkB,gBAAvC;AAEA;AACJ;AACA;AACA;;AACIf,EAAAA,WAAW,GAAGA,WAAW,IAAIH,aAAa,CAACmB,kBAA3C;AAEArB,EAAAA,MAAM,CAACsB,IAAP,CAAY,IAAZ,EAAkBnB,aAAlB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDG,QAAzD,EAAmEO,UAAnE;AACH,C,CAED;;;AACAb,aAAa,CAACqB,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAczB,MAAM,CAACuB,SAArB,CAA1B;AACArB,aAAa,CAACqB,SAAd,CAAwBG,WAAxB,GAAsCxB,aAAtC;AACAyB,MAAM,CAACC,OAAP,GAAiB1B,aAAjB;AAEAA,aAAa,CAACkB,gBAAd,GAAiC,CAC7B,uBAD6B,EAE7B,iCAF6B,EAG7B,+BAH6B,EAI7B,wBAJ6B,EAM7B,gCAN6B,EAQ7B,6BAR6B,EAS7B,sBAT6B,EAW7B,kBAX6B,EAY7B,sFAZ6B,EAa7B,mCAb6B,EAc7B,oDAd6B,EAe7B,GAf6B,EAgB/BS,IAhB+B,CAgB1B,IAhB0B,CAAjC;AAkBA3B,aAAa,CAACmB,kBAAd,GAAmC,CAC/B,uBAD+B,EAG/B,6BAH+B,EAI/B,sBAJ+B,EAM/B,6BAN+B,EAQ/B,kBAR+B,EAS/B,iEAT+B,EAU/B,GAV+B,EAWjCQ,IAXiC,CAW5B,IAX4B,CAAnC","sourcesContent":["var Shader = require('./Shader');\n\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n * @param shaderManager {ShaderManager} The webgl shader manager this shader works for.\n * @param [vertexSrc] {string} The source of the vertex shader.\n * @param [fragmentSrc] {string} The source of the fragment shader.\n * @param [customUniforms] {object} Custom uniforms to use to augment the built-in ones.\n * @param [fragmentSrc] {string} The source of the fragment shader.\n */\nfunction TextureShader(shaderManager, vertexSrc, fragmentSrc, customUniforms, customAttributes)\n{\n    var uniforms = {\n\n        uSampler:           { type: 'sampler2D', value: 0 },\n        projectionMatrix:   { type: 'mat3', value: new Float32Array([1, 0, 0,\n                                                                     0, 1, 0,\n                                                                     0, 0, 1]) }\n    };\n\n    if (customUniforms)\n    {\n        for (var u in customUniforms)\n        {\n            uniforms[u] = customUniforms[u];\n        }\n    }\n\n\n    var attributes = {\n        aVertexPosition:    0,\n        aTextureCoord:      0,\n        aColor:             0\n    };\n\n    if (customAttributes)\n    {\n        for (var a in customAttributes)\n        {\n            attributes[a] = customAttributes[a];\n        }\n    }\n\n    /**\n     * The vertex shader.\n     * @member {Array}\n     */\n    vertexSrc = vertexSrc || TextureShader.defaultVertexSrc;\n\n    /**\n     * The fragment shader.\n     * @member {Array}\n     */\n    fragmentSrc = fragmentSrc || TextureShader.defaultFragmentSrc;\n\n    Shader.call(this, shaderManager, vertexSrc, fragmentSrc, uniforms, attributes);\n}\n\n// constructor\nTextureShader.prototype = Object.create(Shader.prototype);\nTextureShader.prototype.constructor = TextureShader;\nmodule.exports = TextureShader;\n\nTextureShader.defaultVertexSrc = [\n    'precision lowp float;',\n    'attribute vec2 aVertexPosition;',\n    'attribute vec2 aTextureCoord;',\n    'attribute vec4 aColor;',\n\n    'uniform mat3 projectionMatrix;',\n\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n\n    'void main(void){',\n    '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);',\n    '   vTextureCoord = aTextureCoord;',\n    '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);',\n    '}'\n].join('\\n');\n\nTextureShader.defaultFragmentSrc = [\n    'precision lowp float;',\n\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n\n    'uniform sampler2D uSampler;',\n\n    'void main(void){',\n    '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;',\n    '}'\n].join('\\n');\n"]},"metadata":{},"sourceType":"script"}