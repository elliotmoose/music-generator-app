{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\n\nexport var FrequencyEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(FrequencyEnvelope, _Envelope);\n\n  var _super = _createSuper(FrequencyEnvelope);\n\n  function FrequencyEnvelope() {\n    var _this;\n\n    _classCallCheck(this, FrequencyEnvelope);\n\n    _this = _super.call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    _this.name = \"FrequencyEnvelope\";\n    var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    _this._octaves = options.octaves;\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._exponent = _this.input = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._scale = _this.output = new Scale({\n      context: _this.context,\n      min: _this._baseFrequency,\n      max: _this._baseFrequency * Math.pow(2, _this._octaves)\n    });\n\n    _this._sig.chain(_this._exponent, _this._scale);\n\n    return _this;\n  }\n\n  _createClass(FrequencyEnvelope, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyEnvelope.prototype), \"dispose\", this).call(this);\n\n      this._exponent.dispose();\n\n      this._scale.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"baseFrequency\",\n\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(min) {\n      var freq = this.toFrequency(min);\n      assertRange(freq, 0);\n      this._baseFrequency = freq;\n      this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      assertRange(octaves, 0);\n      this._octaves = octaves;\n      this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    }\n    /**\n     * The envelope's exponent value.\n     */\n\n  }, {\n    key: \"exponent\",\n    get: function get() {\n      return this._exponent.value;\n    },\n    set: function set(exponent) {\n      this._exponent.value = exponent;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Envelope.getDefaults(), {\n        baseFrequency: 200,\n        exponent: 1,\n        octaves: 4\n      });\n    }\n  }]);\n\n  return FrequencyEnvelope;\n}(Envelope);","map":{"version":3,"sources":["../../../../Tone/component/envelope/FrequencyEnvelope.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n    constructor() {\n        super(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n        this.name = \"FrequencyEnvelope\";\n        const options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n        this._octaves = options.octaves;\n        this._baseFrequency = this.toFrequency(options.baseFrequency);\n        this._exponent = this.input = new Pow({\n            context: this.context,\n            value: options.exponent\n        });\n        this._scale = this.output = new Scale({\n            context: this.context,\n            min: this._baseFrequency,\n            max: this._baseFrequency * Math.pow(2, this._octaves),\n        });\n        this._sig.chain(this._exponent, this._scale);\n    }\n    static getDefaults() {\n        return Object.assign(Envelope.getDefaults(), {\n            baseFrequency: 200,\n            exponent: 1,\n            octaves: 4,\n        });\n    }\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    get baseFrequency() {\n        return this._baseFrequency;\n    }\n    set baseFrequency(min) {\n        const freq = this.toFrequency(min);\n        assertRange(freq, 0);\n        this._baseFrequency = freq;\n        this._scale.min = this._baseFrequency;\n        // update the max value when the min changes\n        this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(octaves) {\n        assertRange(octaves, 0);\n        this._octaves = octaves;\n        this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    }\n    /**\n     * The envelope's exponent value.\n     */\n    get exponent() {\n        return this._exponent.value;\n    }\n    set exponent(exponent) {\n        this._exponent.value = exponent;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._exponent.dispose();\n        this._scale.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=FrequencyEnvelope.js.map"]},"metadata":{},"sourceType":"module"}