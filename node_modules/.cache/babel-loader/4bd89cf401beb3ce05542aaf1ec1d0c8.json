{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\n\nexport var CrossFade = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(CrossFade, _ToneAudioNode);\n\n  var _super = _createSuper(CrossFade);\n\n  function CrossFade() {\n    var _this;\n\n    _classCallCheck(this, CrossFade);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    _this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n\n    _this._panner = _this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n\n    _this._split = _this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n\n    _this._g2a = new GainToAudio({\n      context: _this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n\n    _this.a = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n\n    _this.b = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [_this.a, _this.b];\n    var options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    _this.fade = new Signal({\n      context: _this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(_assertThisInitialized(_this), \"fade\");\n\n    _this.context.getConstant(1).connect(_this._panner);\n\n    _this._panner.connect(_this._split); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n\n    _this._panner.channelCount = 1;\n    _this._panner.channelCountMode = \"explicit\";\n    connect(_this._split, _this.a.gain, 0);\n    connect(_this._split, _this.b.gain, 1);\n\n    _this.fade.chain(_this._g2a, _this._panner.pan);\n\n    _this.a.connect(_this.output);\n\n    _this.b.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(CrossFade, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(CrossFade.prototype), \"dispose\", this).call(this);\n\n      this.a.dispose();\n      this.b.dispose();\n      this.output.dispose();\n      this.fade.dispose();\n\n      this._g2a.dispose();\n\n      this._panner.disconnect();\n\n      this._split.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        fade: 0.5\n      });\n    }\n  }]);\n\n  return CrossFade;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/CrossFade.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n        this.name = \"CrossFade\";\n        /**\n         * The crossfading is done by a StereoPannerNode\n         */\n        this._panner = this.context.createStereoPanner();\n        /**\n         * Split the output of the panner node into two values used to control the gains.\n         */\n        this._split = this.context.createChannelSplitter(2);\n        /**\n         * Convert the fade value into an audio range value so it can be connected\n         * to the panner.pan AudioParam\n         */\n        this._g2a = new GainToAudio({ context: this.context });\n        /**\n         * The input which is at full level when fade = 0\n         */\n        this.a = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * The input which is at full level when fade = 1\n         */\n        this.b = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * The output is a mix between `a` and `b` at the ratio of `fade`\n         */\n        this.output = new Gain({ context: this.context });\n        this._internalChannels = [this.a, this.b];\n        const options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n        this.fade = new Signal({\n            context: this.context,\n            units: \"normalRange\",\n            value: options.fade,\n        });\n        readOnly(this, \"fade\");\n        this.context.getConstant(1).connect(this._panner);\n        this._panner.connect(this._split);\n        // this is necessary for standardized-audio-context\n        // doesn't make any difference for the native AudioContext\n        // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n        this._panner.channelCount = 1;\n        this._panner.channelCountMode = \"explicit\";\n        connect(this._split, this.a.gain, 0);\n        connect(this._split, this.b.gain, 1);\n        this.fade.chain(this._g2a, this._panner.pan);\n        this.a.connect(this.output);\n        this.b.connect(this.output);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            fade: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.a.dispose();\n        this.b.dispose();\n        this.output.dispose();\n        this.fade.dispose();\n        this._g2a.dispose();\n        this._panner.disconnect();\n        this._split.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=CrossFade.js.map"]},"metadata":{},"sourceType":"module"}