{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\n\nexport var DCMeter = /*#__PURE__*/function (_MeterBase) {\n  _inherits(DCMeter, _MeterBase);\n\n  var _super = _createSuper(DCMeter);\n\n  function DCMeter() {\n    var _this;\n\n    _classCallCheck(this, DCMeter);\n\n    _this = _super.call(this, optionsFromArguments(DCMeter.getDefaults(), arguments));\n    _this.name = \"DCMeter\";\n    _this._analyser.type = \"waveform\";\n    _this._analyser.size = 256;\n    return _this;\n  }\n  /**\n   * Get the signal value of the incoming signal\n   */\n\n\n  _createClass(DCMeter, [{\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this._analyser.getValue();\n\n      return value[0];\n    }\n  }]);\n\n  return DCMeter;\n}(MeterBase);","map":{"version":3,"sources":["../../../../Tone/component/analysis/DCMeter.ts"],"names":[],"mappings":";;;;AAAA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AAIA;;;;;;;;;;;;AAYG;;AACH,WAAa,OAAb;AAAA;;AAAA;;AAKC,qBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAA1B;AAJQ,UAAA,IAAA,GAAe,SAAf;AAMR,UAAK,SAAL,CAAe,IAAf,GAAsB,UAAtB;AACA,UAAK,SAAL,CAAe,IAAf,GAAsB,GAAtB;AAJD;AAKC;AAED;;AAEG;;;AAdJ;AAAA;AAAA,+BAeS;AACP,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,QAAf,EAAd;;AACA,aAAO,KAAK,CAAC,CAAD,CAAZ;AACA;AAlBF;;AAAA;AAAA,EAA6B,SAA7B","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase {\n    constructor() {\n        super(optionsFromArguments(DCMeter.getDefaults(), arguments));\n        this.name = \"DCMeter\";\n        this._analyser.type = \"waveform\";\n        this._analyser.size = 256;\n    }\n    /**\n     * Get the signal value of the incoming signal\n     */\n    getValue() {\n        const value = this._analyser.getValue();\n        return value[0];\n    }\n}\n//# sourceMappingURL=DCMeter.js.map"]},"metadata":{},"sourceType":"module"}