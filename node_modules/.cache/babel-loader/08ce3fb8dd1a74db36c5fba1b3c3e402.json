{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert a midi note into a pitch\n */\n\nfunction midiToPitch(midi) {\n  var octave = Math.floor(midi / 12) - 1;\n  return midiToPitchClass(midi) + octave.toString();\n}\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\n\n\nfunction midiToPitchClass(midi) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  var note = midi % 12;\n  return scaleIndexToNote[note];\n}\n/**\n * Convert a pitch class to a MIDI note\n */\n\n\nfunction pitchClassToMidi(pitch) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  return scaleIndexToNote.indexOf(pitch);\n}\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\n\n\nvar pitchToMidi = function () {\n  var regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n  var noteToScaleIndex = {\n    // tslint:disable-next-line: object-literal-sort-keys\n    cbb: -2,\n    cb: -1,\n    c: 0,\n    \"c#\": 1,\n    cx: 2,\n    dbb: 0,\n    db: 1,\n    d: 2,\n    \"d#\": 3,\n    dx: 4,\n    ebb: 2,\n    eb: 3,\n    e: 4,\n    \"e#\": 5,\n    ex: 6,\n    fbb: 3,\n    fb: 4,\n    f: 5,\n    \"f#\": 6,\n    fx: 7,\n    gbb: 5,\n    gb: 6,\n    g: 7,\n    \"g#\": 8,\n    gx: 9,\n    abb: 7,\n    ab: 8,\n    a: 9,\n    \"a#\": 10,\n    ax: 11,\n    bbb: 9,\n    bb: 10,\n    b: 11,\n    \"b#\": 12,\n    bx: 13\n  };\n  return function (note) {\n    var split = regexp.exec(note);\n    var pitch = split[1];\n    var octave = split[2];\n    var index = noteToScaleIndex[pitch.toLowerCase()];\n    return index + (parseInt(octave, 10) + 1) * 12;\n  };\n}();\n\nvar privateHeaderMap = new WeakMap();\n/**\n * A Note consists of a noteOn and noteOff event\n */\n\nvar Note =\n/** @class */\nfunction () {\n  function Note(noteOn, noteOff, header) {\n    privateHeaderMap.set(this, header);\n    this.midi = noteOn.midi;\n    this.velocity = noteOn.velocity;\n    this.noteOffVelocity = noteOff.velocity;\n    this.ticks = noteOn.ticks;\n    this.durationTicks = noteOff.ticks - noteOn.ticks;\n  }\n\n  Object.defineProperty(Note.prototype, \"name\", {\n    /**\n     * The note name and octave in scientific pitch notation, e.g. \"C4\"\n     */\n    get: function () {\n      return midiToPitch(this.midi);\n    },\n    set: function (n) {\n      this.midi = pitchToMidi(n);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"octave\", {\n    /**\n     * The notes octave number\n     */\n    get: function () {\n      return Math.floor(this.midi / 12) - 1;\n    },\n    set: function (o) {\n      var diff = o - this.octave;\n      this.midi += diff * 12;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"pitch\", {\n    /**\n     * The pitch class name. e.g. \"A\"\n     */\n    get: function () {\n      return midiToPitchClass(this.midi);\n    },\n    set: function (p) {\n      this.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"duration\", {\n    /**\n     * The duration of the segment in seconds\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n    },\n    set: function (d) {\n      var header = privateHeaderMap.get(this);\n      var noteEndTicks = header.secondsToTicks(this.time + d);\n      this.durationTicks = noteEndTicks - this.ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"time\", {\n    /**\n     * The time of the event in seconds\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks);\n    },\n    set: function (t) {\n      var header = privateHeaderMap.get(this);\n      this.ticks = header.secondsToTicks(t);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"bars\", {\n    /**\n     * The number of measures (and partial measures) to this beat.\n     * Takes into account time signature changes\n     * @readonly\n     */\n    get: function () {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToMeasures(this.ticks);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Note.prototype.toJSON = function () {\n    return {\n      duration: this.duration,\n      durationTicks: this.durationTicks,\n      midi: this.midi,\n      name: this.name,\n      ticks: this.ticks,\n      time: this.time,\n      velocity: this.velocity\n    };\n  };\n\n  return Note;\n}();\n\nexports.Note = Note;","map":{"version":3,"sources":["../src/Note.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert a midi note into a pitch\n */\nfunction midiToPitch(midi) {\n    var octave = Math.floor(midi / 12) - 1;\n    return midiToPitchClass(midi) + octave.toString();\n}\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\nfunction midiToPitchClass(midi) {\n    var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    var note = midi % 12;\n    return scaleIndexToNote[note];\n}\n/**\n * Convert a pitch class to a MIDI note\n */\nfunction pitchClassToMidi(pitch) {\n    var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    return scaleIndexToNote.indexOf(pitch);\n}\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nvar pitchToMidi = (function () {\n    var regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n    var noteToScaleIndex = {\n        // tslint:disable-next-line: object-literal-sort-keys\n        cbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n        dbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n        ebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n        fbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n        gbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n        abb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n        bbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n    };\n    return function (note) {\n        var split = regexp.exec(note);\n        var pitch = split[1];\n        var octave = split[2];\n        var index = noteToScaleIndex[pitch.toLowerCase()];\n        return index + (parseInt(octave, 10) + 1) * 12;\n    };\n}());\nvar privateHeaderMap = new WeakMap();\n/**\n * A Note consists of a noteOn and noteOff event\n */\nvar Note = /** @class */ (function () {\n    function Note(noteOn, noteOff, header) {\n        privateHeaderMap.set(this, header);\n        this.midi = noteOn.midi;\n        this.velocity = noteOn.velocity;\n        this.noteOffVelocity = noteOff.velocity;\n        this.ticks = noteOn.ticks;\n        this.durationTicks = noteOff.ticks - noteOn.ticks;\n    }\n    Object.defineProperty(Note.prototype, \"name\", {\n        /**\n         * The note name and octave in scientific pitch notation, e.g. \"C4\"\n         */\n        get: function () {\n            return midiToPitch(this.midi);\n        },\n        set: function (n) {\n            this.midi = pitchToMidi(n);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Note.prototype, \"octave\", {\n        /**\n         * The notes octave number\n         */\n        get: function () {\n            return Math.floor(this.midi / 12) - 1;\n        },\n        set: function (o) {\n            var diff = o - this.octave;\n            this.midi += diff * 12;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Note.prototype, \"pitch\", {\n        /**\n         * The pitch class name. e.g. \"A\"\n         */\n        get: function () {\n            return midiToPitchClass(this.midi);\n        },\n        set: function (p) {\n            this.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Note.prototype, \"duration\", {\n        /**\n         * The duration of the segment in seconds\n         */\n        get: function () {\n            var header = privateHeaderMap.get(this);\n            return header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n        },\n        set: function (d) {\n            var header = privateHeaderMap.get(this);\n            var noteEndTicks = header.secondsToTicks(this.time + d);\n            this.durationTicks = noteEndTicks - this.ticks;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Note.prototype, \"time\", {\n        /**\n         * The time of the event in seconds\n         */\n        get: function () {\n            var header = privateHeaderMap.get(this);\n            return header.ticksToSeconds(this.ticks);\n        },\n        set: function (t) {\n            var header = privateHeaderMap.get(this);\n            this.ticks = header.secondsToTicks(t);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Note.prototype, \"bars\", {\n        /**\n         * The number of measures (and partial measures) to this beat.\n         * Takes into account time signature changes\n         * @readonly\n         */\n        get: function () {\n            var header = privateHeaderMap.get(this);\n            return header.ticksToMeasures(this.ticks);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Note.prototype.toJSON = function () {\n        return {\n            duration: this.duration,\n            durationTicks: this.durationTicks,\n            midi: this.midi,\n            name: this.name,\n            ticks: this.ticks,\n            time: this.time,\n            velocity: this.velocity,\n        };\n    };\n    return Note;\n}());\nexports.Note = Note;\n//# sourceMappingURL=Note.js.map"]},"metadata":{},"sourceType":"script"}