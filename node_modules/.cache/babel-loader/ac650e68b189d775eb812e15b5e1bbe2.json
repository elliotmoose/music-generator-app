{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\n\nexport var LFOEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(LFOEffect, _Effect);\n\n  var _super = _createSuper(LFOEffect);\n\n  function LFOEffect(options) {\n    var _this;\n\n    _classCallCheck(this, LFOEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"LFOEffect\";\n    _this._lfo = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    _this.depth = _this._lfo.amplitude;\n    _this.frequency = _this._lfo.frequency;\n    _this.type = options.type;\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n    return _this;\n  }\n\n  _createClass(LFOEffect, [{\n    key: \"start\",\n\n    /**\n     * Start the effect.\n     */\n    value: function start(time) {\n      this._lfo.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the lfo\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfo.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfo.sync();\n\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfo.unsync();\n\n      return this;\n    }\n    /**\n     * The type of the LFO's oscillator: See [[Oscillator.type]]\n     * @example\n     * const autoFilter = new Tone.AutoFilter().start().toDestination();\n     * const noise = new Tone.Noise().start().connect(autoFilter);\n     * autoFilter.type = \"square\";\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LFOEffect.prototype), \"dispose\", this).call(this);\n\n      this._lfo.dispose();\n\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfo.type;\n    },\n    set: function set(type) {\n      this._lfo.type = type;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        frequency: 1,\n        type: \"sine\",\n        depth: 1\n      });\n    }\n  }]);\n\n  return LFOEffect;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/LFOEffect.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,MAAT,QAAsC,kBAAtC;AAEA,SAAS,GAAT,QAAoB,0BAApB;AAGA,SAAS,QAAT,QAAyB,wBAAzB;AASA;;AAEG;;AACH,WAAsB,SAAtB;AAAA;;AAAA;;AAoBC,qBAAY,OAAZ,EAAqC;AAAA;;AAAA;;AAEpC,8BAAM,OAAN;AApBQ,UAAA,IAAA,GAAe,WAAf;AAsBR,UAAK,IAAL,GAAY,IAAI,GAAJ,CAAQ;AACnB,MAAA,OAAO,EAAE,MAAK,OADK;AAEnB,MAAA,SAAS,EAAE,OAAO,CAAC,SAFA;AAGnB,MAAA,SAAS,EAAE,OAAO,CAAC;AAHA,KAAR,CAAZ;AAKA,UAAK,KAAL,GAAa,MAAK,IAAL,CAAU,SAAvB;AACA,UAAK,SAAL,GAAiB,MAAK,IAAL,CAAU,SAA3B;AAEA,UAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,IAAA,QAAQ,gCAAO,CAAC,WAAD,EAAc,OAAd,CAAP,CAAR;AAboC;AAcpC;;AAlCF;AAAA;;AA4CC;;AAEG;AA9CJ,0BA+CO,IA/CP,EA+CkB;AAChB,WAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB;;AACA,aAAO,IAAP;AACA;AAED;;AAEG;;AAtDJ;AAAA;AAAA,yBAuDM,IAvDN,EAuDiB;AACf,WAAK,IAAL,CAAU,IAAV,CAAe,IAAf;;AACA,aAAO,IAAP;AACA;AAED;;AAEG;;AA9DJ;AAAA;AAAA,2BA+DK;AACH,WAAK,IAAL,CAAU,IAAV;;AACA,aAAO,IAAP;AACA;AAED;;AAEG;;AAtEJ;AAAA;AAAA,6BAuEO;AACL,WAAK,IAAL,CAAU,MAAV;;AACA,aAAO,IAAP;AACA;AAED;;;;;;AAMG;;AAlFJ;AAAA;AAAA,8BA0FQ;AACN;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,SAAL,CAAe,OAAf;AACA,WAAK,KAAL,CAAW,OAAX;AACA,aAAO,IAAP;AACA;AAhGF;AAAA;AAAA,wBAmFS;AACP,aAAO,KAAK,IAAL,CAAU,IAAjB;AACA,KArFF;AAAA,sBAsFU,IAtFV,EAsFc;AACZ,WAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB;AACA;AAxFF;AAAA;AAAA,kCAoCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,SAAS,EAAE,CAD+B;AAE1C,QAAA,IAAI,EAAE,MAFoC;AAG1C,QAAA,KAAK,EAAE;AAHmC,OAApC,CAAP;AAKA;AA1CF;;AAAA;AAAA,EAA0E,MAA1E","sourceRoot":"","sourcesContent":["import { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\nexport class LFOEffect extends Effect {\n    constructor(options) {\n        super(options);\n        this.name = \"LFOEffect\";\n        this._lfo = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            amplitude: options.depth,\n        });\n        this.depth = this._lfo.amplitude;\n        this.frequency = this._lfo.frequency;\n        this.type = options.type;\n        readOnly(this, [\"frequency\", \"depth\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            frequency: 1,\n            type: \"sine\",\n            depth: 1,\n        });\n    }\n    /**\n     * Start the effect.\n     */\n    start(time) {\n        this._lfo.start(time);\n        return this;\n    }\n    /**\n     * Stop the lfo\n     */\n    stop(time) {\n        this._lfo.stop(time);\n        return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n    sync() {\n        this._lfo.sync();\n        return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n    unsync() {\n        this._lfo.unsync();\n        return this;\n    }\n    /**\n     * The type of the LFO's oscillator: See [[Oscillator.type]]\n     * @example\n     * const autoFilter = new Tone.AutoFilter().start().toDestination();\n     * const noise = new Tone.Noise().start().connect(autoFilter);\n     * autoFilter.type = \"square\";\n     */\n    get type() {\n        return this._lfo.type;\n    }\n    set type(type) {\n        this._lfo.type = type;\n    }\n    dispose() {\n        super.dispose();\n        this._lfo.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=LFOEffect.js.map"]},"metadata":{},"sourceType":"module"}