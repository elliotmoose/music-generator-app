{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport var PingPongDelay = /*#__PURE__*/function (_StereoXFeedbackEffec) {\n  _inherits(PingPongDelay, _StereoXFeedbackEffec);\n\n  var _super = _createSuper(PingPongDelay);\n\n  function PingPongDelay() {\n    var _this;\n\n    _classCallCheck(this, PingPongDelay);\n\n    _this = _super.call(this, optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    _this.name = \"PingPongDelay\";\n    var options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    _this._leftDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightPreDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this.delayTime = new Signal({\n      context: _this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    _this.connectEffectLeft(_this._leftDelay);\n\n    _this.connectEffectRight(_this._rightPreDelay, _this._rightDelay);\n\n    _this.delayTime.fan(_this._leftDelay.delayTime, _this._rightDelay.delayTime, _this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n\n    _this._feedbackL.disconnect();\n\n    _this._feedbackL.connect(_this._rightDelay);\n\n    readOnly(_assertThisInitialized(_this), [\"delayTime\"]);\n    return _this;\n  }\n\n  _createClass(PingPongDelay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PingPongDelay.prototype), \"dispose\", this).call(this);\n\n      this._leftDelay.dispose();\n\n      this._rightDelay.dispose();\n\n      this._rightPreDelay.dispose();\n\n      this.delayTime.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n        delayTime: 0.25,\n        maxDelay: 1\n      });\n    }\n  }]);\n\n  return PingPongDelay;\n}(StereoXFeedbackEffect);","map":{"version":3,"sources":["../../../Tone/effect/PingPongDelay.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,qBAAT,QAAoE,yBAApE;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;;;;;AAaG;;AACH,WAAa,aAAb;AAAA;;AAAA;;AA8BC,2BAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAA1B;AA9BQ,UAAA,IAAA,GAAe,eAAf;AA+BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAApC;AAEA,UAAK,UAAL,GAAkB,IAAI,KAAJ,CAAU;AAC3B,MAAA,OAAO,EAAE,MAAK,OADa;AAE3B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFS,KAAV,CAAlB;AAIA,UAAK,WAAL,GAAmB,IAAI,KAAJ,CAAU;AAC5B,MAAA,OAAO,EAAE,MAAK,OADc;AAE5B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFU,KAAV,CAAnB;AAIA,UAAK,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAC/B,MAAA,OAAO,EAAE,MAAK,OADiB;AAE/B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFa,KAAV,CAAtB;AAIA,UAAK,SAAL,GAAiB,IAAI,MAAJ,CAAW;AAC3B,MAAA,OAAO,EAAE,MAAK,OADa;AAE3B,MAAA,KAAK,EAAE,MAFoB;AAG3B,MAAA,KAAK,EAAE,OAAO,CAAC;AAHY,KAAX,CAAjB,CAjBD,CAuBC;;AACA,UAAK,iBAAL,CAAuB,MAAK,UAA5B;;AACA,UAAK,kBAAL,CAAwB,MAAK,cAA7B,EAA6C,MAAK,WAAlD;;AACA,UAAK,SAAL,CAAe,GAAf,CAAmB,MAAK,UAAL,CAAgB,SAAnC,EAA8C,MAAK,WAAL,CAAiB,SAA/D,EAA0E,MAAK,cAAL,CAAoB,SAA9F,EA1BD,CA2BC;;;AACA,UAAK,UAAL,CAAgB,UAAhB;;AACA,UAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAK,WAA7B;;AACA,IAAA,QAAQ,gCAAO,CAAC,WAAD,CAAP,CAAR;AA9BD;AA+BC;;AA7DF;AAAA;AAAA,8BAsEQ;AACN;;AACA,WAAK,UAAL,CAAgB,OAAhB;;AACA,WAAK,WAAL,CAAiB,OAAjB;;AACA,WAAK,cAAL,CAAoB,OAApB;;AACA,WAAK,SAAL,CAAe,OAAf;AACA,aAAO,IAAP;AACA;AA7EF;AAAA;AAAA,kCA+DmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,qBAAqB,CAAC,WAAtB,EAAd,EAAmD;AACzD,QAAA,SAAS,EAAE,IAD8C;AAEzD,QAAA,QAAQ,EAAE;AAF+C,OAAnD,CAAP;AAIA;AApEF;;AAAA;AAAA,EAAmC,qBAAnC","sourceRoot":"","sourcesContent":["import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect {\n    constructor() {\n        super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n        this.name = \"PingPongDelay\";\n        const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n        this._leftDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay,\n        });\n        this._rightDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay\n        });\n        this._rightPreDelay = new Delay({\n            context: this.context,\n            maxDelay: options.maxDelay\n        });\n        this.delayTime = new Signal({\n            context: this.context,\n            units: \"time\",\n            value: options.delayTime,\n        });\n        // connect it up\n        this.connectEffectLeft(this._leftDelay);\n        this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n        // rearranged the feedback to be after the rightPreDelay\n        this._feedbackL.disconnect();\n        this._feedbackL.connect(this._rightDelay);\n        readOnly(this, [\"delayTime\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n            delayTime: 0.25,\n            maxDelay: 1\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._leftDelay.dispose();\n        this._rightDelay.dispose();\n        this._rightPreDelay.dispose();\n        this.delayTime.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PingPongDelay.js.map"]},"metadata":{},"sourceType":"module"}