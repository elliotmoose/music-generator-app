{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\n\nexport var Effect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Effect, _ToneAudioNode);\n\n  var _super = _createSuper(Effect);\n\n  function Effect(options) {\n    var _this;\n\n    _classCallCheck(this, Effect);\n\n    _this = _super.call(this, options);\n    _this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n\n    _this._dryWet = new CrossFade({\n      context: _this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n\n    _this.wet = _this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n\n    _this.effectSend = new Gain({\n      context: _this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n\n    _this.effectReturn = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect input node\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect output\n     */\n\n    _this.output = _this._dryWet; // connections\n\n    _this.input.fan(_this._dryWet.a, _this.effectSend);\n\n    _this.effectReturn.connect(_this._dryWet.b);\n\n    _this.wet.setValueAtTime(options.wet, 0);\n\n    _this._internalChannels = [_this.effectReturn, _this.effectSend];\n    readOnly(_assertThisInitialized(_this), \"wet\");\n    return _this;\n  }\n\n  _createClass(Effect, [{\n    key: \"connectEffect\",\n\n    /**\n     * chains the effect in between the effectSend and effectReturn\n     */\n    value: function connectEffect(effect) {\n      // add it to the internal channels\n      this._internalChannels.push(effect);\n\n      this.effectSend.chain(effect, this.effectReturn);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Effect.prototype), \"dispose\", this).call(this);\n\n      this._dryWet.dispose();\n\n      this.effectSend.dispose();\n      this.effectReturn.dispose();\n      this.wet.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n\n  return Effect;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../Tone/effect/Effect.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,SAAT,QAA0B,gCAA1B;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,aAAT,QAAoD,+BAApD;AAEA,SAAS,QAAT,QAAyB,wBAAzB;AAMA;;;;AAIG;;AACH,WAAsB,MAAtB;AAAA;;AAAA;;AAqCC,kBAAY,OAAZ,EAAkC;AAAA;;AAAA;;AACjC,8BAAM,OAAN;AAnCQ,UAAA,IAAA,GAAe,QAAf;AAET;;AAEG;;AACK,UAAA,OAAA,GAAqB,IAAI,SAAJ,CAAc;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAd,CAArB;AAER;;;;AAIG;;AACH,UAAA,GAAA,GAA6B,MAAK,OAAL,CAAa,IAA1C;AAEA;;AAEG;;AACO,UAAA,UAAA,GAAmB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAnB;AAEV;;AAEG;;AACO,UAAA,YAAA,GAAqB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAArB;AAEV;;AAEG;;AACH,UAAA,KAAA,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAd;AAEA;;AAEG;;AACH,UAAA,MAAA,GAAS,MAAK,OAAd,CAEkC,CAGjC;;AACA,UAAK,KAAL,CAAW,GAAX,CAAe,MAAK,OAAL,CAAa,CAA5B,EAA+B,MAAK,UAApC;;AACA,UAAK,YAAL,CAAkB,OAAlB,CAA0B,MAAK,OAAL,CAAa,CAAvC;;AACA,UAAK,GAAL,CAAS,cAAT,CAAwB,OAAO,CAAC,GAAhC,EAAqC,CAArC;;AACA,UAAK,iBAAL,GAAyB,CAAC,MAAK,YAAN,EAAoB,MAAK,UAAzB,CAAzB;AACA,IAAA,QAAQ,gCAAO,KAAP,CAAR;AARiC;AASjC;;AA9CF;AAAA;;AAsDC;;AAEG;AAxDJ,kCAyDyB,MAzDzB,EAyD0D;AACxD;AACA,WAAK,iBAAL,CAAuB,IAAvB,CAA4B,MAA5B;;AACA,WAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAtB,EAA8B,KAAK,YAAnC;AACA,aAAO,IAAP;AACA;AA9DF;AAAA;AAAA,8BAgEQ;AACN;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,UAAL,CAAgB,OAAhB;AACA,WAAK,YAAL,CAAkB,OAAlB;AACA,WAAK,GAAL,CAAS,OAAT;AACA,aAAO,IAAP;AACA;AAvEF;AAAA;AAAA,kCAgDmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,GAAG,EAAE;AAD4C,OAA3C,CAAP;AAGA;AApDF;;AAAA;AAAA,EACS,aADT","sourceRoot":"","sourcesContent":["import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport class Effect extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = \"Effect\";\n        /**\n         * the drywet knob to control the amount of effect\n         */\n        this._dryWet = new CrossFade({ context: this.context });\n        /**\n         * The wet control is how much of the effected\n         * will pass through to the output. 1 = 100% effected\n         * signal, 0 = 100% dry signal.\n         */\n        this.wet = this._dryWet.fade;\n        /**\n         * connect the effectSend to the input of hte effect\n         */\n        this.effectSend = new Gain({ context: this.context });\n        /**\n         * connect the output of the effect to the effectReturn\n         */\n        this.effectReturn = new Gain({ context: this.context });\n        /**\n         * The effect input node\n         */\n        this.input = new Gain({ context: this.context });\n        /**\n         * The effect output\n         */\n        this.output = this._dryWet;\n        // connections\n        this.input.fan(this._dryWet.a, this.effectSend);\n        this.effectReturn.connect(this._dryWet.b);\n        this.wet.setValueAtTime(options.wet, 0);\n        this._internalChannels = [this.effectReturn, this.effectSend];\n        readOnly(this, \"wet\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            wet: 1,\n        });\n    }\n    /**\n     * chains the effect in between the effectSend and effectReturn\n     */\n    connectEffect(effect) {\n        // add it to the internal channels\n        this._internalChannels.push(effect);\n        this.effectSend.chain(effect, this.effectReturn);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._dryWet.dispose();\n        this.effectSend.dispose();\n        this.effectReturn.dispose();\n        this.wet.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Effect.js.map"]},"metadata":{},"sourceType":"module"}