{"ast":null,"code":"var utils = require('../utils'),\n    math = require('../math'),\n    CONST = require('../const'),\n    EventEmitter = require('eventemitter3');\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @param system {string} The name of the system this renderer is for.\n * @param [width=800] {number} the width of the canvas view\n * @param [height=600] {number} the height of the canvas view\n * @param [options] {object} The optional renderer parameters\n * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n * @param [options.autoResize=false] {boolean} If the render view is automatically resized, default false\n * @param [options.antialias=false] {boolean} sets antialias (only applicable in chrome at the moment)\n * @param [options.resolution=1] {number} the resolution of the renderer retina would be 2\n * @param [options.clearBeforeRender=true] {boolean} This sets if the CanvasRenderer will clear the canvas or\n *      not before the new render pass.\n */\n\n\nfunction SystemRenderer(system, width, height, options) {\n  EventEmitter.call(this);\n  utils.sayHello(system); // prepare options\n\n  if (options) {\n    for (var i in CONST.DEFAULT_RENDER_OPTIONS) {\n      if (typeof options[i] === 'undefined') {\n        options[i] = CONST.DEFAULT_RENDER_OPTIONS[i];\n      }\n    }\n  } else {\n    options = CONST.DEFAULT_RENDER_OPTIONS;\n  }\n  /**\n   * The type of the renderer.\n   *\n   * @member {RENDERER_TYPE}\n   * @default CONT.RENDERER_TYPE.UNKNOWN\n   */\n\n\n  this.type = CONST.RENDERER_TYPE.UNKNOWN;\n  /**\n   * The width of the canvas view\n   *\n   * @member {number}\n   * @default 800\n   */\n\n  this.width = width || 800;\n  /**\n   * The height of the canvas view\n   *\n   * @member {number}\n   * @default 600\n   */\n\n  this.height = height || 600;\n  /**\n   * The canvas element that everything is drawn to\n   *\n   * @member {HTMLCanvasElement}\n   */\n\n  this.view = options.view || document.createElement('canvas');\n  /**\n   * The resolution of the renderer\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  this.resolution = options.resolution;\n  /**\n   * Whether the render view is transparent\n   *\n   * @member {boolean}\n   */\n\n  this.transparent = options.transparent;\n  /**\n   * Whether the render view should be resized automatically\n   *\n   * @member {boolean}\n   */\n\n  this.autoResize = options.autoResize || false;\n  /**\n   * Tracks the blend modes useful for this renderer.\n   *\n   * @member {object<string, mixed>}\n   */\n\n  this.blendModes = null;\n  /**\n   * The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.\n   *\n   * @member {boolean}\n   */\n\n  this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n  /**\n   * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n   * If the scene is NOT transparent Pixi will use a canvas sized fillRect operation every frame to set the canvas background color.\n   * If the scene is transparent Pixi will use clearRect to clear the canvas every frame.\n   * Disable this by setting this to false. For example if your game has a canvas filling background image you often don't need this set.\n   *\n   * @member {boolean}\n   * @default\n   */\n\n  this.clearBeforeRender = options.clearBeforeRender;\n  /**\n   * The background color as a number.\n   *\n   * @member {number}\n   * @private\n   */\n\n  this._backgroundColor = 0x000000;\n  /**\n   * The background color as an [R, G, B] array.\n   *\n   * @member {number[]}\n   * @private\n   */\n\n  this._backgroundColorRgb = [0, 0, 0];\n  /**\n   * The background color as a string.\n   *\n   * @member {string}\n   * @private\n   */\n\n  this._backgroundColorString = '#000000';\n  this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n  /**\n   * This temporary display object used as the parent of the currently being rendered item\n   * @member {DisplayObject}\n   * @private\n   */\n\n  this._tempDisplayObjectParent = {\n    worldTransform: new math.Matrix(),\n    worldAlpha: 1,\n    children: []\n  }; //\n\n  this._lastObjectRendered = this._tempDisplayObjectParent;\n} // constructor\n\n\nSystemRenderer.prototype = Object.create(EventEmitter.prototype);\nSystemRenderer.prototype.constructor = SystemRenderer;\nmodule.exports = SystemRenderer;\nObject.defineProperties(SystemRenderer.prototype, {\n  /**\n   * The background color to fill if not transparent\n   *\n   * @member {number}\n   * @memberof SystemRenderer#\n   */\n  backgroundColor: {\n    get: function () {\n      return this._backgroundColor;\n    },\n    set: function (val) {\n      this._backgroundColor = val;\n      this._backgroundColorString = utils.hex2string(val);\n      utils.hex2rgb(val, this._backgroundColorRgb);\n    }\n  }\n});\n/**\n * Resizes the canvas view to the specified width and height\n *\n * @param width {number} the new width of the canvas view\n * @param height {number} the new height of the canvas view\n */\n\nSystemRenderer.prototype.resize = function (width, height) {\n  this.width = width * this.resolution;\n  this.height = height * this.resolution;\n  this.view.width = this.width;\n  this.view.height = this.height;\n\n  if (this.autoResize) {\n    this.view.style.width = this.width / this.resolution + 'px';\n    this.view.style.height = this.height / this.resolution + 'px';\n  }\n};\n/**\n * Removes everything from the renderer and optionally removes the Canvas DOM element.\n *\n * @param [removeView=false] {boolean} Removes the Canvas element from the DOM.\n */\n\n\nSystemRenderer.prototype.destroy = function (removeView) {\n  if (removeView && this.view.parent) {\n    this.view.parent.removeChild(this.view);\n  }\n\n  this.type = CONST.RENDERER_TYPE.UNKNOWN;\n  this.width = 0;\n  this.height = 0;\n  this.view = null;\n  this.resolution = 0;\n  this.transparent = false;\n  this.autoResize = false;\n  this.blendModes = null;\n  this.preserveDrawingBuffer = false;\n  this.clearBeforeRender = false;\n  this._backgroundColor = 0;\n  this._backgroundColorRgb = null;\n  this._backgroundColorString = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/SystemRenderer.js"],"names":["utils","require","math","CONST","EventEmitter","SystemRenderer","system","width","height","options","call","sayHello","i","DEFAULT_RENDER_OPTIONS","type","RENDERER_TYPE","UNKNOWN","view","document","createElement","resolution","transparent","autoResize","blendModes","preserveDrawingBuffer","clearBeforeRender","_backgroundColor","_backgroundColorRgb","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","worldTransform","Matrix","worldAlpha","children","_lastObjectRendered","prototype","Object","create","constructor","module","exports","defineProperties","get","set","val","hex2string","hex2rgb","resize","style","destroy","removeView","parent","removeChild"],"mappings":"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","sourcesContent":["var utils = require('../utils'),\n    math = require('../math'),\n    CONST = require('../const'),\n    EventEmitter = require('eventemitter3');\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @param system {string} The name of the system this renderer is for.\n * @param [width=800] {number} the width of the canvas view\n * @param [height=600] {number} the height of the canvas view\n * @param [options] {object} The optional renderer parameters\n * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n * @param [options.autoResize=false] {boolean} If the render view is automatically resized, default false\n * @param [options.antialias=false] {boolean} sets antialias (only applicable in chrome at the moment)\n * @param [options.resolution=1] {number} the resolution of the renderer retina would be 2\n * @param [options.clearBeforeRender=true] {boolean} This sets if the CanvasRenderer will clear the canvas or\n *      not before the new render pass.\n */\nfunction SystemRenderer(system, width, height, options)\n{\n    EventEmitter.call(this);\n\n    utils.sayHello(system);\n\n    // prepare options\n    if (options)\n    {\n        for (var i in CONST.DEFAULT_RENDER_OPTIONS)\n        {\n            if (typeof options[i] === 'undefined')\n            {\n                options[i] = CONST.DEFAULT_RENDER_OPTIONS[i];\n            }\n        }\n    }\n    else\n    {\n        options = CONST.DEFAULT_RENDER_OPTIONS;\n    }\n\n    /**\n     * The type of the renderer.\n     *\n     * @member {RENDERER_TYPE}\n     * @default CONT.RENDERER_TYPE.UNKNOWN\n     */\n    this.type = CONST.RENDERER_TYPE.UNKNOWN;\n\n    /**\n     * The width of the canvas view\n     *\n     * @member {number}\n     * @default 800\n     */\n    this.width = width || 800;\n\n    /**\n     * The height of the canvas view\n     *\n     * @member {number}\n     * @default 600\n     */\n    this.height = height || 600;\n\n    /**\n     * The canvas element that everything is drawn to\n     *\n     * @member {HTMLCanvasElement}\n     */\n    this.view = options.view || document.createElement('canvas');\n\n    /**\n     * The resolution of the renderer\n     *\n     * @member {number}\n     * @default 1\n     */\n    this.resolution = options.resolution;\n\n    /**\n     * Whether the render view is transparent\n     *\n     * @member {boolean}\n     */\n    this.transparent = options.transparent;\n\n    /**\n     * Whether the render view should be resized automatically\n     *\n     * @member {boolean}\n     */\n    this.autoResize = options.autoResize || false;\n\n    /**\n     * Tracks the blend modes useful for this renderer.\n     *\n     * @member {object<string, mixed>}\n     */\n    this.blendModes = null;\n\n    /**\n     * The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.\n     *\n     * @member {boolean}\n     */\n    this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent Pixi will use a canvas sized fillRect operation every frame to set the canvas background color.\n     * If the scene is transparent Pixi will use clearRect to clear the canvas every frame.\n     * Disable this by setting this to false. For example if your game has a canvas filling background image you often don't need this set.\n     *\n     * @member {boolean}\n     * @default\n     */\n    this.clearBeforeRender = options.clearBeforeRender;\n\n    /**\n     * The background color as a number.\n     *\n     * @member {number}\n     * @private\n     */\n    this._backgroundColor = 0x000000;\n\n    /**\n     * The background color as an [R, G, B] array.\n     *\n     * @member {number[]}\n     * @private\n     */\n    this._backgroundColorRgb = [0, 0, 0];\n\n    /**\n     * The background color as a string.\n     *\n     * @member {string}\n     * @private\n     */\n    this._backgroundColorString = '#000000';\n\n    this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n    /**\n     * This temporary display object used as the parent of the currently being rendered item\n     * @member {DisplayObject}\n     * @private\n     */\n    this._tempDisplayObjectParent = {worldTransform:new math.Matrix(), worldAlpha:1, children:[]};\n\n    //\n    this._lastObjectRendered = this._tempDisplayObjectParent;\n}\n\n// constructor\nSystemRenderer.prototype = Object.create(EventEmitter.prototype);\nSystemRenderer.prototype.constructor = SystemRenderer;\nmodule.exports = SystemRenderer;\n\nObject.defineProperties(SystemRenderer.prototype, {\n    /**\n     * The background color to fill if not transparent\n     *\n     * @member {number}\n     * @memberof SystemRenderer#\n     */\n    backgroundColor:\n    {\n        get: function ()\n        {\n            return this._backgroundColor;\n        },\n        set: function (val)\n        {\n            this._backgroundColor = val;\n            this._backgroundColorString = utils.hex2string(val);\n            utils.hex2rgb(val, this._backgroundColorRgb);\n        }\n    }\n});\n\n/**\n * Resizes the canvas view to the specified width and height\n *\n * @param width {number} the new width of the canvas view\n * @param height {number} the new height of the canvas view\n */\nSystemRenderer.prototype.resize = function (width, height) {\n    this.width = width * this.resolution;\n    this.height = height * this.resolution;\n\n    this.view.width = this.width;\n    this.view.height = this.height;\n\n    if (this.autoResize)\n    {\n        this.view.style.width = this.width / this.resolution + 'px';\n        this.view.style.height = this.height / this.resolution + 'px';\n    }\n};\n\n/**\n * Removes everything from the renderer and optionally removes the Canvas DOM element.\n *\n * @param [removeView=false] {boolean} Removes the Canvas element from the DOM.\n */\nSystemRenderer.prototype.destroy = function (removeView) {\n    if (removeView && this.view.parent)\n    {\n        this.view.parent.removeChild(this.view);\n    }\n\n    this.type = CONST.RENDERER_TYPE.UNKNOWN;\n\n    this.width = 0;\n    this.height = 0;\n\n    this.view = null;\n\n    this.resolution = 0;\n\n    this.transparent = false;\n\n    this.autoResize = false;\n\n    this.blendModes = null;\n\n    this.preserveDrawingBuffer = false;\n    this.clearBeforeRender = false;\n\n    this._backgroundColor = 0;\n    this._backgroundColorRgb = null;\n    this._backgroundColorString = null;\n};\n"]},"metadata":{},"sourceType":"script"}