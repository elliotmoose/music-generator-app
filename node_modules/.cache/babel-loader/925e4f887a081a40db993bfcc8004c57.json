{"ast":null,"code":"/**\n * Creates a Canvas element of the given size.\n *\n * @class\n * @memberof PIXI\n * @param width {number} the width for the newly created canvas\n * @param height {number} the height for the newly created canvas\n */\nfunction CanvasBuffer(width, height) {\n  /**\n   * The Canvas object that belongs to this CanvasBuffer.\n   *\n   * @member {HTMLCanvasElement}\n   */\n  this.canvas = document.createElement('canvas');\n  /**\n   * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n   *\n   * @member {CanvasRenderingContext2D}\n   */\n\n  this.context = this.canvas.getContext('2d');\n  this.canvas.width = width;\n  this.canvas.height = height;\n}\n\nCanvasBuffer.prototype.constructor = CanvasBuffer;\nmodule.exports = CanvasBuffer;\nObject.defineProperties(CanvasBuffer.prototype, {\n  /**\n   * The width of the canvas buffer in pixels.\n   *\n   * @member {number}\n   * @memberof CanvasBuffer#\n   */\n  width: {\n    get: function () {\n      return this.canvas.width;\n    },\n    set: function (val) {\n      this.canvas.width = val;\n    }\n  },\n\n  /**\n   * The height of the canvas buffer in pixels.\n   *\n   * @member {number}\n   * @memberof CanvasBuffer#\n   */\n  height: {\n    get: function () {\n      return this.canvas.height;\n    },\n    set: function (val) {\n      this.canvas.height = val;\n    }\n  }\n});\n/**\n * Clears the canvas that was created by the CanvasBuffer class.\n *\n * @private\n */\n\nCanvasBuffer.prototype.clear = function () {\n  this.context.setTransform(1, 0, 0, 1, 0, 0);\n  this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n};\n/**\n * Resizes the canvas to the specified width and height.\n *\n * @param width {number} the new width of the canvas\n * @param height {number} the new height of the canvas\n */\n\n\nCanvasBuffer.prototype.resize = function (width, height) {\n  this.canvas.width = width;\n  this.canvas.height = height;\n};\n/**\n * Destroys this canvas.\n *\n */\n\n\nCanvasBuffer.prototype.destroy = function () {\n  this.context = null;\n  this.canvas = null;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/canvas/utils/CanvasBuffer.js"],"names":["CanvasBuffer","width","height","canvas","document","createElement","context","getContext","prototype","constructor","module","exports","Object","defineProperties","get","set","val","clear","setTransform","clearRect","resize","destroy"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EACA;AACI;AACJ;AACA;AACA;AACA;AACI,OAAKC,MAAL,GAAcC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;AAEA,OAAKJ,MAAL,CAAYF,KAAZ,GAAoBA,KAApB;AACA,OAAKE,MAAL,CAAYD,MAAZ,GAAqBA,MAArB;AACH;;AAEDF,YAAY,CAACQ,SAAb,CAAuBC,WAAvB,GAAqCT,YAArC;AACAU,MAAM,CAACC,OAAP,GAAiBX,YAAjB;AAEAY,MAAM,CAACC,gBAAP,CAAwBb,YAAY,CAACQ,SAArC,EAAgD;AAC5C;AACJ;AACA;AACA;AACA;AACA;AACIP,EAAAA,KAAK,EAAE;AACHa,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKX,MAAL,CAAYF,KAAnB;AACH,KAJE;AAKHc,IAAAA,GAAG,EAAE,UAAUC,GAAV,EACL;AACI,WAAKb,MAAL,CAAYF,KAAZ,GAAoBe,GAApB;AACH;AARE,GAPqC;;AAiB5C;AACJ;AACA;AACA;AACA;AACA;AACId,EAAAA,MAAM,EAAE;AACJY,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKX,MAAL,CAAYD,MAAnB;AACH,KAJG;AAKJa,IAAAA,GAAG,EAAE,UAAUC,GAAV,EACL;AACI,WAAKb,MAAL,CAAYD,MAAZ,GAAqBc,GAArB;AACH;AARG;AAvBoC,CAAhD;AAmCA;AACA;AACA;AACA;AACA;;AACAhB,YAAY,CAACQ,SAAb,CAAuBS,KAAvB,GAA+B,YAC/B;AACI,OAAKX,OAAL,CAAaY,YAAb,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC;AACA,OAAKZ,OAAL,CAAaa,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,EAA4B,KAAKhB,MAAL,CAAYF,KAAxC,EAA+C,KAAKE,MAAL,CAAYD,MAA3D;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAF,YAAY,CAACQ,SAAb,CAAuBY,MAAvB,GAAgC,UAAUnB,KAAV,EAAiBC,MAAjB,EAChC;AACI,OAAKC,MAAL,CAAYF,KAAZ,GAAoBA,KAApB;AACA,OAAKE,MAAL,CAAYD,MAAZ,GAAqBA,MAArB;AACH,CAJD;AAMA;AACA;AACA;AACA;;;AACAF,YAAY,CAACQ,SAAb,CAAuBa,OAAvB,GAAiC,YACjC;AACI,OAAKf,OAAL,GAAe,IAAf;AACA,OAAKH,MAAL,GAAc,IAAd;AACH,CAJD","sourcesContent":["/**\n * Creates a Canvas element of the given size.\n *\n * @class\n * @memberof PIXI\n * @param width {number} the width for the newly created canvas\n * @param height {number} the height for the newly created canvas\n */\nfunction CanvasBuffer(width, height)\n{\n    /**\n     * The Canvas object that belongs to this CanvasBuffer.\n     *\n     * @member {HTMLCanvasElement}\n     */\n    this.canvas = document.createElement('canvas');\n\n    /**\n     * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n    this.context = this.canvas.getContext('2d');\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n}\n\nCanvasBuffer.prototype.constructor = CanvasBuffer;\nmodule.exports = CanvasBuffer;\n\nObject.defineProperties(CanvasBuffer.prototype, {\n    /**\n     * The width of the canvas buffer in pixels.\n     *\n     * @member {number}\n     * @memberof CanvasBuffer#\n     */\n    width: {\n        get: function ()\n        {\n            return this.canvas.width;\n        },\n        set: function (val)\n        {\n            this.canvas.width = val;\n        }\n    },\n    /**\n     * The height of the canvas buffer in pixels.\n     *\n     * @member {number}\n     * @memberof CanvasBuffer#\n     */\n    height: {\n        get: function ()\n        {\n            return this.canvas.height;\n        },\n        set: function (val)\n        {\n            this.canvas.height = val;\n        }\n    }\n});\n\n/**\n * Clears the canvas that was created by the CanvasBuffer class.\n *\n * @private\n */\nCanvasBuffer.prototype.clear = function ()\n{\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n    this.context.clearRect(0,0, this.canvas.width, this.canvas.height);\n};\n\n/**\n * Resizes the canvas to the specified width and height.\n *\n * @param width {number} the new width of the canvas\n * @param height {number} the new height of the canvas\n */\nCanvasBuffer.prototype.resize = function (width, height)\n{\n    this.canvas.width = width;\n    this.canvas.height = height;\n};\n\n/**\n * Destroys this canvas.\n *\n */\nCanvasBuffer.prototype.destroy = function ()\n{\n    this.context = null;\n    this.canvas = null;\n};\n"]},"metadata":{},"sourceType":"script"}