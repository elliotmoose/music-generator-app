{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\n\nexport var Waveform = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Waveform, _MeterBase);\n\n  var _super = _createSuper(Waveform);\n\n  function Waveform() {\n    var _this;\n\n    _classCallCheck(this, Waveform);\n\n    _this = _super.call(this, optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n    _this.name = \"Waveform\";\n    var options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    _this._analyser.type = \"waveform\";\n    _this.size = options.size;\n    return _this;\n  }\n\n  _createClass(Waveform, [{\n    key: \"getValue\",\n\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    value: function getValue() {\n      return this._analyser.getValue();\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]].\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analyser.size;\n    },\n    set: function set(size) {\n      this._analyser.size = size;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        size: 1024\n      });\n    }\n  }]);\n\n  return Waveform;\n}(MeterBase);","map":{"version":3,"sources":["../../../../Tone/component/analysis/Waveform.ts"],"names":[],"mappings":";;;;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AASA;;;AAGG;;AACH,WAAa,QAAb;AAAA;;AAAA;;AASC,sBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAA1B;AARQ,UAAA,IAAA,GAAe,UAAf;AASR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAApC;AAEA,UAAK,SAAL,CAAe,IAAf,GAAsB,UAAtB;AACA,UAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AALD;AAMC;;AAfF;AAAA;;AAuBC;;;AAGG;AA1BJ,+BA2BS;AACP,aAAO,KAAK,SAAL,CAAe,QAAf,EAAP;AACA;AAED;;;AAGG;;AAlCJ;AAAA;AAAA,wBAmCS;AACP,aAAO,KAAK,SAAL,CAAe,IAAtB;AACA,KArCF;AAAA,sBAsCU,IAtCV,EAsCc;AACZ,WAAK,SAAL,CAAe,IAAf,GAAsB,IAAtB;AACA;AAxCF;AAAA;AAAA,kCAiBmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,QAAA,IAAI,EAAE;AADuC,OAAvC,CAAP;AAGA;AArBF;;AAAA;AAAA,EAA8B,SAA9B","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase {\n    constructor() {\n        super(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n        this.name = \"Waveform\";\n        const options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n        this._analyser.type = \"waveform\";\n        this.size = options.size;\n    }\n    static getDefaults() {\n        return Object.assign(MeterBase.getDefaults(), {\n            size: 1024,\n        });\n    }\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    getValue() {\n        return this._analyser.getValue();\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]].\n     */\n    get size() {\n        return this._analyser.size;\n    }\n    set size(size) {\n        this._analyser.size = size;\n    }\n}\n//# sourceMappingURL=Waveform.js.map"]},"metadata":{},"sourceType":"module"}