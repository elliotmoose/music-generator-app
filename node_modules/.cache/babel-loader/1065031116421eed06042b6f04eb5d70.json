{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\n\nexport var TickParam = /*#__PURE__*/function (_Param) {\n  _inherits(TickParam, _Param);\n\n  var _super = _createSuper(TickParam);\n\n  function TickParam() {\n    var _this;\n\n    _classCallCheck(this, TickParam);\n\n    _this = _super.call(this, optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n    _this.name = \"TickParam\";\n    /**\n     * The timeline which tracks all of the automations.\n     */\n\n    _this._events = new Timeline(Infinity);\n    /**\n     * The internal holder for the multiplier value\n     */\n\n    _this._multiplier = 1;\n    var options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]); // set the multiplier\n\n    _this._multiplier = options.multiplier; // clear the ticks from the beginning\n\n    _this._events.cancel(0); // set an initial event\n\n\n    _this._events.add({\n      ticks: 0,\n      time: 0,\n      type: \"setValueAtTime\",\n      value: _this._fromType(options.value)\n    });\n\n    _this.setValueAtTime(options.value, 0);\n\n    return _this;\n  }\n\n  _createClass(TickParam, [{\n    key: \"setTargetAtTime\",\n    value: function setTargetAtTime(value, time, constant) {\n      // approximate it with multiple linear ramps\n      time = this.toSeconds(time);\n      this.setRampPoint(time);\n\n      var computedValue = this._fromType(value); // start from previously scheduled value\n\n\n      var prevEvent = this._events.get(time);\n\n      var segments = Math.round(Math.max(1 / constant, 1));\n\n      for (var i = 0; i <= segments; i++) {\n        var segTime = constant * i + time;\n\n        var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\n        this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setValueAtTime\",\n    value: function setValueAtTime(value, time) {\n      var computedTime = this.toSeconds(time);\n\n      _get(_getPrototypeOf(TickParam.prototype), \"setValueAtTime\", this).call(this, value, time);\n\n      var event = this._events.get(computedTime);\n\n      var previousEvent = this._events.previousEvent(event);\n\n      var ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n      event.ticks = Math.max(ticksUntilTime, 0);\n      return this;\n    }\n  }, {\n    key: \"linearRampToValueAtTime\",\n    value: function linearRampToValueAtTime(value, time) {\n      var computedTime = this.toSeconds(time);\n\n      _get(_getPrototypeOf(TickParam.prototype), \"linearRampToValueAtTime\", this).call(this, value, time);\n\n      var event = this._events.get(computedTime);\n\n      var previousEvent = this._events.previousEvent(event);\n\n      var ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n      event.ticks = Math.max(ticksUntilTime, 0);\n      return this;\n    }\n  }, {\n    key: \"exponentialRampToValueAtTime\",\n    value: function exponentialRampToValueAtTime(value, time) {\n      // aproximate it with multiple linear ramps\n      time = this.toSeconds(time);\n\n      var computedVal = this._fromType(value); // start from previously scheduled value\n\n\n      var prevEvent = this._events.get(time); // approx 10 segments per second\n\n\n      var segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n      var segmentDur = (time - prevEvent.time) / segments;\n\n      for (var i = 0; i <= segments; i++) {\n        var segTime = segmentDur * i + prevEvent.time;\n\n        var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\n        this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n      }\n\n      return this;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  event The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n\n  }, {\n    key: \"_getTicksUntilEvent\",\n    value: function _getTicksUntilEvent(event, time) {\n      if (event === null) {\n        event = {\n          ticks: 0,\n          time: 0,\n          type: \"setValueAtTime\",\n          value: 0\n        };\n      } else if (isUndef(event.ticks)) {\n        var previousEvent = this._events.previousEvent(event);\n\n        event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n      }\n\n      var val0 = this._fromType(this.getValueAtTime(event.time));\n\n      var val1 = this._fromType(this.getValueAtTime(time)); // if it's right on the line, take the previous value\n\n\n      var onTheLineEvent = this._events.get(time);\n\n      if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n        val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n      }\n\n      return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  time The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n\n  }, {\n    key: \"getTicksAtTime\",\n    value: function getTicksAtTime(time) {\n      var computedTime = this.toSeconds(time);\n\n      var event = this._events.get(computedTime);\n\n      return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n    }\n    /**\n     * Return the elapsed time of the number of ticks from the given time\n     * @param ticks The number of ticks to calculate\n     * @param  time The time to get the next tick from\n     * @return The duration of the number of ticks from the given time in seconds\n     */\n\n  }, {\n    key: \"getDurationOfTicks\",\n    value: function getDurationOfTicks(ticks, time) {\n      var computedTime = this.toSeconds(time);\n      var currentTick = this.getTicksAtTime(time);\n      return this.getTimeOfTick(currentTick + ticks) - computedTime;\n    }\n    /**\n     * Given a tick, returns the time that tick occurs at.\n     * @return The time that the tick occurs.\n     */\n\n  }, {\n    key: \"getTimeOfTick\",\n    value: function getTimeOfTick(tick) {\n      var before = this._events.get(tick, \"ticks\");\n\n      var after = this._events.getAfter(tick, \"ticks\");\n\n      if (before && before.ticks === tick) {\n        return before.time;\n      } else if (before && after && after.type === \"linearRampToValueAtTime\" && before.value !== after.value) {\n        var val0 = this._fromType(this.getValueAtTime(before.time));\n\n        var val1 = this._fromType(this.getValueAtTime(after.time));\n\n        var delta = (val1 - val0) / (after.time - before.time);\n        var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n        var sol1 = (-val0 + k) / delta;\n        var sol2 = (-val0 - k) / delta;\n        return (sol1 > 0 ? sol1 : sol2) + before.time;\n      } else if (before) {\n        if (before.value === 0) {\n          return Infinity;\n        } else {\n          return before.time + (tick - before.ticks) / before.value;\n        }\n      } else {\n        return tick / this._initialValue;\n      }\n    }\n    /**\n     * Convert some number of ticks their the duration in seconds accounting\n     * for any automation curves starting at the given time.\n     * @param  ticks The number of ticks to convert to seconds.\n     * @param  when  When along the automation timeline to convert the ticks.\n     * @return The duration in seconds of the ticks.\n     */\n\n  }, {\n    key: \"ticksToTime\",\n    value: function ticksToTime(ticks, when) {\n      return this.getDurationOfTicks(ticks, when);\n    }\n    /**\n     * The inverse of [[ticksToTime]]. Convert a duration in\n     * seconds to the corresponding number of ticks accounting for any\n     * automation curves starting at the given time.\n     * @param  duration The time interval to convert to ticks.\n     * @param  when When along the automation timeline to convert the ticks.\n     * @return The duration in ticks.\n     */\n\n  }, {\n    key: \"timeToTicks\",\n    value: function timeToTicks(duration, when) {\n      var computedTime = this.toSeconds(when);\n      var computedDuration = this.toSeconds(duration);\n      var startTicks = this.getTicksAtTime(computedTime);\n      var endTicks = this.getTicksAtTime(computedTime + computedDuration);\n      return endTicks - startTicks;\n    }\n    /**\n     * Convert from the type when the unit value is BPM\n     */\n\n  }, {\n    key: \"_fromType\",\n    value: function _fromType(val) {\n      if (this.units === \"bpm\" && this.multiplier) {\n        return 1 / (60 / val / this.multiplier);\n      } else {\n        return _get(_getPrototypeOf(TickParam.prototype), \"_fromType\", this).call(this, val);\n      }\n    }\n    /**\n     * Special case of type conversion where the units === \"bpm\"\n     */\n\n  }, {\n    key: \"_toType\",\n    value: function _toType(val) {\n      if (this.units === \"bpm\" && this.multiplier) {\n        return val / this.multiplier * 60;\n      } else {\n        return _get(_getPrototypeOf(TickParam.prototype), \"_toType\", this).call(this, val);\n      }\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n\n  }, {\n    key: \"multiplier\",\n    get: function get() {\n      return this._multiplier;\n    },\n    set: function set(m) {\n      // get and reset the current value with the new multiplier\n      // might be necessary to clear all the previous values\n      var currentVal = this.value;\n      this._multiplier = m;\n      this.cancelScheduledValues(0);\n      this.setValueAtTime(currentVal, 0);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Param.getDefaults(), {\n        multiplier: 1,\n        units: \"hertz\",\n        value: 1\n      });\n    }\n  }]);\n\n  return TickParam;\n}(Param);","map":{"version":3,"sources":["../../../../Tone/core/clock/TickParam.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam extends Param {\n    constructor() {\n        super(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n        this.name = \"TickParam\";\n        /**\n         * The timeline which tracks all of the automations.\n         */\n        this._events = new Timeline(Infinity);\n        /**\n         * The internal holder for the multiplier value\n         */\n        this._multiplier = 1;\n        const options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n        // set the multiplier\n        this._multiplier = options.multiplier;\n        // clear the ticks from the beginning\n        this._events.cancel(0);\n        // set an initial event\n        this._events.add({\n            ticks: 0,\n            time: 0,\n            type: \"setValueAtTime\",\n            value: this._fromType(options.value),\n        });\n        this.setValueAtTime(options.value, 0);\n    }\n    static getDefaults() {\n        return Object.assign(Param.getDefaults(), {\n            multiplier: 1,\n            units: \"hertz\",\n            value: 1,\n        });\n    }\n    setTargetAtTime(value, time, constant) {\n        // approximate it with multiple linear ramps\n        time = this.toSeconds(time);\n        this.setRampPoint(time);\n        const computedValue = this._fromType(value);\n        // start from previously scheduled value\n        const prevEvent = this._events.get(time);\n        const segments = Math.round(Math.max(1 / constant, 1));\n        for (let i = 0; i <= segments; i++) {\n            const segTime = constant * i + time;\n            const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n            this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n        }\n        return this;\n    }\n    setValueAtTime(value, time) {\n        const computedTime = this.toSeconds(time);\n        super.setValueAtTime(value, time);\n        const event = this._events.get(computedTime);\n        const previousEvent = this._events.previousEvent(event);\n        const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n        event.ticks = Math.max(ticksUntilTime, 0);\n        return this;\n    }\n    linearRampToValueAtTime(value, time) {\n        const computedTime = this.toSeconds(time);\n        super.linearRampToValueAtTime(value, time);\n        const event = this._events.get(computedTime);\n        const previousEvent = this._events.previousEvent(event);\n        const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n        event.ticks = Math.max(ticksUntilTime, 0);\n        return this;\n    }\n    exponentialRampToValueAtTime(value, time) {\n        // aproximate it with multiple linear ramps\n        time = this.toSeconds(time);\n        const computedVal = this._fromType(value);\n        // start from previously scheduled value\n        const prevEvent = this._events.get(time);\n        // approx 10 segments per second\n        const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n        const segmentDur = ((time - prevEvent.time) / segments);\n        for (let i = 0; i <= segments; i++) {\n            const segTime = segmentDur * i + prevEvent.time;\n            const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n            this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n        }\n        return this;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  event The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n    _getTicksUntilEvent(event, time) {\n        if (event === null) {\n            event = {\n                ticks: 0,\n                time: 0,\n                type: \"setValueAtTime\",\n                value: 0,\n            };\n        }\n        else if (isUndef(event.ticks)) {\n            const previousEvent = this._events.previousEvent(event);\n            event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n        }\n        const val0 = this._fromType(this.getValueAtTime(event.time));\n        let val1 = this._fromType(this.getValueAtTime(time));\n        // if it's right on the line, take the previous value\n        const onTheLineEvent = this._events.get(time);\n        if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n            val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n        }\n        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  time The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n    getTicksAtTime(time) {\n        const computedTime = this.toSeconds(time);\n        const event = this._events.get(computedTime);\n        return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n    }\n    /**\n     * Return the elapsed time of the number of ticks from the given time\n     * @param ticks The number of ticks to calculate\n     * @param  time The time to get the next tick from\n     * @return The duration of the number of ticks from the given time in seconds\n     */\n    getDurationOfTicks(ticks, time) {\n        const computedTime = this.toSeconds(time);\n        const currentTick = this.getTicksAtTime(time);\n        return this.getTimeOfTick(currentTick + ticks) - computedTime;\n    }\n    /**\n     * Given a tick, returns the time that tick occurs at.\n     * @return The time that the tick occurs.\n     */\n    getTimeOfTick(tick) {\n        const before = this._events.get(tick, \"ticks\");\n        const after = this._events.getAfter(tick, \"ticks\");\n        if (before && before.ticks === tick) {\n            return before.time;\n        }\n        else if (before && after &&\n            after.type === \"linearRampToValueAtTime\" &&\n            before.value !== after.value) {\n            const val0 = this._fromType(this.getValueAtTime(before.time));\n            const val1 = this._fromType(this.getValueAtTime(after.time));\n            const delta = (val1 - val0) / (after.time - before.time);\n            const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n            const sol1 = (-val0 + k) / delta;\n            const sol2 = (-val0 - k) / delta;\n            return (sol1 > 0 ? sol1 : sol2) + before.time;\n        }\n        else if (before) {\n            if (before.value === 0) {\n                return Infinity;\n            }\n            else {\n                return before.time + (tick - before.ticks) / before.value;\n            }\n        }\n        else {\n            return tick / this._initialValue;\n        }\n    }\n    /**\n     * Convert some number of ticks their the duration in seconds accounting\n     * for any automation curves starting at the given time.\n     * @param  ticks The number of ticks to convert to seconds.\n     * @param  when  When along the automation timeline to convert the ticks.\n     * @return The duration in seconds of the ticks.\n     */\n    ticksToTime(ticks, when) {\n        return this.getDurationOfTicks(ticks, when);\n    }\n    /**\n     * The inverse of [[ticksToTime]]. Convert a duration in\n     * seconds to the corresponding number of ticks accounting for any\n     * automation curves starting at the given time.\n     * @param  duration The time interval to convert to ticks.\n     * @param  when When along the automation timeline to convert the ticks.\n     * @return The duration in ticks.\n     */\n    timeToTicks(duration, when) {\n        const computedTime = this.toSeconds(when);\n        const computedDuration = this.toSeconds(duration);\n        const startTicks = this.getTicksAtTime(computedTime);\n        const endTicks = this.getTicksAtTime(computedTime + computedDuration);\n        return endTicks - startTicks;\n    }\n    /**\n     * Convert from the type when the unit value is BPM\n     */\n    _fromType(val) {\n        if (this.units === \"bpm\" && this.multiplier) {\n            return 1 / (60 / val / this.multiplier);\n        }\n        else {\n            return super._fromType(val);\n        }\n    }\n    /**\n     * Special case of type conversion where the units === \"bpm\"\n     */\n    _toType(val) {\n        if (this.units === \"bpm\" && this.multiplier) {\n            return (val / this.multiplier) * 60;\n        }\n        else {\n            return super._toType(val);\n        }\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n    get multiplier() {\n        return this._multiplier;\n    }\n    set multiplier(m) {\n        // get and reset the current value with the new multiplier\n        // might be necessary to clear all the previous values\n        const currentVal = this.value;\n        this._multiplier = m;\n        this.cancelScheduledValues(0);\n        this.setValueAtTime(currentVal, 0);\n    }\n}\n//# sourceMappingURL=TickParam.js.map"]},"metadata":{},"sourceType":"module"}