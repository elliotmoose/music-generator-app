{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\n\nexport var MembraneSynth = /*#__PURE__*/function (_Synth) {\n  _inherits(MembraneSynth, _Synth);\n\n  var _super = _createSuper(MembraneSynth);\n\n  function MembraneSynth() {\n    var _this;\n\n    _classCallCheck(this, MembraneSynth);\n\n    _this = _super.call(this, optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    _this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n\n    _this.portamento = 0;\n    var options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    _this.pitchDecay = options.pitchDecay;\n    _this.octaves = options.octaves;\n    readOnly(_assertThisInitialized(_this), [\"oscillator\", \"envelope\"]);\n    return _this;\n  }\n\n  _createClass(MembraneSynth, [{\n    key: \"setNote\",\n    value: function setNote(note, time) {\n      var seconds = this.toSeconds(time);\n      var hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n      var maxNote = hertz * this.octaves;\n      this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n      this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MembraneSynth.prototype), \"dispose\", this).call(this);\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n        envelope: {\n          attack: 0.001,\n          attackCurve: \"exponential\",\n          decay: 0.4,\n          release: 1.4,\n          sustain: 0.01\n        },\n        octaves: 10,\n        oscillator: {\n          type: \"sine\"\n        },\n        pitchDecay: 0.05\n      });\n    }\n  }]);\n\n  return MembraneSynth;\n}(Synth);\n\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","map":{"version":3,"sources":["../../../Tone/instrument/MembraneSynth.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,cAAT,QAA+B,wBAA/B;AAEA,SAAS,SAAT,EAAoB,oBAApB,QAAgD,uBAAhD;AACA,SAAS,QAAT,QAA2C,wBAA3C;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,KAAT,QAAoC,SAApC;AACA,SAAS,KAAT,EAAgB,SAAhB,QAAiC,wBAAjC;AAOA;;;;;;;;;;;;AAYG;;AACH,WAAa,aAAb;AAAA;;AAAA;;AA6BC,2BAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,CAA1B;AA7BQ,UAAA,IAAA,GAAe,eAAf;AAkBT;;AAEG;;AACM,UAAA,UAAA,GAAa,CAAb;AASR,QAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,CAApC;AAEA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,UAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA,IAAA,QAAQ,gCAAO,CAAC,YAAD,EAAe,UAAf,CAAP,CAAR;AAPD;AAQC;;AArCF;AAAA;AAAA,4BAwDS,IAxDT,EAwD2C,IAxD3C,EAwDsD;AACpD,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAhB;AACA,UAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,IAAI,YAAY,cAAhB,GAAiC,IAAI,CAAC,WAAL,EAAjC,GAAsD,IAAvE,CAAd;AACA,UAAM,OAAO,GAAG,KAAK,GAAG,KAAK,OAA7B;AACA,WAAK,UAAL,CAAgB,SAAhB,CAA0B,cAA1B,CAAyC,OAAzC,EAAkD,OAAlD;AACA,WAAK,UAAL,CAAgB,SAAhB,CAA0B,4BAA1B,CAAuD,KAAvD,EAA8D,OAAO,GAAG,KAAK,SAAL,CAAe,KAAK,UAApB,CAAxE;AACA,aAAO,IAAP;AACA;AA/DF;AAAA;AAAA,8BAiEQ;AACN;;AACA,aAAO,IAAP;AACA;AApEF;AAAA;AAAA,kCAuCmB;AACjB,aAAO,SAAS,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,KAAK,CAAC,WAAN,EAA3B,EAAgD;AAC/D,QAAA,QAAQ,EAAE;AACT,UAAA,MAAM,EAAE,KADC;AAET,UAAA,WAAW,EAAE,aAFJ;AAGT,UAAA,KAAK,EAAE,GAHE;AAIT,UAAA,OAAO,EAAE,GAJA;AAKT,UAAA,OAAO,EAAE;AALA,SADqD;AAQ/D,QAAA,OAAO,EAAE,EARsD;AAS/D,QAAA,UAAU,EAAE;AACX,UAAA,IAAI,EAAE;AADK,SATmD;AAY/D,QAAA,UAAU,EAAE;AAZmD,OAAhD,CAAhB;AAcA;AAtDF;;AAAA;AAAA,EAAmC,KAAnC;;AAUC,UAAA,CAAA,CADC,KAAK,CAAC,CAAD,CACN,CAAA,E,uBAAA,E,SAAA,E,KAAkB,CAAlB,CAAA;;AAQA,UAAA,CAAA,CADC,SAAS,CAAC,CAAD,CACV,CAAA,E,uBAAA,E,YAAA,E,KAAiB,CAAjB,CAAA","sourceRoot":"","sourcesContent":["import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth {\n    constructor() {\n        super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n        this.name = \"MembraneSynth\";\n        /**\n         * Portamento is ignored in this synth. use pitch decay instead.\n         */\n        this.portamento = 0;\n        const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n        this.pitchDecay = options.pitchDecay;\n        this.octaves = options.octaves;\n        readOnly(this, [\"oscillator\", \"envelope\"]);\n    }\n    static getDefaults() {\n        return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n            envelope: {\n                attack: 0.001,\n                attackCurve: \"exponential\",\n                decay: 0.4,\n                release: 1.4,\n                sustain: 0.01,\n            },\n            octaves: 10,\n            oscillator: {\n                type: \"sine\",\n            },\n            pitchDecay: 0.05,\n        });\n    }\n    setNote(note, time) {\n        const seconds = this.toSeconds(time);\n        const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n        const maxNote = hertz * this.octaves;\n        this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n        this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        return this;\n    }\n}\n__decorate([\n    range(0)\n], MembraneSynth.prototype, \"octaves\", void 0);\n__decorate([\n    timeRange(0)\n], MembraneSynth.prototype, \"pitchDecay\", void 0);\n//# sourceMappingURL=MembraneSynth.js.map"]},"metadata":{},"sourceType":"module"}