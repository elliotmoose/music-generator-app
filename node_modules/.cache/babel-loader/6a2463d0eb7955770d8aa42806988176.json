{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n    var renderedBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proxy, nativeOfflineAudioContext, trace) {\n        var nativeGainNode, nativePannerNode, commonAudioNodeOptions, commonNativePannerNodeOptions, nativePannerNodeIsOwnedByContext, options, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeGainNode = null;\n                nativePannerNode = getNativeAudioNode(proxy);\n                commonAudioNodeOptions = {\n                  channelCount: nativePannerNode.channelCount,\n                  channelCountMode: nativePannerNode.channelCountMode,\n                  channelInterpretation: nativePannerNode.channelInterpretation\n                };\n                commonNativePannerNodeOptions = _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                  coneInnerAngle: nativePannerNode.coneInnerAngle,\n                  coneOuterAngle: nativePannerNode.coneOuterAngle,\n                  coneOuterGain: nativePannerNode.coneOuterGain,\n                  distanceModel: nativePannerNode.distanceModel,\n                  maxDistance: nativePannerNode.maxDistance,\n                  panningModel: nativePannerNode.panningModel,\n                  refDistance: nativePannerNode.refDistance,\n                  rolloffFactor: nativePannerNode.rolloffFactor\n                }); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n\n                if ('bufferSize' in nativePannerNode) {\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                    gain: 1\n                  }));\n                } else if (!nativePannerNodeIsOwnedByContext) {\n                  options = _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                  });\n                  nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n                if (!(nativeGainNode !== null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var partialOfflineAudioContext, nativeChannelMergerNode, renderedBuffer, inputGainNode, channelDatas, i, lastOrientation, lastPosition, gateGainNode, partialPannerNode, _i, orientation, positon, currentTime;\n\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!(renderedBufferPromise === null)) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          if (!(nativeOfflineAudioContextConstructor === null)) {\n                            _context3.next = 3;\n                            break;\n                          }\n\n                          throw new Error('Missing the native OfflineAudioContext constructor.');\n\n                        case 3:\n                          partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n                          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                          nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: 6\n                          });\n                          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                          renderedBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                            var nativeConstantSourceNodes, i;\n                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    _context2.next = 2;\n                                    return Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map( /*#__PURE__*/function () {\n                                      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(audioParam, index) {\n                                        var nativeConstantSourceNode;\n                                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                          while (1) {\n                                            switch (_context.prev = _context.next) {\n                                              case 0:\n                                                nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                                  channelCount: 1,\n                                                  channelCountMode: 'explicit',\n                                                  channelInterpretation: 'discrete',\n                                                  offset: index === 0 ? 1 : 0\n                                                });\n                                                _context.next = 3;\n                                                return renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n\n                                              case 3:\n                                                return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n                                              case 4:\n                                              case \"end\":\n                                                return _context.stop();\n                                            }\n                                          }\n                                        }, _callee);\n                                      }));\n\n                                      return function (_x4, _x5) {\n                                        return _ref3.apply(this, arguments);\n                                      };\n                                    }()));\n\n                                  case 2:\n                                    nativeConstantSourceNodes = _context2.sent;\n\n                                    for (i = 0; i < 6; i += 1) {\n                                      nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                                      nativeConstantSourceNodes[i].start(0);\n                                    }\n\n                                    return _context2.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2);\n                          }))();\n\n                        case 7:\n                          _context3.next = 9;\n                          return renderedBufferPromise;\n\n                        case 9:\n                          renderedBuffer = _context3.sent;\n                          inputGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                            gain: 1\n                          }));\n                          _context3.next = 13;\n                          return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n\n                        case 13:\n                          channelDatas = [];\n\n                          for (i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                            channelDatas.push(renderedBuffer.getChannelData(i));\n                          }\n\n                          lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                          lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                          gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                            gain: 1\n                          }));\n                          partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                          }));\n                          inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                          partialPannerNode.connect(nativeGainNode);\n\n                          for (_i = 128; _i < renderedBuffer.length; _i += 128) {\n                            orientation = [channelDatas[0][_i], channelDatas[1][_i], channelDatas[2][_i]];\n                            positon = [channelDatas[3][_i], channelDatas[4][_i], channelDatas[5][_i]];\n\n                            if (orientation.some(function (value, index) {\n                              return value !== lastOrientation[index];\n                            }) || positon.some(function (value, index) {\n                              return value !== lastPosition[index];\n                            })) {\n                              lastOrientation = orientation;\n                              lastPosition = positon;\n                              currentTime = _i / nativeOfflineAudioContext.sampleRate;\n                              gateGainNode.gain.setValueAtTime(0, currentTime);\n                              gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                                gain: 0\n                              }));\n                              partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                                orientationX: lastOrientation[0],\n                                orientationY: lastOrientation[1],\n                                orientationZ: lastOrientation[2],\n                                positionX: lastPosition[0],\n                                positionY: lastPosition[1],\n                                positionZ: lastPosition[2]\n                              }));\n                              gateGainNode.gain.setValueAtTime(1, currentTime);\n                              inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                              partialPannerNode.connect(nativeGainNode);\n                            }\n                          }\n\n                          return _context3.abrupt(\"return\", {\n                            v: nativeGainNode\n                          });\n\n                        case 23:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })(), \"t0\", 9);\n\n              case 9:\n                _ret = _context4.t0;\n\n                if (!(typeof _ret === \"object\")) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _ret.v);\n\n              case 12:\n                if (nativePannerNodeIsOwnedByContext) {\n                  _context4.next = 27;\n                  break;\n                }\n\n                _context4.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n\n              case 15:\n                _context4.next = 17;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n\n              case 17:\n                _context4.next = 19;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n\n              case 19:\n                _context4.next = 21;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n\n              case 21:\n                _context4.next = 23;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n\n              case 23:\n                _context4.next = 25;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n\n              case 25:\n                _context4.next = 39;\n                break;\n\n              case 27:\n                _context4.next = 29;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n\n              case 29:\n                _context4.next = 31;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n\n              case 31:\n                _context4.next = 33;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n\n              case 33:\n                _context4.next = 35;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n\n              case 35:\n                _context4.next = 37;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n\n              case 37:\n                _context4.next = 39;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n\n              case 39:\n                if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                  _context4.next = 44;\n                  break;\n                }\n\n                _context4.next = 42;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n\n              case 42:\n                _context4.next = 46;\n                break;\n\n              case 44:\n                _context4.next = 46;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n\n              case 46:\n                return _context4.abrupt(\"return\", nativePannerNode);\n\n              case 47:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/panner-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let renderedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode(proxy);\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            }\n            else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all([\n                            proxy.orientationX,\n                            proxy.orientationY,\n                            proxy.orientationZ,\n                            proxy.positionX,\n                            proxy.positionY,\n                            proxy.positionZ\n                        ].map(async (audioParam, index) => {\n                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: index === 0 ? 1 : 0\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n                            return nativeConstantSourceNode;\n                        }));\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n                const channelDatas = [];\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n                inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n                    if (orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n                        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n                return nativeGainNode;\n            }\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}