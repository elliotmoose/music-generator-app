{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\n\nexport var BiquadFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(BiquadFilter, _ToneAudioNode);\n\n  var _super = _createSuper(BiquadFilter);\n\n  function BiquadFilter() {\n    var _this;\n\n    _classCallCheck(this, BiquadFilter);\n\n    _this = _super.call(this, optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"BiquadFilter\";\n    var options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._filter = _this.context.createBiquadFilter();\n    _this.input = _this.output = _this._filter;\n    _this.Q = new Param({\n      context: _this.context,\n      units: \"number\",\n      value: options.Q,\n      param: _this._filter.Q\n    });\n    _this.frequency = new Param({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: _this._filter.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: _this._filter.detune\n    });\n    _this.gain = new Param({\n      context: _this.context,\n      units: \"gain\",\n      value: options.gain,\n      param: _this._filter.gain\n    });\n    _this.type = options.type;\n    return _this;\n  }\n\n  _createClass(BiquadFilter, [{\n    key: \"getFrequencyResponse\",\n\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      // start with all 1s\n      var freqValues = new Float32Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len); // clone the filter to remove any connections which may be changing the value\n\n      var filterClone = this.context.createBiquadFilter();\n      filterClone.type = this.type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BiquadFilter.prototype), \"dispose\", this).call(this);\n\n      this._filter.disconnect();\n\n      this.Q.dispose();\n      this.frequency.dispose();\n      this.gain.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n\n    /**\n     * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n     * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n     */\n    get: function get() {\n      return this._filter.type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._filter.type = type;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        type: \"lowpass\",\n        frequency: 350,\n        detune: 0,\n        gain: 0\n      });\n    }\n  }]);\n\n  return BiquadFilter;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/filter/BiquadFilter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n        this.name = \"BiquadFilter\";\n        const options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        this._filter = this.context.createBiquadFilter();\n        this.input = this.output = this._filter;\n        this.Q = new Param({\n            context: this.context,\n            units: \"number\",\n            value: options.Q,\n            param: this._filter.Q,\n        });\n        this.frequency = new Param({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n            param: this._filter.frequency,\n        });\n        this.detune = new Param({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n            param: this._filter.detune,\n        });\n        this.gain = new Param({\n            context: this.context,\n            units: \"gain\",\n            value: options.gain,\n            param: this._filter.gain,\n        });\n        this.type = options.type;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            type: \"lowpass\",\n            frequency: 350,\n            detune: 0,\n            gain: 0,\n        });\n    }\n    /**\n     * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n     * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n     */\n    get type() {\n        return this._filter.type;\n    }\n    set type(type) {\n        const types = [\"lowpass\", \"highpass\", \"bandpass\",\n            \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n        assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n        this._filter.type = type;\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    getFrequencyResponse(len = 128) {\n        // start with all 1s\n        const freqValues = new Float32Array(len);\n        for (let i = 0; i < len; i++) {\n            const norm = Math.pow(i / len, 2);\n            const freq = norm * (20000 - 20) + 20;\n            freqValues[i] = freq;\n        }\n        const magValues = new Float32Array(len);\n        const phaseValues = new Float32Array(len);\n        // clone the filter to remove any connections which may be changing the value\n        const filterClone = this.context.createBiquadFilter();\n        filterClone.type = this.type;\n        filterClone.Q.value = this.Q.value;\n        filterClone.frequency.value = this.frequency.value;\n        filterClone.gain.value = this.gain.value;\n        filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n        return magValues;\n    }\n    dispose() {\n        super.dispose();\n        this._filter.disconnect();\n        this.Q.dispose();\n        this.frequency.dispose();\n        this.gain.dispose();\n        this.detune.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=BiquadFilter.js.map"]},"metadata":{},"sourceType":"module"}