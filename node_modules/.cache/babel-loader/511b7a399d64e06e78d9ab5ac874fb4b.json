{"ast":null,"code":"var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/; // The interval it takes to raise a note a semitone\n\nvar sharp = [-4, 7];\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\nvar baseIntervals = [[0, 0], [3, -5], [2, -3], [1, -1], [0, 1], [3, -4], [2, -2], [1, 0]];\n\nmodule.exports = function (simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n  number = sign < 0 ? -number : number;\n  var lower = number > 8 ? number % 7 || 7 : number;\n  var octaves = (number - lower) / 7;\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2; // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n\n  if (alt === -3) return null;\n  return [sign * (base[0] + octaves + sharp[0] * alt), sign * (base[1] + sharp[1] * alt)];\n}; // Copy to avoid overwriting internal base intervals\n\n\nmodule.exports.coords = baseIntervals.slice(0);","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/interval-coords/index.js"],"names":["pattern","sharp","pAlts","mAlts","baseIntervals","module","exports","simple","parser","match","quality","number","sign","lower","octaves","base","alts","alt","indexOf","coords","slice"],"mappings":"AAAA,IAAIA,OAAO,GAAG,4BAAd,C,CAEA;;AACA,IAAIC,KAAK,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,CAAZ;AAEA,IAAIC,KAAK,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,CAAZ;AACA,IAAIC,KAAK,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,IAA3B,CAAZ;AAEA,IAAIC,aAAa,GAAG,CAClB,CAAC,CAAD,EAAI,CAAJ,CADkB,EAElB,CAAC,CAAD,EAAI,CAAC,CAAL,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAC,CAAL,CAHkB,EAIlB,CAAC,CAAD,EAAI,CAAC,CAAL,CAJkB,EAKlB,CAAC,CAAD,EAAI,CAAJ,CALkB,EAMlB,CAAC,CAAD,EAAI,CAAC,CAAL,CANkB,EAOlB,CAAC,CAAD,EAAI,CAAC,CAAL,CAPkB,EAQlB,CAAC,CAAD,EAAI,CAAJ,CARkB,CAApB;;AAWAC,MAAM,CAACC,OAAP,GAAiB,UAASC,MAAT,EAAiB;AAChC,MAAIC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaT,OAAb,CAAb;AACA,MAAI,CAACQ,MAAL,EAAa,OAAO,IAAP;AAEb,MAAIE,OAAO,GAAGF,MAAM,CAAC,CAAD,CAApB;AACA,MAAIG,MAAM,GAAG,CAACH,MAAM,CAAC,CAAD,CAApB;AACA,MAAII,IAAI,GAAGD,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA7B;AAEAA,EAAAA,MAAM,GAAGC,IAAI,GAAG,CAAP,GAAW,CAACD,MAAZ,GAAqBA,MAA9B;AAEA,MAAIE,KAAK,GAAGF,MAAM,GAAG,CAAT,GAAcA,MAAM,GAAG,CAAT,IAAc,CAA5B,GAAiCA,MAA7C;AACA,MAAIG,OAAO,GAAG,CAACH,MAAM,GAAGE,KAAV,IAAmB,CAAjC;AAEA,MAAIE,IAAI,GAAGX,aAAa,CAACS,KAAK,GAAG,CAAT,CAAxB;AACA,MAAIG,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAJ,IAAW,CAAX,GAAeb,KAAf,GAAuBC,KAAlC;AACA,MAAIc,GAAG,GAAGD,IAAI,CAACE,OAAL,CAAaR,OAAb,IAAwB,CAAlC,CAfgC,CAiBhC;AACA;;AACA,MAAIO,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAO,IAAP;AAEhB,SAAO,CACLL,IAAI,IAAIG,IAAI,CAAC,CAAD,CAAJ,GAAUD,OAAV,GAAoBb,KAAK,CAAC,CAAD,CAAL,GAAWgB,GAAnC,CADC,EAELL,IAAI,IAAIG,IAAI,CAAC,CAAD,CAAJ,GAAUd,KAAK,CAAC,CAAD,CAAL,GAAWgB,GAAzB,CAFC,CAAP;AAID,CAzBD,C,CA2BA;;;AACAZ,MAAM,CAACC,OAAP,CAAea,MAAf,GAAwBf,aAAa,CAACgB,KAAd,CAAoB,CAApB,CAAxB","sourcesContent":["var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/;\n\n// The interval it takes to raise a note a semitone\nvar sharp = [-4, 7];\n\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\n\nvar baseIntervals = [\n  [0, 0],\n  [3, -5],\n  [2, -3],\n  [1, -1],\n  [0, 1],\n  [3, -4],\n  [2, -2],\n  [1, 0]\n];\n\nmodule.exports = function(simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n\n  number = sign < 0 ? -number : number;\n\n  var lower = number > 8 ? (number % 7 || 7) : number;\n  var octaves = (number - lower) / 7;\n\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2;\n\n  // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n  if (alt === -3) return null;\n\n  return [\n    sign * (base[0] + octaves + sharp[0] * alt),\n    sign * (base[1] + sharp[1] * alt)\n  ];\n}\n\n// Copy to avoid overwriting internal base intervals\nmodule.exports.coords = baseIntervals.slice(0);\n"]},"metadata":{},"sourceType":"script"}