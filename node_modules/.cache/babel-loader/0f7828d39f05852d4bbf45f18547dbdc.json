{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loop } from \"./Loop\";\nimport { PatternGenerator } from \"./PatternGenerator\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\n\nexport var Pattern = /*#__PURE__*/function (_Loop) {\n  _inherits(Pattern, _Loop);\n\n  var _super = _createSuper(Pattern);\n\n  function Pattern() {\n    var _this;\n\n    _classCallCheck(this, Pattern);\n\n    _this = _super.call(this, optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n    _this.name = \"Pattern\";\n    var options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n    _this.callback = options.callback;\n    _this._values = options.values;\n    _this._pattern = PatternGenerator(options.values, options.pattern);\n    _this._type = options.pattern;\n    return _this;\n  }\n\n  _createClass(Pattern, [{\n    key: \"_tick\",\n\n    /**\n     * Internal function called when the notes should be called\n     */\n    value: function _tick(time) {\n      var value = this._pattern.next();\n\n      this._value = value.value;\n      this.callback(time, this._value);\n    }\n    /**\n     * The array of events.\n     */\n\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._values;\n    },\n    set: function set(val) {\n      this._values = val; // reset the pattern\n\n      this.pattern = this._type;\n    }\n    /**\n     * The current value of the pattern.\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n     */\n\n  }, {\n    key: \"pattern\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(pattern) {\n      this._type = pattern;\n      this._pattern = PatternGenerator(this._values, this._type);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Loop.getDefaults(), {\n        pattern: \"up\",\n        values: [],\n        callback: noOp\n      });\n    }\n  }]);\n\n  return Pattern;\n}(Loop);","map":{"version":3,"sources":["../../../Tone/event/Pattern.ts"],"names":[],"mappings":";;;;AAAA,SAAS,IAAT,QAAkC,QAAlC;AACA,SAAS,gBAAT,QAA8C,oBAA9C;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AAEA,SAAS,IAAT,QAAqB,wBAArB;AAQA;;;;;;;;AAQG;;AACH,WAAa,OAAb;AAAA;;AAAA;;AAwCC,qBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CAAnC,CAA1B;AAxCQ,UAAA,IAAA,GAAe,SAAf;AAyCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CAAnC,CAApC;AAEA,UAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,UAAK,OAAL,GAAe,OAAO,CAAC,MAAvB;AACA,UAAK,QAAL,GAAgB,gBAAgB,CAAC,OAAO,CAAC,MAAT,EAAiB,OAAO,CAAC,OAAzB,CAAhC;AACA,UAAK,KAAL,GAAa,OAAO,CAAC,OAArB;AARD;AASC;;AAjDF;AAAA;;AA2DC;;AAEG;AA7DJ,0BA8DiB,IA9DjB,EA8D8B;AAC5B,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAd,EAAd;;AACA,WAAK,MAAL,GAAc,KAAK,CAAC,KAApB;AACA,WAAK,QAAL,CAAc,IAAd,EAAoB,KAAK,MAAzB;AACA;AAED;;AAEG;;AAtEJ;AAAA;AAAA,wBAuEW;AACT,aAAO,KAAK,OAAZ;AACA,KAzEF;AAAA,sBA0EY,GA1EZ,EA0Ee;AACb,WAAK,OAAL,GAAe,GAAf,CADa,CAEb;;AACA,WAAK,OAAL,GAAe,KAAK,KAApB;AACA;AAED;;AAEG;;AAlFJ;AAAA;AAAA,wBAmFU;AACR,aAAO,KAAK,MAAZ;AACA;AAED;;AAEG;;AAzFJ;AAAA;AAAA,wBA0FY;AACV,aAAO,KAAK,KAAZ;AACA,KA5FF;AAAA,sBA6Fa,OA7Fb,EA6FoB;AAClB,WAAK,KAAL,GAAa,OAAb;AACA,WAAK,QAAL,GAAgB,gBAAgB,CAAC,KAAK,OAAN,EAAe,KAAK,KAApB,CAAhC;AACA;AAhGF;AAAA;AAAA,kCAmDmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,IAAI,CAAC,WAAL,EAAd,EAAkC;AACxC,QAAA,OAAO,EAAE,IAD+B;AAExC,QAAA,MAAM,EAAE,EAFgC;AAGxC,QAAA,QAAQ,EAAE;AAH8B,OAAlC,CAAP;AAKA;AAzDF;;AAAA;AAAA,EAAwC,IAAxC","sourceRoot":"","sourcesContent":["import { Loop } from \"./Loop\";\nimport { PatternGenerator } from \"./PatternGenerator\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern extends Loop {\n    constructor() {\n        super(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n        this.name = \"Pattern\";\n        const options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n        this.callback = options.callback;\n        this._values = options.values;\n        this._pattern = PatternGenerator(options.values, options.pattern);\n        this._type = options.pattern;\n    }\n    static getDefaults() {\n        return Object.assign(Loop.getDefaults(), {\n            pattern: \"up\",\n            values: [],\n            callback: noOp,\n        });\n    }\n    /**\n     * Internal function called when the notes should be called\n     */\n    _tick(time) {\n        const value = this._pattern.next();\n        this._value = value.value;\n        this.callback(time, this._value);\n    }\n    /**\n     * The array of events.\n     */\n    get values() {\n        return this._values;\n    }\n    set values(val) {\n        this._values = val;\n        // reset the pattern\n        this.pattern = this._type;\n    }\n    /**\n     * The current value of the pattern.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n     */\n    get pattern() {\n        return this._type;\n    }\n    set pattern(pattern) {\n        this._type = pattern;\n        this._pattern = PatternGenerator(this._values, this._type);\n    }\n}\n//# sourceMappingURL=Pattern.js.map"]},"metadata":{},"sourceType":"module"}