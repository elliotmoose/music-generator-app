{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\n\nexport var PanVol = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(PanVol, _ToneAudioNode);\n\n  var _super = _createSuper(PanVol);\n\n  function PanVol() {\n    var _this;\n\n    _classCallCheck(this, PanVol);\n\n    _this = _super.call(this, optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n    _this.name = \"PanVol\";\n    var options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    _this._panner = _this.input = new Panner({\n      context: _this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    _this.pan = _this._panner.pan;\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume; // connections\n\n    _this._panner.connect(_this._volume);\n\n    _this.mute = options.mute;\n    readOnly(_assertThisInitialized(_this), [\"pan\", \"volume\"]);\n    return _this;\n  }\n\n  _createClass(PanVol, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PanVol.prototype), \"dispose\", this).call(this);\n\n      this._panner.dispose();\n\n      this.pan.dispose();\n\n      this._volume.dispose();\n\n      this.volume.dispose();\n      return this;\n    }\n  }, {\n    key: \"mute\",\n\n    /**\n     * Mute/unmute the volume\n     */\n    get: function get() {\n      return this._volume.mute;\n    },\n    set: function set(mute) {\n      this._volume.mute = mute;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mute: false,\n        pan: 0,\n        volume: 0,\n        channelCount: 1\n      });\n    }\n  }]);\n\n  return PanVol;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/PanVol.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,QAAT,QAAyB,2BAAzB;AAEA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,MAAT,QAAuB,UAAvB;AASA;;;;;;;AAOG;;AACH,WAAa,MAAb;AAAA;;AAAA;;AAmCC,oBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAA1B;AAnCQ,UAAA,IAAA,GAAe,QAAf;AAoCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAApC;AAEA,UAAK,OAAL,GAAe,MAAK,KAAL,GAAa,IAAI,MAAJ,CAAW;AACtC,MAAA,OAAO,EAAE,MAAK,OADwB;AAEtC,MAAA,GAAG,EAAE,OAAO,CAAC,GAFyB;AAGtC,MAAA,YAAY,EAAE,OAAO,CAAC;AAHgB,KAAX,CAA5B;AAKA,UAAK,GAAL,GAAW,MAAK,OAAL,CAAa,GAAxB;AACA,UAAK,OAAL,GAAe,MAAK,MAAL,GAAc,IAAI,MAAJ,CAAW;AACvC,MAAA,OAAO,EAAE,MAAK,OADyB;AAEvC,MAAA,MAAM,EAAE,OAAO,CAAC;AAFuB,KAAX,CAA7B;AAIA,UAAK,MAAL,GAAc,MAAK,OAAL,CAAa,MAA3B,CAfD,CAiBC;;AACA,UAAK,OAAL,CAAa,OAAb,CAAqB,MAAK,OAA1B;;AACA,UAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AAEA,IAAA,QAAQ,gCAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAR;AArBD;AAsBC;;AAzDF;AAAA;AAAA,8BA8EQ;AACN;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,GAAL,CAAS,OAAT;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,MAAL,CAAY,OAAZ;AACA,aAAO,IAAP;AACA;AArFF;AAAA;;AAoEC;;AAEG;AAtEJ,wBAuES;AACP,aAAO,KAAK,OAAL,CAAa,IAApB;AACA,KAzEF;AAAA,sBA0EU,IA1EV,EA0Ec;AACZ,WAAK,OAAL,CAAa,IAAb,GAAoB,IAApB;AACA;AA5EF;AAAA;AAAA,kCA2DmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,IAAI,EAAE,KAD2C;AAEjD,QAAA,GAAG,EAAE,CAF4C;AAGjD,QAAA,MAAM,EAAE,CAHyC;AAIjD,QAAA,YAAY,EAAE;AAJmC,OAA3C,CAAP;AAMA;AAlEF;;AAAA;AAAA,EAA4B,aAA5B","sourceRoot":"","sourcesContent":["import { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n        this.name = \"PanVol\";\n        const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n        this._panner = this.input = new Panner({\n            context: this.context,\n            pan: options.pan,\n            channelCount: options.channelCount,\n        });\n        this.pan = this._panner.pan;\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        // connections\n        this._panner.connect(this._volume);\n        this.mute = options.mute;\n        readOnly(this, [\"pan\", \"volume\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            pan: 0,\n            volume: 0,\n            channelCount: 1,\n        });\n    }\n    /**\n     * Mute/unmute the volume\n     */\n    get mute() {\n        return this._volume.mute;\n    }\n    set mute(mute) {\n        this._volume.mute = mute;\n    }\n    dispose() {\n        super.dispose();\n        this._panner.dispose();\n        this.pan.dispose();\n        this._volume.dispose();\n        this.volume.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PanVol.js.map"]},"metadata":{},"sourceType":"module"}