{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\n\nexport var LowpassCombFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(LowpassCombFilter, _ToneAudioNode);\n\n  var _super = _createSuper(LowpassCombFilter);\n\n  function LowpassCombFilter() {\n    var _this;\n\n    _classCallCheck(this, LowpassCombFilter);\n\n    _this = _super.call(this, optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n    _this.name = \"LowpassCombFilter\";\n    var options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    _this._combFilter = _this.output = new FeedbackCombFilter({\n      context: _this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    _this.delayTime = _this._combFilter.delayTime;\n    _this.resonance = _this._combFilter.resonance;\n    _this._lowpass = _this.input = new OnePoleFilter({\n      context: _this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    }); // connections\n\n    _this._lowpass.connect(_this._combFilter);\n\n    return _this;\n  }\n\n  _createClass(LowpassCombFilter, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LowpassCombFilter.prototype), \"dispose\", this).call(this);\n\n      this._combFilter.dispose();\n\n      this._lowpass.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"dampening\",\n\n    /**\n     * The dampening control of the feedback\n     */\n    get: function get() {\n      return this._lowpass.frequency;\n    },\n    set: function set(fq) {\n      this._lowpass.frequency = fq;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        dampening: 3000,\n        delayTime: 0.1,\n        resonance: 0.5\n      });\n    }\n  }]);\n\n  return LowpassCombFilter;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/filter/LowpassCombFilter.ts"],"names":[],"mappings":";;;;;;AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAQA;;;;AAIG;;AACH,WAAa,iBAAb;AAAA;;AAAA;;AAkCC,+BAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAA1B;AAjCQ,UAAA,IAAA,GAAO,mBAAP;AAkCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAApC;AAEA,UAAK,WAAL,GAAmB,MAAK,MAAL,GAAc,IAAI,kBAAJ,CAAuB;AACvD,MAAA,OAAO,EAAE,MAAK,OADyC;AAEvD,MAAA,SAAS,EAAE,OAAO,CAAC,SAFoC;AAGvD,MAAA,SAAS,EAAE,OAAO,CAAC;AAHoC,KAAvB,CAAjC;AAKA,UAAK,SAAL,GAAiB,MAAK,WAAL,CAAiB,SAAlC;AACA,UAAK,SAAL,GAAiB,MAAK,WAAL,CAAiB,SAAlC;AAEA,UAAK,QAAL,GAAgB,MAAK,KAAL,GAAa,IAAI,aAAJ,CAAkB;AAC9C,MAAA,OAAO,EAAE,MAAK,OADgC;AAE9C,MAAA,SAAS,EAAE,OAAO,CAAC,SAF2B;AAG9C,MAAA,IAAI,EAAE;AAHwC,KAAlB,CAA7B,CAZD,CAkBC;;AACA,UAAK,QAAL,CAAc,OAAd,CAAsB,MAAK,WAA3B;;AAnBD;AAoBC;;AAtDF;AAAA;AAAA,8BA0EQ;AACN;;AACA,WAAK,WAAL,CAAiB,OAAjB;;AACA,WAAK,QAAL,CAAc,OAAd;;AACA,aAAO,IAAP;AACA;AA/EF;AAAA;;AAgEC;;AAEG;AAlEJ,wBAmEc;AACZ,aAAO,KAAK,QAAL,CAAc,SAArB;AACA,KArEF;AAAA,sBAsEe,EAtEf,EAsEiB;AACf,WAAK,QAAL,CAAc,SAAd,GAA0B,EAA1B;AACA;AAxEF;AAAA;AAAA,kCAwDmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,SAAS,EAAE,IADsC;AAEjD,QAAA,SAAS,EAAE,GAFsC;AAGjD,QAAA,SAAS,EAAE;AAHsC,OAA3C,CAAP;AAKA;AA9DF;;AAAA;AAAA,EAAuC,aAAvC","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n        this.name = \"LowpassCombFilter\";\n        const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n        this._combFilter = this.output = new FeedbackCombFilter({\n            context: this.context,\n            delayTime: options.delayTime,\n            resonance: options.resonance,\n        });\n        this.delayTime = this._combFilter.delayTime;\n        this.resonance = this._combFilter.resonance;\n        this._lowpass = this.input = new OnePoleFilter({\n            context: this.context,\n            frequency: options.dampening,\n            type: \"lowpass\",\n        });\n        // connections\n        this._lowpass.connect(this._combFilter);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            dampening: 3000,\n            delayTime: 0.1,\n            resonance: 0.5,\n        });\n    }\n    /**\n     * The dampening control of the feedback\n     */\n    get dampening() {\n        return this._lowpass.frequency;\n    }\n    set dampening(fq) {\n        this._lowpass.frequency = fq;\n    }\n    dispose() {\n        super.dispose();\n        this._combFilter.dispose();\n        this._lowpass.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=LowpassCombFilter.js.map"]},"metadata":{},"sourceType":"module"}