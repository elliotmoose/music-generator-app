{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\n\nexport var Gate = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Gate, _ToneAudioNode);\n\n  var _super = _createSuper(Gate);\n\n  function Gate() {\n    var _this;\n\n    _classCallCheck(this, Gate);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    _this.name = \"Gate\";\n    var options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.smoothing\n    });\n    _this._gt = new GreaterThan({\n      context: _this.context,\n      value: dbToGain(options.threshold)\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._gate = _this.output = new Gain({\n      context: _this.context\n    }); // connections\n\n    _this.input.connect(_this._gate); // the control signal\n\n\n    _this.input.chain(_this._follower, _this._gt, _this._gate.gain);\n\n    return _this;\n  }\n\n  _createClass(Gate, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Gate.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n\n      this._follower.dispose();\n\n      this._gt.dispose();\n\n      this._gate.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"threshold\",\n\n    /**\n     * The threshold of the gate in decibels\n     */\n    get: function get() {\n      return gainToDb(this._gt.value);\n    },\n    set: function set(thresh) {\n      this._gt.value = dbToGain(thresh);\n    }\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(smoothingTime) {\n      this._follower.smoothing = smoothingTime;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        smoothing: 0.1,\n        threshold: -40\n      });\n    }\n  }]);\n\n  return Gate;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Gate.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,WAAT,QAA4B,0BAA5B;AACA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,EAAmB,QAAnB,QAAmC,6BAAnC;AAOA;;;;;;;;;;;AAWG;;AACH,WAAa,IAAb;AAAA;;AAAA;;AA4BC,kBAAA;AAAA;;AAAA;;AACC,8BAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAAlC,CAAN;AA3BQ,UAAA,IAAA,GAAe,MAAf;AA4BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAApC;AAEA,UAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAC7B,MAAA,OAAO,EAAE,MAAK,OADe;AAE7B,MAAA,SAAS,EAAE,OAAO,CAAC;AAFU,KAAb,CAAjB;AAIA,UAAK,GAAL,GAAW,IAAI,WAAJ,CAAgB;AAC1B,MAAA,OAAO,EAAE,MAAK,OADY;AAE1B,MAAA,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,SAAT;AAFW,KAAhB,CAAX;AAIA,UAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAb;AACA,UAAK,KAAL,GAAa,MAAK,MAAL,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAA3B,CAbD,CAeC;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,KAAxB,EAhBD,CAiBC;;;AACA,UAAK,KAAL,CAAW,KAAX,CAAiB,MAAK,SAAtB,EAAiC,MAAK,GAAtC,EAA2C,MAAK,KAAL,CAAW,IAAtD;;AAlBD;AAmBC;;AA/CF;AAAA;AAAA,8BA4EQ;AACN;;AACA,WAAK,KAAL,CAAW,OAAX;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,WAAK,GAAL,CAAS,OAAT;;AACA,WAAK,KAAL,CAAW,OAAX;;AACA,aAAO,IAAP;AACA;AAnFF;AAAA;;AAwDC;;AAEG;AA1DJ,wBA2Dc;AACZ,aAAO,QAAQ,CAAC,KAAK,GAAL,CAAS,KAAV,CAAf;AACA,KA7DF;AAAA,sBA8De,MA9Df,EA8DqB;AACnB,WAAK,GAAL,CAAS,KAAT,GAAiB,QAAQ,CAAC,MAAD,CAAzB;AACA;AAED;;AAEG;;AApEJ;AAAA;AAAA,wBAqEc;AACZ,aAAO,KAAK,SAAL,CAAe,SAAtB;AACA,KAvEF;AAAA,sBAwEe,aAxEf,EAwE4B;AAC1B,WAAK,SAAL,CAAe,SAAf,GAA2B,aAA3B;AACA;AA1EF;AAAA;AAAA,kCAiDmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,SAAS,EAAE,GADsC;AAEjD,QAAA,SAAS,EAAE,CAAC;AAFqC,OAA3C,CAAP;AAIA;AAtDF;;AAAA;AAAA,EAA0B,aAA1B","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n        this.name = \"Gate\";\n        const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n        this._follower = new Follower({\n            context: this.context,\n            smoothing: options.smoothing,\n        });\n        this._gt = new GreaterThan({\n            context: this.context,\n            value: dbToGain(options.threshold),\n        });\n        this.input = new Gain({ context: this.context });\n        this._gate = this.output = new Gain({ context: this.context });\n        // connections\n        this.input.connect(this._gate);\n        // the control signal\n        this.input.chain(this._follower, this._gt, this._gate.gain);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.1,\n            threshold: -40\n        });\n    }\n    /**\n     * The threshold of the gate in decibels\n     */\n    get threshold() {\n        return gainToDb(this._gt.value);\n    }\n    set threshold(thresh) {\n        this._gt.value = dbToGain(thresh);\n    }\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n    get smoothing() {\n        return this._follower.smoothing;\n    }\n    set smoothing(smoothingTime) {\n        this._follower.smoothing = smoothingTime;\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this._follower.dispose();\n        this._gt.dispose();\n        this._gate.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Gate.js.map"]},"metadata":{},"sourceType":"module"}