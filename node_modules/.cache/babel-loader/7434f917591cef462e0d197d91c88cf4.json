{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar midi_file_1 = require(\"midi-file\");\n\nvar Header_1 = require(\"./Header\");\n\nvar array_flatten_1 = __importDefault(require(\"array-flatten\"));\n\nfunction encodeNote(note, channel) {\n  return [{\n    absoluteTime: note.ticks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOn\",\n    velocity: Math.floor(note.velocity * 127)\n  }, {\n    absoluteTime: note.ticks + note.durationTicks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOff\",\n    velocity: Math.floor(note.noteOffVelocity * 127)\n  }];\n}\n\nfunction encodeNotes(track) {\n  return array_flatten_1.default(track.notes.map(function (note) {\n    return encodeNote(note, track.channel);\n  }));\n}\n\nfunction encodeControlChange(cc, channel) {\n  return {\n    absoluteTime: cc.ticks,\n    channel: channel,\n    controllerType: cc.number,\n    deltaTime: 0,\n    type: \"controller\",\n    value: cc.value\n  };\n}\n\nfunction encodeControlChanges(track) {\n  var controlChanges = [];\n\n  for (var i = 0; i < 127; i++) {\n    if (track.controlChanges.hasOwnProperty(i)) {\n      track.controlChanges[i].forEach(function (cc) {\n        controlChanges.push(encodeControlChange(cc, track.channel));\n      });\n    }\n  }\n\n  return controlChanges;\n}\n\nfunction encodePitchBend(pb, channel) {\n  return {\n    absoluteTime: pb.ticks,\n    channel: channel,\n    deltaTime: 0,\n    type: \"pitchBend\",\n    value: pb.value\n  };\n}\n\nfunction encodePitchBends(track) {\n  var pitchBends = [];\n  track.pitchBends.forEach(function (pb) {\n    pitchBends.push(encodePitchBend(pb, track.channel));\n  });\n  return pitchBends;\n}\n\nfunction encodeInstrument(track) {\n  return {\n    absoluteTime: 0,\n    channel: track.channel,\n    deltaTime: 0,\n    programNumber: track.instrument.number,\n    type: \"programChange\"\n  };\n}\n\nfunction encodeTrackName(name) {\n  return {\n    absoluteTime: 0,\n    deltaTime: 0,\n    meta: true,\n    text: name,\n    type: \"trackName\"\n  };\n}\n\nfunction encodeTempo(tempo) {\n  return {\n    absoluteTime: tempo.ticks,\n    deltaTime: 0,\n    meta: true,\n    microsecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n    type: \"setTempo\"\n  };\n}\n\nfunction encodeTimeSignature(timeSig) {\n  return {\n    absoluteTime: timeSig.ticks,\n    deltaTime: 0,\n    denominator: timeSig.timeSignature[1],\n    meta: true,\n    metronome: 24,\n    numerator: timeSig.timeSignature[0],\n    thirtyseconds: 8,\n    type: \"timeSignature\"\n  };\n} // function encodeMeta(event: )\n\n\nfunction encodeKeySignature(keySig) {\n  var keyIndex = Header_1.keySignatureKeys.indexOf(keySig.key);\n  return {\n    absoluteTime: keySig.ticks,\n    deltaTime: 0,\n    key: keyIndex + 7,\n    meta: true,\n    scale: keySig.scale === \"major\" ? 0 : 1,\n    type: \"keySignature\"\n  };\n}\n\nfunction encodeText(textEvent) {\n  return {\n    absoluteTime: textEvent.ticks,\n    deltaTime: 0,\n    meta: true,\n    text: textEvent.text,\n    type: textEvent.type\n  };\n}\n/**\n * Convert the midi object to an array\n */\n\n\nfunction encode(midi) {\n  var midiData = {\n    header: {\n      format: 1,\n      numTracks: midi.tracks.length + 1,\n      ticksPerBeat: midi.header.ppq\n    },\n    tracks: __spreadArrays([__spreadArrays([// the name data\n    {\n      absoluteTime: 0,\n      deltaTime: 0,\n      meta: true,\n      text: midi.header.name,\n      type: \"trackName\"\n    }], midi.header.keySignatures.map(function (keySig) {\n      return encodeKeySignature(keySig);\n    }), midi.header.meta.map(function (e) {\n      return encodeText(e);\n    }), midi.header.tempos.map(function (tempo) {\n      return encodeTempo(tempo);\n    }), midi.header.timeSignatures.map(function (timeSig) {\n      return encodeTimeSignature(timeSig);\n    }))], midi.tracks.map(function (track) {\n      return __spreadArrays([// add the name\n      encodeTrackName(track.name), // the instrument\n      encodeInstrument(track)], encodeNotes(track), encodeControlChanges(track), encodePitchBends(track));\n    }))\n  }; // sort and set deltaTime of all of the tracks\n\n  midiData.tracks = midiData.tracks.map(function (track) {\n    track = track.sort(function (a, b) {\n      return a.absoluteTime - b.absoluteTime;\n    });\n    var lastTime = 0;\n    track.forEach(function (note) {\n      note.deltaTime = note.absoluteTime - lastTime;\n      lastTime = note.absoluteTime;\n      delete note.absoluteTime;\n    }); // end of track\n\n    track.push({\n      deltaTime: 0,\n      meta: true,\n      type: \"endOfTrack\"\n    });\n    return track;\n  }); // return midiData\n\n  return new Uint8Array(midi_file_1.writeMidi(midiData));\n}\n\nexports.encode = encode;","map":{"version":3,"sources":["../src/Encode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar midi_file_1 = require(\"midi-file\");\nvar Header_1 = require(\"./Header\");\nvar array_flatten_1 = __importDefault(require(\"array-flatten\"));\nfunction encodeNote(note, channel) {\n    return [{\n            absoluteTime: note.ticks,\n            channel: channel,\n            deltaTime: 0,\n            noteNumber: note.midi,\n            type: \"noteOn\",\n            velocity: Math.floor(note.velocity * 127),\n        },\n        {\n            absoluteTime: note.ticks + note.durationTicks,\n            channel: channel,\n            deltaTime: 0,\n            noteNumber: note.midi,\n            type: \"noteOff\",\n            velocity: Math.floor(note.noteOffVelocity * 127),\n        }];\n}\nfunction encodeNotes(track) {\n    return array_flatten_1.default(track.notes.map(function (note) { return encodeNote(note, track.channel); }));\n}\nfunction encodeControlChange(cc, channel) {\n    return {\n        absoluteTime: cc.ticks,\n        channel: channel,\n        controllerType: cc.number,\n        deltaTime: 0,\n        type: \"controller\",\n        value: cc.value,\n    };\n}\nfunction encodeControlChanges(track) {\n    var controlChanges = [];\n    for (var i = 0; i < 127; i++) {\n        if (track.controlChanges.hasOwnProperty(i)) {\n            track.controlChanges[i].forEach(function (cc) {\n                controlChanges.push(encodeControlChange(cc, track.channel));\n            });\n        }\n    }\n    return controlChanges;\n}\nfunction encodePitchBend(pb, channel) {\n    return {\n        absoluteTime: pb.ticks,\n        channel: channel,\n        deltaTime: 0,\n        type: \"pitchBend\",\n        value: pb.value,\n    };\n}\nfunction encodePitchBends(track) {\n    var pitchBends = [];\n    track.pitchBends.forEach(function (pb) {\n        pitchBends.push(encodePitchBend(pb, track.channel));\n    });\n    return pitchBends;\n}\nfunction encodeInstrument(track) {\n    return {\n        absoluteTime: 0,\n        channel: track.channel,\n        deltaTime: 0,\n        programNumber: track.instrument.number,\n        type: \"programChange\",\n    };\n}\nfunction encodeTrackName(name) {\n    return {\n        absoluteTime: 0,\n        deltaTime: 0,\n        meta: true,\n        text: name,\n        type: \"trackName\",\n    };\n}\nfunction encodeTempo(tempo) {\n    return {\n        absoluteTime: tempo.ticks,\n        deltaTime: 0,\n        meta: true,\n        microsecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n        type: \"setTempo\",\n    };\n}\nfunction encodeTimeSignature(timeSig) {\n    return {\n        absoluteTime: timeSig.ticks,\n        deltaTime: 0,\n        denominator: timeSig.timeSignature[1],\n        meta: true,\n        metronome: 24,\n        numerator: timeSig.timeSignature[0],\n        thirtyseconds: 8,\n        type: \"timeSignature\",\n    };\n}\n// function encodeMeta(event: )\nfunction encodeKeySignature(keySig) {\n    var keyIndex = Header_1.keySignatureKeys.indexOf(keySig.key);\n    return {\n        absoluteTime: keySig.ticks,\n        deltaTime: 0,\n        key: keyIndex + 7,\n        meta: true,\n        scale: keySig.scale === \"major\" ? 0 : 1,\n        type: \"keySignature\",\n    };\n}\nfunction encodeText(textEvent) {\n    return {\n        absoluteTime: textEvent.ticks,\n        deltaTime: 0,\n        meta: true,\n        text: textEvent.text,\n        type: textEvent.type,\n    };\n}\n/**\n * Convert the midi object to an array\n */\nfunction encode(midi) {\n    var midiData = {\n        header: {\n            format: 1,\n            numTracks: midi.tracks.length + 1,\n            ticksPerBeat: midi.header.ppq,\n        },\n        tracks: __spreadArrays([\n            __spreadArrays([\n                // the name data\n                {\n                    absoluteTime: 0,\n                    deltaTime: 0,\n                    meta: true,\n                    text: midi.header.name,\n                    type: \"trackName\",\n                }\n            ], midi.header.keySignatures.map(function (keySig) { return encodeKeySignature(keySig); }), midi.header.meta.map(function (e) { return encodeText(e); }), midi.header.tempos.map(function (tempo) { return encodeTempo(tempo); }), midi.header.timeSignatures.map(function (timeSig) { return encodeTimeSignature(timeSig); }))\n        ], midi.tracks.map(function (track) {\n            return __spreadArrays([\n                // add the name\n                encodeTrackName(track.name),\n                // the instrument\n                encodeInstrument(track)\n            ], encodeNotes(track), encodeControlChanges(track), encodePitchBends(track));\n        })),\n    };\n    // sort and set deltaTime of all of the tracks\n    midiData.tracks = midiData.tracks.map(function (track) {\n        track = track.sort(function (a, b) { return a.absoluteTime - b.absoluteTime; });\n        var lastTime = 0;\n        track.forEach(function (note) {\n            note.deltaTime = note.absoluteTime - lastTime;\n            lastTime = note.absoluteTime;\n            delete note.absoluteTime;\n        });\n        // end of track\n        track.push({\n            deltaTime: 0,\n            meta: true,\n            type: \"endOfTrack\",\n        });\n        return track;\n    });\n    // return midiData\n    return new Uint8Array(midi_file_1.writeMidi(midiData));\n}\nexports.encode = encode;\n//# sourceMappingURL=Encode.js.map"]},"metadata":{},"sourceType":"script"}