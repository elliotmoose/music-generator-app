{"ast":null,"code":"import _objectSpread from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n\n    var _super = _createSuper(DynamicsCompressorNode);\n\n    function DynamicsCompressorNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, DynamicsCompressorNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      _this._attack = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.attack);\n      _this._knee = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.knee);\n      _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      _this._ratio = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.ratio);\n      _this._release = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.release);\n      _this._threshold = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(_assertThisInitialized(_this), 0.006);\n      return _this;\n    }\n\n    _createClass(DynamicsCompressorNode, [{\n      key: \"attack\",\n      get: function get() {\n        return this._attack;\n      } // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCount;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n        this._nativeDynamicsCompressorNode.channelCount = value;\n\n        if (value > 2) {\n          this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n      /*\n       * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n       * overwritten here.\n       */\n\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCountMode;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n        this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n        if (value === 'max') {\n          this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n    }, {\n      key: \"knee\",\n      get: function get() {\n        return this._knee;\n      }\n    }, {\n      key: \"ratio\",\n      get: function get() {\n        return this._ratio;\n      }\n    }, {\n      key: \"reduction\",\n      get: function get() {\n        // Bug #111: Safari returns an AudioParam instead of a number.\n        if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n          return this._nativeDynamicsCompressorNode.reduction.value;\n        }\n\n        return this._nativeDynamicsCompressorNode.reduction;\n      }\n    }, {\n      key: \"release\",\n      get: function get() {\n        return this._release;\n      }\n    }, {\n      key: \"threshold\",\n      get: function get() {\n        return this._threshold;\n      }\n    }]);\n\n    return DynamicsCompressorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/dynamics-compressor-node-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = (isOffline ? createDynamicsCompressorNodeRenderer() : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n            setAudioNodeTailTime(this, 0.006);\n        }\n        get attack() {\n            return this._attack;\n        }\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}