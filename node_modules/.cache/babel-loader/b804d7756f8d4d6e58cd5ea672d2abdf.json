{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport var GrainPlayer = /*#__PURE__*/function (_Source) {\n  _inherits(GrainPlayer, _Source);\n\n  var _super = _createSuper(GrainPlayer);\n\n  function GrainPlayer() {\n    var _this;\n\n    _classCallCheck(this, GrainPlayer);\n\n    _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    _this._activeSources = [];\n    var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this._clock = new Clock({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      frequency: 1 / options.grainSize\n    });\n    _this._playbackRate = options.playbackRate;\n    _this._grainSize = options.grainSize;\n    _this._overlap = options.overlap;\n    _this.detune = options.detune; // setup\n\n    _this.overlap = options.overlap;\n    _this.loop = options.loop;\n    _this.playbackRate = options.playbackRate;\n    _this.grainSize = options.grainSize;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.reverse = options.reverse;\n\n    _this._clock.on(\"stop\", _this._onstop.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n\n  _createClass(GrainPlayer, [{\n    key: \"_start\",\n\n    /**\n     * Internal start method\n     */\n    value: function _start(time, offset, duration) {\n      offset = defaultArg(offset, 0);\n      offset = this.toSeconds(offset);\n      time = this.toSeconds(time);\n\n      var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n      this._clock.start(time, offset / grainSize);\n\n      if (duration) {\n        this.stop(time + this.toSeconds(duration));\n      }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"restart\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n\n      this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n\n  }, {\n    key: \"_onstop\",\n    value: function _onstop(time) {\n      // stop the players\n      this._activeSources.forEach(function (source) {\n        source.fadeOut = 0;\n        source.stop(time);\n      });\n\n      this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var _this2 = this;\n\n      // check if it should stop looping\n      var ticks = this._clock.getTicksAtTime(time);\n\n      var offset = ticks * this._grainSize;\n      this.log(\"offset\", offset);\n\n      if (!this.loop && offset > this.buffer.duration) {\n        this.stop(time);\n        return;\n      } // at the beginning of the file, the fade in should be 0\n\n\n      var fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n      var source = new ToneBufferSource({\n        context: this.context,\n        url: this.buffer,\n        fadeIn: fadeIn,\n        fadeOut: this._overlap,\n        loop: this.loop,\n        loopStart: this._loopStart,\n        loopEnd: this._loopEnd,\n        // compute the playbackRate based on the detune\n        playbackRate: intervalToFrequencyRatio(this.detune / 100)\n      }).connect(this.output);\n      source.start(time, this._grainSize * ticks);\n      source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n      this._activeSources.push(source); // remove it when it's done\n\n\n      source.onended = function () {\n        var index = _this2._activeSources.indexOf(source);\n\n        if (index !== -1) {\n          _this2._activeSources.splice(index, 1);\n        }\n      };\n    }\n    /**\n     * The playback rate of the sample\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"dispose\", this).call(this);\n\n      this.buffer.dispose();\n\n      this._clock.dispose();\n\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n\n      return this;\n    }\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      assertRange(rate, 0.001);\n      this._playbackRate = rate;\n      this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this.buffer.reverse;\n    },\n    set: function set(rev) {\n      this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n\n  }, {\n    key: \"grainSize\",\n    get: function get() {\n      return this._grainSize;\n    },\n    set: function set(size) {\n      this._grainSize = this.toSeconds(size);\n\n      this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(time) {\n      var computedTime = this.toSeconds(time);\n      assertRange(computedTime, 0);\n      this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this.buffer.loaded;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        onload: noOp,\n        onerror: noOp,\n        overlap: 0.1,\n        grainSize: 0.2,\n        playbackRate: 1,\n        detune: 0,\n        loop: false,\n        loopStart: 0,\n        loopEnd: 0,\n        reverse: false\n      });\n    }\n  }]);\n\n  return GrainPlayer;\n}(Source);","map":{"version":3,"sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source {\n    constructor() {\n        super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"GrainPlayer\";\n        /**\n         * Internal loopStart value\n         */\n        this._loopStart = 0;\n        /**\n         * Internal loopStart value\n         */\n        this._loopEnd = 0;\n        /**\n         * All of the currently playing BufferSources\n         */\n        this._activeSources = [];\n        const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this.buffer = new ToneAudioBuffer({\n            onload: options.onload,\n            onerror: options.onerror,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        this._clock = new Clock({\n            context: this.context,\n            callback: this._tick.bind(this),\n            frequency: 1 / options.grainSize\n        });\n        this._playbackRate = options.playbackRate;\n        this._grainSize = options.grainSize;\n        this._overlap = options.overlap;\n        this.detune = options.detune;\n        // setup\n        this.overlap = options.overlap;\n        this.loop = options.loop;\n        this.playbackRate = options.playbackRate;\n        this.grainSize = options.grainSize;\n        this.loopStart = options.loopStart;\n        this.loopEnd = options.loopEnd;\n        this.reverse = options.reverse;\n        this._clock.on(\"stop\", this._onstop.bind(this));\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            onload: noOp,\n            onerror: noOp,\n            overlap: 0.1,\n            grainSize: 0.2,\n            playbackRate: 1,\n            detune: 0,\n            loop: false,\n            loopStart: 0,\n            loopEnd: 0,\n            reverse: false\n        });\n    }\n    /**\n     * Internal start method\n     */\n    _start(time, offset, duration) {\n        offset = defaultArg(offset, 0);\n        offset = this.toSeconds(offset);\n        time = this.toSeconds(time);\n        const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n        this._clock.start(time, offset / grainSize);\n        if (duration) {\n            this.stop(time + this.toSeconds(duration));\n        }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    restart(time, offset, duration) {\n        super.restart(time, offset, duration);\n        return this;\n    }\n    _restart(time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n    _stop(time) {\n        this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n    _onstop(time) {\n        // stop the players\n        this._activeSources.forEach((source) => {\n            source.fadeOut = 0;\n            source.stop(time);\n        });\n        this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n    _tick(time) {\n        // check if it should stop looping\n        const ticks = this._clock.getTicksAtTime(time);\n        const offset = ticks * this._grainSize;\n        this.log(\"offset\", offset);\n        if (!this.loop && offset > this.buffer.duration) {\n            this.stop(time);\n            return;\n        }\n        // at the beginning of the file, the fade in should be 0\n        const fadeIn = offset < this._overlap ? 0 : this._overlap;\n        // create a buffer source\n        const source = new ToneBufferSource({\n            context: this.context,\n            url: this.buffer,\n            fadeIn: fadeIn,\n            fadeOut: this._overlap,\n            loop: this.loop,\n            loopStart: this._loopStart,\n            loopEnd: this._loopEnd,\n            // compute the playbackRate based on the detune\n            playbackRate: intervalToFrequencyRatio(this.detune / 100)\n        }).connect(this.output);\n        source.start(time, this._grainSize * ticks);\n        source.stop(time + this._grainSize / this.playbackRate);\n        // add it to the active sources\n        this._activeSources.push(source);\n        // remove it when it's done\n        source.onended = () => {\n            const index = this._activeSources.indexOf(source);\n            if (index !== -1) {\n                this._activeSources.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * The playback rate of the sample\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        assertRange(rate, 0.001);\n        this._playbackRate = rate;\n        this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n    get loopStart() {\n        return this._loopStart;\n    }\n    set loopStart(time) {\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(time), 0, this.buffer.duration);\n        }\n        this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n    get loopEnd() {\n        return this._loopEnd;\n    }\n    set loopEnd(time) {\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(time), 0, this.buffer.duration);\n        }\n        this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n    get reverse() {\n        return this.buffer.reverse;\n    }\n    set reverse(rev) {\n        this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n    get grainSize() {\n        return this._grainSize;\n    }\n    set grainSize(size) {\n        this._grainSize = this.toSeconds(size);\n        this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(time) {\n        const computedTime = this.toSeconds(time);\n        assertRange(computedTime, 0);\n        this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n    get loaded() {\n        return this.buffer.loaded;\n    }\n    dispose() {\n        super.dispose();\n        this.buffer.dispose();\n        this._clock.dispose();\n        this._activeSources.forEach((source) => source.dispose());\n        return this;\n    }\n}\n//# sourceMappingURL=GrainPlayer.js.map"]},"metadata":{},"sourceType":"module"}