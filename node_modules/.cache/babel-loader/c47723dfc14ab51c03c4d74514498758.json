{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\n\nexport var ToneOscillatorNode = /*#__PURE__*/function (_OneShotSource) {\n  _inherits(ToneOscillatorNode, _OneShotSource);\n\n  var _super = _createSuper(ToneOscillatorNode);\n\n  function ToneOscillatorNode() {\n    var _this;\n\n    _classCallCheck(this, ToneOscillatorNode);\n\n    _this = _super.call(this, optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n\n    _this._oscillator = _this.context.createOscillator();\n    _this._internalChannels = [_this._oscillator];\n    var options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(_this._oscillator, _this._gainNode);\n    _this.type = options.type;\n    _this.frequency = new Param({\n      context: _this.context,\n      param: _this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      param: _this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(ToneOscillatorNode, [{\n    key: \"start\",\n\n    /**\n     * Start the oscillator node at the given time\n     * @param  time When to start the oscillator\n     */\n    value: function start(time) {\n      var computedTime = this.toSeconds(time);\n      this.log(\"start\", computedTime);\n\n      this._startGain(computedTime);\n\n      this._oscillator.start(computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"_stopSource\",\n    value: function _stopSource(time) {\n      this._oscillator.stop(time);\n    }\n    /**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n     */\n\n  }, {\n    key: \"setPeriodicWave\",\n    value: function setPeriodicWave(periodicWave) {\n      this._oscillator.setPeriodicWave(periodicWave);\n\n      return this;\n    }\n    /**\n     * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n     */\n\n  }, {\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneOscillatorNode.prototype), \"dispose\", this).call(this);\n\n      if (this.state === \"started\") {\n        this.stop();\n      }\n\n      this._oscillator.disconnect();\n\n      this.frequency.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._oscillator.type;\n    },\n    set: function set(type) {\n      this._oscillator.type = type;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(OneShotSource.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        type: \"sine\"\n      });\n    }\n  }]);\n\n  return ToneOscillatorNode;\n}(OneShotSource);","map":{"version":3,"sources":["../../../../Tone/source/oscillator/ToneOscillatorNode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource {\n    constructor() {\n        super(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n        this.name = \"ToneOscillatorNode\";\n        /**\n         * The oscillator\n         */\n        this._oscillator = this.context.createOscillator();\n        this._internalChannels = [this._oscillator];\n        const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        connect(this._oscillator, this._gainNode);\n        this.type = options.type;\n        this.frequency = new Param({\n            context: this.context,\n            param: this._oscillator.frequency,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Param({\n            context: this.context,\n            param: this._oscillator.detune,\n            units: \"cents\",\n            value: options.detune,\n        });\n        readOnly(this, [\"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            type: \"sine\",\n        });\n    }\n    /**\n     * Start the oscillator node at the given time\n     * @param  time When to start the oscillator\n     */\n    start(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._oscillator.start(computedTime);\n        return this;\n    }\n    _stopSource(time) {\n        this._oscillator.stop(time);\n    }\n    /**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n     */\n    setPeriodicWave(periodicWave) {\n        this._oscillator.setPeriodicWave(periodicWave);\n        return this;\n    }\n    /**\n     * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n     */\n    get type() {\n        return this._oscillator.type;\n    }\n    set type(type) {\n        this._oscillator.type = type;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._oscillator.disconnect();\n        this.frequency.dispose();\n        this.detune.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneOscillatorNode.js.map"]},"metadata":{},"sourceType":"module"}