{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The BlurXFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction BlurXFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  fs.readFileSync(__dirname + '/blurX.vert', 'utf8'), // fragment shader\n  fs.readFileSync(__dirname + '/blur.frag', 'utf8'), // set the uniforms\n  {\n    strength: {\n      type: '1f',\n      value: 1\n    }\n  });\n  /**\n   * Sets the number of passes for blur. More passes means higher quaility bluring.\n   *\n   * @member {number}\n   * @memberof BlurXFilter#\n   * @default 1\n   */\n\n  this.passes = 1;\n  this.strength = 4;\n}\n\nBlurXFilter.prototype = Object.create(core.AbstractFilter.prototype);\nBlurXFilter.prototype.constructor = BlurXFilter;\nmodule.exports = BlurXFilter;\n\nBlurXFilter.prototype.applyFilter = function (renderer, input, output, clear) {\n  var shader = this.getShader(renderer);\n  this.uniforms.strength.value = this.strength / 4 / this.passes * (input.frame.width / input.size.width);\n\n  if (this.passes === 1) {\n    renderer.filterManager.applyFilter(shader, input, output, clear);\n  } else {\n    var renderTarget = renderer.filterManager.getRenderTarget(true);\n    var flip = input;\n    var flop = renderTarget;\n\n    for (var i = 0; i < this.passes - 1; i++) {\n      renderer.filterManager.applyFilter(shader, flip, flop, true);\n      var temp = flop;\n      flop = flip;\n      flip = temp;\n    }\n\n    renderer.filterManager.applyFilter(shader, flip, output, clear);\n    renderer.filterManager.returnRenderTarget(renderTarget);\n  }\n};\n\nObject.defineProperties(BlurXFilter.prototype, {\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @memberof BlurXFilter#\n   * @default 2\n   */\n  blur: {\n    get: function () {\n      return this.strength;\n    },\n    set: function (value) {\n      this.padding = Math.abs(value) * 0.5;\n      this.strength = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/blur/BlurXFilter.js"],"names":["core","require","fs","BlurXFilter","AbstractFilter","call","readFileSync","__dirname","strength","type","value","passes","prototype","Object","create","constructor","module","exports","applyFilter","renderer","input","output","clear","shader","getShader","uniforms","frame","width","size","filterManager","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","defineProperties","blur","get","set","padding","Math","abs"],"mappings":"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","sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The BlurXFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction BlurXFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        fs.readFileSync(__dirname + '/blurX.vert', 'utf8'),\n        // fragment shader\n        fs.readFileSync(__dirname + '/blur.frag', 'utf8'),\n        // set the uniforms\n        {\n            strength: { type: '1f', value: 1 }\n        }\n    );\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @memberof BlurXFilter#\n     * @default 1\n     */\n    this.passes = 1;\n\n    this.strength = 4;\n}\n\nBlurXFilter.prototype = Object.create(core.AbstractFilter.prototype);\nBlurXFilter.prototype.constructor = BlurXFilter;\nmodule.exports = BlurXFilter;\n\nBlurXFilter.prototype.applyFilter = function (renderer, input, output, clear)\n{\n    var shader = this.getShader(renderer);\n\n    this.uniforms.strength.value = this.strength / 4 / this.passes * (input.frame.width / input.size.width);\n\n    if(this.passes === 1)\n    {\n        renderer.filterManager.applyFilter(shader, input, output, clear);\n    }\n    else\n    {\n        var renderTarget = renderer.filterManager.getRenderTarget(true);\n        var flip = input;\n        var flop = renderTarget;\n\n        for(var i = 0; i < this.passes-1; i++)\n        {\n            renderer.filterManager.applyFilter(shader, flip, flop, true);\n\n           var temp = flop;\n           flop = flip;\n           flip = temp;\n        }\n\n        renderer.filterManager.applyFilter(shader, flip, output, clear);\n\n        renderer.filterManager.returnRenderTarget(renderTarget);\n    }\n};\n\n\nObject.defineProperties(BlurXFilter.prototype, {\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @memberof BlurXFilter#\n     * @default 2\n     */\n    blur: {\n        get: function ()\n        {\n            return  this.strength;\n        },\n        set: function (value)\n        {\n            this.padding =  Math.abs(value) * 0.5;\n            this.strength = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}