{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport var MultibandSplit = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandSplit, _ToneAudioNode);\n\n  var _super = _createSuper(MultibandSplit);\n\n  function MultibandSplit() {\n    var _this;\n\n    _classCallCheck(this, MultibandSplit);\n\n    _this = _super.call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    _this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    _this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    _this.low = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    _this._lowMidFilter = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    _this.mid = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    _this.high = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    _this._internalChannels = [_this.low, _this.mid, _this.high];\n    var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    _this.lowFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    _this.highFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n\n    _this.input.fan(_this.low, _this.high);\n\n    _this.input.chain(_this._lowMidFilter, _this.mid); // the frequency control signal\n\n\n    _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n\n    _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency); // the Q value\n\n\n    _this.Q.connect(_this.low.Q);\n\n    _this.Q.connect(_this._lowMidFilter.Q);\n\n    _this.Q.connect(_this.mid.Q);\n\n    _this.Q.connect(_this.high.Q);\n\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandSplit, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandSplit.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n      this.low.dispose();\n\n      this._lowMidFilter.dispose();\n\n      this.mid.dispose();\n      this.high.dispose();\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        highFrequency: 2500,\n        lowFrequency: 400\n      });\n    }\n  }]);\n\n  return MultibandSplit;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n        this.name = \"MultibandSplit\";\n        /**\n         * the input\n         */\n        this.input = new Gain({ context: this.context });\n        /**\n         * no output node, use either low, mid or high outputs\n         */\n        this.output = undefined;\n        /**\n         * The low band.\n         */\n        this.low = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * the lower filter of the mid band\n         */\n        this._lowMidFilter = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        /**\n         * The mid band output.\n         */\n        this.mid = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * The high band output.\n         */\n        this.high = new Filter({\n            context: this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        this._internalChannels = [this.low, this.mid, this.high];\n        const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n        this.lowFrequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.lowFrequency,\n        });\n        this.highFrequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.highFrequency,\n        });\n        this.Q = new Signal({\n            context: this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        this.input.fan(this.low, this.high);\n        this.input.chain(this._lowMidFilter, this.mid);\n        // the frequency control signal\n        this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n        this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n        // the Q value\n        this.Q.connect(this.low.Q);\n        this.Q.connect(this._lowMidFilter.Q);\n        this.Q.connect(this.mid.Q);\n        this.Q.connect(this.high.Q);\n        readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            highFrequency: 2500,\n            lowFrequency: 400,\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n        this.low.dispose();\n        this._lowMidFilter.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.lowFrequency.dispose();\n        this.highFrequency.dispose();\n        this.Q.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MultibandSplit.js.map"]},"metadata":{},"sourceType":"module"}