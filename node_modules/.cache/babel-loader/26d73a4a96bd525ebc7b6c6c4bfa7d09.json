{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport var Convolver = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Convolver, _ToneAudioNode);\n\n  var _super = _createSuper(Convolver);\n\n  function Convolver() {\n    var _this;\n\n    _classCallCheck(this, Convolver);\n\n    _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    _this._convolver = _this.context.createConvolver();\n    var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n      _this.buffer = buffer;\n      options.onload();\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (_this._buffer.loaded) {\n      _this.buffer = _this._buffer;\n    } // initially set normalization\n\n\n    _this.normalize = options.normalize; // connect it up\n\n    _this.input.chain(_this._convolver, _this.output);\n\n    return _this;\n  }\n\n  _createClass(Convolver, [{\n    key: \"load\",\n\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    value: function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._buffer.load(url);\n\n              case 2:\n                this.buffer = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * The convolver's buffer\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Convolver.prototype), \"dispose\", this).call(this);\n\n      this._buffer.dispose();\n\n      this._convolver.disconnect();\n\n      return this;\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      if (this._buffer.length) {\n        return this._buffer;\n      } else {\n        return null;\n      }\n    },\n    set: function set(buffer) {\n      if (buffer) {\n        this._buffer.set(buffer);\n      } // if it's already got a buffer, create a new one\n\n\n      if (this._convolver.buffer) {\n        // disconnect the old one\n        this.input.disconnect();\n\n        this._convolver.disconnect(); // create and connect a new one\n\n\n        this._convolver = this.context.createConvolver();\n        this.input.chain(this._convolver, this.output);\n      }\n\n      var buff = this._buffer.get();\n\n      this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n\n  }, {\n    key: \"normalize\",\n    get: function get() {\n      return this._convolver.normalize;\n    },\n    set: function set(norm) {\n      this._convolver.normalize = norm;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalize: true,\n        onload: noOp\n      });\n    }\n  }]);\n\n  return Convolver;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/filter/Convolver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n        this.name = \"Convolver\";\n        /**\n         * The native ConvolverNode\n         */\n        this._convolver = this.context.createConvolver();\n        const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n        this._buffer = new ToneAudioBuffer(options.url, buffer => {\n            this.buffer = buffer;\n            options.onload();\n        });\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        // set if it's already loaded, set it immediately\n        if (this._buffer.loaded) {\n            this.buffer = this._buffer;\n        }\n        // initially set normalization\n        this.normalize = options.normalize;\n        // connect it up\n        this.input.chain(this._convolver, this.output);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            normalize: true,\n            onload: noOp,\n        });\n    }\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.buffer = yield this._buffer.load(url);\n        });\n    }\n    /**\n     * The convolver's buffer\n     */\n    get buffer() {\n        if (this._buffer.length) {\n            return this._buffer;\n        }\n        else {\n            return null;\n        }\n    }\n    set buffer(buffer) {\n        if (buffer) {\n            this._buffer.set(buffer);\n        }\n        // if it's already got a buffer, create a new one\n        if (this._convolver.buffer) {\n            // disconnect the old one\n            this.input.disconnect();\n            this._convolver.disconnect();\n            // create and connect a new one\n            this._convolver = this.context.createConvolver();\n            this.input.chain(this._convolver, this.output);\n        }\n        const buff = this._buffer.get();\n        this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n    get normalize() {\n        return this._convolver.normalize;\n    }\n    set normalize(norm) {\n        this._convolver.normalize = norm;\n    }\n    dispose() {\n        super.dispose();\n        this._buffer.dispose();\n        this._convolver.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Convolver.js.map"]},"metadata":{},"sourceType":"module"}