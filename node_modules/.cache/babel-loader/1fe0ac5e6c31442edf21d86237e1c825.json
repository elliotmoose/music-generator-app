{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\n\nexport var Analyser = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Analyser, _ToneAudioNode);\n\n  var _super = _createSuper(Analyser);\n\n  function Analyser() {\n    var _this;\n\n    _classCallCheck(this, Analyser);\n\n    _this = _super.call(this, optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n    _this.name = \"Analyser\";\n    /**\n     * The analyser node.\n     */\n\n    _this._analysers = [];\n    /**\n     * The buffer that the FFT data is written to\n     */\n\n    _this._buffers = [];\n    var options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n    _this.input = _this.output = _this._gain = new Gain({\n      context: _this.context\n    });\n    _this._split = new Split({\n      context: _this.context,\n      channels: options.channels\n    });\n\n    _this.input.connect(_this._split);\n\n    assertRange(options.channels, 1); // create the analysers\n\n    for (var channel = 0; channel < options.channels; channel++) {\n      _this._analysers[channel] = _this.context.createAnalyser();\n\n      _this._split.connect(_this._analysers[channel], channel, 0);\n    } // set the values initially\n\n\n    _this.size = options.size;\n    _this.type = options.type;\n    return _this;\n  }\n\n  _createClass(Analyser, [{\n    key: \"getValue\",\n\n    /**\n     * Run the analysis given the current settings. If [[channels]] = 1,\n     * it will return a Float32Array. If [[channels]] > 1, it will\n     * return an array of Float32Arrays where each index in the array\n     * represents the analysis done on a channel.\n     */\n    value: function getValue() {\n      var _this2 = this;\n\n      this._analysers.forEach(function (analyser, index) {\n        var buffer = _this2._buffers[index];\n\n        if (_this2._type === \"fft\") {\n          analyser.getFloatFrequencyData(buffer);\n        } else if (_this2._type === \"waveform\") {\n          analyser.getFloatTimeDomainData(buffer);\n        }\n      });\n\n      if (this.channels === 1) {\n        return this._buffers[0];\n      } else {\n        return this._buffers;\n      }\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     */\n\n  }, {\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(Analyser.prototype), \"dispose\", this).call(this);\n\n      this._analysers.forEach(function (a) {\n        return a.disconnect();\n      });\n\n      this._split.dispose();\n\n      this._gain.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analysers[0].frequencyBinCount;\n    },\n    set: function set(size) {\n      var _this3 = this;\n\n      this._analysers.forEach(function (analyser, index) {\n        analyser.fftSize = size * 2;\n        _this3._buffers[index] = new Float32Array(size);\n      });\n    }\n    /**\n     * The number of channels the analyser does the analysis on. Channel\n     * separation is done using [[Split]]\n     */\n\n  }, {\n    key: \"channels\",\n    get: function get() {\n      return this._analysers.length;\n    }\n    /**\n     * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      assert(type === \"waveform\" || type === \"fft\", \"Analyser: invalid type: \".concat(type));\n      this._type = type;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._analysers[0].smoothingTimeConstant;\n    },\n    set: function set(val) {\n      this._analysers.forEach(function (a) {\n        return a.smoothingTimeConstant = val;\n      });\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        size: 1024,\n        smoothing: 0.8,\n        type: \"fft\",\n        channels: 1\n      });\n    }\n  }]);\n\n  return Analyser;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/analysis/Analyser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n        this.name = \"Analyser\";\n        /**\n         * The analyser node.\n         */\n        this._analysers = [];\n        /**\n         * The buffer that the FFT data is written to\n         */\n        this._buffers = [];\n        const options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n        this.input = this.output = this._gain = new Gain({ context: this.context });\n        this._split = new Split({\n            context: this.context,\n            channels: options.channels,\n        });\n        this.input.connect(this._split);\n        assertRange(options.channels, 1);\n        // create the analysers\n        for (let channel = 0; channel < options.channels; channel++) {\n            this._analysers[channel] = this.context.createAnalyser();\n            this._split.connect(this._analysers[channel], channel, 0);\n        }\n        // set the values initially\n        this.size = options.size;\n        this.type = options.type;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            size: 1024,\n            smoothing: 0.8,\n            type: \"fft\",\n            channels: 1,\n        });\n    }\n    /**\n     * Run the analysis given the current settings. If [[channels]] = 1,\n     * it will return a Float32Array. If [[channels]] > 1, it will\n     * return an array of Float32Arrays where each index in the array\n     * represents the analysis done on a channel.\n     */\n    getValue() {\n        this._analysers.forEach((analyser, index) => {\n            const buffer = this._buffers[index];\n            if (this._type === \"fft\") {\n                analyser.getFloatFrequencyData(buffer);\n            }\n            else if (this._type === \"waveform\") {\n                analyser.getFloatTimeDomainData(buffer);\n            }\n        });\n        if (this.channels === 1) {\n            return this._buffers[0];\n        }\n        else {\n            return this._buffers;\n        }\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     */\n    get size() {\n        return this._analysers[0].frequencyBinCount;\n    }\n    set size(size) {\n        this._analysers.forEach((analyser, index) => {\n            analyser.fftSize = size * 2;\n            this._buffers[index] = new Float32Array(size);\n        });\n    }\n    /**\n     * The number of channels the analyser does the analysis on. Channel\n     * separation is done using [[Split]]\n     */\n    get channels() {\n        return this._analysers.length;\n    }\n    /**\n     * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n        this._type = type;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n    get smoothing() {\n        return this._analysers[0].smoothingTimeConstant;\n    }\n    set smoothing(val) {\n        this._analysers.forEach(a => a.smoothingTimeConstant = val);\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._analysers.forEach(a => a.disconnect());\n        this._split.dispose();\n        this._gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Analyser.js.map"]},"metadata":{},"sourceType":"module"}