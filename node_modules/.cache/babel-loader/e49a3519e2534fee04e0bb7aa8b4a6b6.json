{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\n\nexport var Meter = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Meter, _MeterBase);\n\n  var _super = _createSuper(Meter);\n\n  function Meter() {\n    var _this;\n\n    _classCallCheck(this, Meter);\n\n    _this = _super.call(this, optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    _this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    _this._rms = 0;\n    var options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    _this.input = _this.output = _this._analyser = new Analyser({\n      context: _this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    _this.smoothing = options.smoothing, _this.normalRange = options.normalRange;\n    return _this;\n  }\n\n  _createClass(Meter, [{\n    key: \"getLevel\",\n\n    /**\n     * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n     * @deprecated\n     */\n    value: function getLevel() {\n      warn(\"'getLevel' has been changed to 'getValue'\");\n      return this.getValue();\n    }\n    /**\n     * Get the current value of the incoming signal.\n     * Output is in decibels when [[normalRange]] is `false`.\n     * If [[channels]] = 1, then the output is a single number\n     * representing the value of the input signal. When [[channels]] > 1,\n     * then each channel is returned as a value in a number array.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _this2 = this;\n\n      var aValues = this._analyser.getValue();\n\n      var channelValues = this.channels === 1 ? [aValues] : aValues;\n      var vals = channelValues.map(function (values) {\n        var totalSquared = values.reduce(function (total, current) {\n          return total + current * current;\n        }, 0);\n        var rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n        // but can jump up instantly\n\n        _this2._rms = Math.max(rms, _this2._rms * _this2.smoothing);\n        return _this2.normalRange ? _this2._rms : gainToDb(_this2._rms);\n      });\n\n      if (this.channels === 1) {\n        return vals[0];\n      } else {\n        return vals;\n      }\n    }\n    /**\n     * The number of channels of analysis.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Meter.prototype), \"dispose\", this).call(this);\n\n      this._analyser.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"channels\",\n    get: function get() {\n      return this._analyser.channels;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        smoothing: 0.8,\n        normalRange: false,\n        channels: 1\n      });\n    }\n  }]);\n\n  return Meter;\n}(MeterBase);","map":{"version":3,"sources":["../../../../Tone/component/analysis/Meter.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,QAAT,QAAyB,6BAAzB;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AACA,SAAS,IAAT,QAAqB,uBAArB;AACA,SAAS,QAAT,QAAyB,YAAzB;AAQA;;;;;;;;;;;;;AAaG;;AACH,WAAa,KAAb;AAAA;;AAAA;;AA0BC,mBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAA1B;AAzBQ,UAAA,IAAA,GAAe,OAAf;AAcT;;AAEG;;AACK,UAAA,IAAA,GAAO,CAAP;AASP,QAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAApC;AAEA,UAAK,KAAL,GAAa,MAAK,MAAL,GAAc,MAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AACxD,MAAA,OAAO,EAAE,MAAK,OAD0C;AAExD,MAAA,IAAI,EAAE,GAFkD;AAGxD,MAAA,IAAI,EAAE,UAHkD;AAIxD,MAAA,QAAQ,EAAE,OAAO,CAAC;AAJsC,KAAb,CAA5C;AAOA,UAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB,EACA,MAAK,WAAL,GAAmB,OAAO,CAAC,WAD3B;AAXD;AAaC;;AAvCF;AAAA;;AAiDC;;;AAGG;AApDJ,+BAqDS;AACP,MAAA,IAAI,CAAC,2CAAD,CAAJ;AACA,aAAO,KAAK,QAAL,EAAP;AACA;AAED;;;;;;AAMG;;AAhEJ;AAAA;AAAA,+BAiES;AAAA;;AACP,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,QAAf,EAAhB;;AACA,UAAM,aAAa,GAAG,KAAK,QAAL,KAAkB,CAAlB,GAAsB,CAAC,OAAD,CAAtB,GAAkD,OAAxE;AACA,UAAM,IAAI,GAAG,aAAa,CAAC,GAAd,CAAkB,UAAA,MAAM,EAAG;AACvC,YAAM,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,UAAC,KAAD,EAAQ,OAAR;AAAA,iBAAoB,KAAK,GAAG,OAAO,GAAG,OAAtC;AAAA,SAAd,EAA6D,CAA7D,CAArB;AACA,YAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,MAAM,CAAC,MAAhC,CAAZ,CAFuC,CAGvC;AACA;;AACA,QAAA,MAAI,CAAC,IAAL,GAAY,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,MAAI,CAAC,IAAL,GAAY,MAAI,CAAC,SAA/B,CAAZ;AACA,eAAO,MAAI,CAAC,WAAL,GAAmB,MAAI,CAAC,IAAxB,GAA+B,QAAQ,CAAC,MAAI,CAAC,IAAN,CAA9C;AACA,OAPY,CAAb;;AAQA,UAAI,KAAK,QAAL,KAAkB,CAAtB,EAAyB;AACxB,eAAO,IAAI,CAAC,CAAD,CAAX;AACA,OAFD,MAEO;AACN,eAAO,IAAP;AACA;AACD;AAED;;AAEG;;AArFJ;AAAA;AAAA,8BA0FQ;AACN;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,aAAO,IAAP;AACA;AA9FF;AAAA;AAAA,wBAsFa;AACX,aAAO,KAAK,SAAL,CAAe,QAAtB;AACA;AAxFF;AAAA;AAAA,kCAyCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,QAAA,SAAS,EAAE,GADkC;AAE7C,QAAA,WAAW,EAAE,KAFgC;AAG7C,QAAA,QAAQ,EAAE;AAHmC,OAAvC,CAAP;AAKA;AA/CF;;AAAA;AAAA,EAA2B,SAA3B","sourceRoot":"","sourcesContent":["import { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase {\n    constructor() {\n        super(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n        this.name = \"Meter\";\n        /**\n         * The previous frame's value\n         */\n        this._rms = 0;\n        const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n        this.input = this.output = this._analyser = new Analyser({\n            context: this.context,\n            size: 256,\n            type: \"waveform\",\n            channels: options.channels,\n        });\n        this.smoothing = options.smoothing,\n            this.normalRange = options.normalRange;\n    }\n    static getDefaults() {\n        return Object.assign(MeterBase.getDefaults(), {\n            smoothing: 0.8,\n            normalRange: false,\n            channels: 1,\n        });\n    }\n    /**\n     * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n     * @deprecated\n     */\n    getLevel() {\n        warn(\"'getLevel' has been changed to 'getValue'\");\n        return this.getValue();\n    }\n    /**\n     * Get the current value of the incoming signal.\n     * Output is in decibels when [[normalRange]] is `false`.\n     * If [[channels]] = 1, then the output is a single number\n     * representing the value of the input signal. When [[channels]] > 1,\n     * then each channel is returned as a value in a number array.\n     */\n    getValue() {\n        const aValues = this._analyser.getValue();\n        const channelValues = this.channels === 1 ? [aValues] : aValues;\n        const vals = channelValues.map(values => {\n            const totalSquared = values.reduce((total, current) => total + current * current, 0);\n            const rms = Math.sqrt(totalSquared / values.length);\n            // the rms can only fall at the rate of the smoothing\n            // but can jump up instantly\n            this._rms = Math.max(rms, this._rms * this.smoothing);\n            return this.normalRange ? this._rms : gainToDb(this._rms);\n        });\n        if (this.channels === 1) {\n            return vals[0];\n        }\n        else {\n            return vals;\n        }\n    }\n    /**\n     * The number of channels of analysis.\n     */\n    get channels() {\n        return this._analyser.channels;\n    }\n    dispose() {\n        super.dispose();\n        this._analyser.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Meter.js.map"]},"metadata":{},"sourceType":"module"}