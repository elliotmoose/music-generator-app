{"ast":null,"code":"var SystemRenderer = require('../SystemRenderer'),\n    ShaderManager = require('./managers/ShaderManager'),\n    MaskManager = require('./managers/MaskManager'),\n    StencilManager = require('./managers/StencilManager'),\n    FilterManager = require('./managers/FilterManager'),\n    BlendModeManager = require('./managers/BlendModeManager'),\n    RenderTarget = require('./utils/RenderTarget'),\n    ObjectRenderer = require('./utils/ObjectRenderer'),\n    FXAAFilter = require('./filters/FXAAFilter'),\n    utils = require('../../utils'),\n    CONST = require('../../const');\n/**\n * The WebGLRenderer draws the scene and all its content onto a webGL enabled canvas. This renderer\n * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.\n * So no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.SystemRenderer\n * @param [width=0] {number} the width of the canvas view\n * @param [height=0] {number} the height of the canvas view\n * @param [options] {object} The optional renderer parameters\n * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n * @param [options.autoResize=false] {boolean} If the render view is automatically resized, default false\n * @param [options.antialias=false] {boolean} sets antialias. If not available natively then FXAA antialiasing is used\n * @param [options.forceFXAA=false] {boolean} forces FXAA antialiasing to be used over native. FXAA is faster, but may not always lok as great\n * @param [options.resolution=1] {number} the resolution of the renderer retina would be 2\n * @param [options.clearBeforeRender=true] {boolean} This sets if the CanvasRenderer will clear the canvas or\n *      not before the new render pass.\n * @param [options.preserveDrawingBuffer=false] {boolean} enables drawing buffer preservation, enable this if\n *      you need to call toDataUrl on the webgl context.\n */\n\n\nfunction WebGLRenderer(width, height, options) {\n  options = options || {};\n  SystemRenderer.call(this, 'WebGL', width, height, options);\n  /**\n   * The type of this renderer as a standardised const\n   *\n   * @member {number}\n   *\n   */\n\n  this.type = CONST.RENDERER_TYPE.WEBGL;\n  this.handleContextLost = this.handleContextLost.bind(this);\n  this.handleContextRestored = this.handleContextRestored.bind(this);\n  this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n  this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false); //TODO possibility to force FXAA as it may offer better performance?\n\n  /**\n   * Does it use FXAA ?\n   *\n   * @member {boolean}\n   * @private\n   */\n\n  this._useFXAA = !!options.forceFXAA && options.antialias;\n  /**\n   * The fxaa filter\n   *\n   * @member {FXAAFilter}\n   * @private\n   */\n\n  this._FXAAFilter = null;\n  /**\n   * The options passed in to create a new webgl context.\n   *\n   * @member {object}\n   * @private\n   */\n\n  this._contextOptions = {\n    alpha: this.transparent,\n    antialias: options.antialias,\n    premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n    stencil: true,\n    preserveDrawingBuffer: options.preserveDrawingBuffer\n  };\n  /**\n   * Counter for the number of draws made each frame\n   *\n   * @member {number}\n   */\n\n  this.drawCount = 0;\n  /**\n   * Deals with managing the shader programs and their attribs.\n   *\n   * @member {ShaderManager}\n   */\n\n  this.shaderManager = new ShaderManager(this);\n  /**\n   * Manages the masks using the stencil buffer.\n   *\n   * @member {MaskManager}\n   */\n\n  this.maskManager = new MaskManager(this);\n  /**\n   * Manages the stencil buffer.\n   *\n   * @member {StencilManager}\n   */\n\n  this.stencilManager = new StencilManager(this);\n  /**\n   * Manages the filters.\n   *\n   * @member {FilterManager}\n   */\n\n  this.filterManager = new FilterManager(this);\n  /**\n   * Manages the blendModes\n   * @member {BlendModeManager}\n   */\n\n  this.blendModeManager = new BlendModeManager(this);\n  /**\n   * Holds the current render target\n   * @member {Object}\n   */\n\n  this.currentRenderTarget = null;\n  /**\n   * object renderer @alvin\n   * @member {ObjectRenderer}\n   */\n\n  this.currentRenderer = new ObjectRenderer(this);\n  this.initPlugins(); // initialize the context so it is ready for the managers.\n\n  this._createContext();\n\n  this._initContext(); // map some webGL blend modes..\n\n\n  this._mapGlModes();\n  /**\n   * An array of render targets\n   * @member {Array}\n   * @private\n   */\n\n\n  this._renderTargetStack = [];\n} // constructor\n\n\nWebGLRenderer.prototype = Object.create(SystemRenderer.prototype);\nWebGLRenderer.prototype.constructor = WebGLRenderer;\nmodule.exports = WebGLRenderer;\nutils.pluginTarget.mixin(WebGLRenderer);\nWebGLRenderer.glContextId = 0;\n\nWebGLRenderer.prototype._createContext = function () {\n  var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n  this.gl = gl;\n\n  if (!gl) {\n    // fail, not able to get a context\n    throw new Error('This browser does not support webGL. Try using the canvas renderer');\n  }\n\n  this.glContextId = WebGLRenderer.glContextId++;\n  gl.id = this.glContextId;\n  gl.renderer = this;\n};\n/**\n * Creates the WebGL context\n * @private\n */\n\n\nWebGLRenderer.prototype._initContext = function () {\n  var gl = this.gl; // set up the default pixi settings..\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.CULL_FACE);\n  gl.enable(gl.BLEND);\n  this.renderTarget = new RenderTarget(gl, this.width, this.height, null, this.resolution, true);\n  this.setRenderTarget(this.renderTarget);\n  this.emit('context', gl); // setup the width/height properties and gl viewport\n\n  this.resize(this.width, this.height);\n\n  if (!this._useFXAA) {\n    this._useFXAA = this._contextOptions.antialias && !gl.getContextAttributes().antialias;\n  }\n\n  if (this._useFXAA) {\n    window.console.warn('FXAA antialiasing being used instead of native antialiasing');\n    this._FXAAFilter = [new FXAAFilter()];\n  }\n};\n/**\n * Renders the object to its webGL view\n *\n * @param object {DisplayObject} the object to be rendered\n */\n\n\nWebGLRenderer.prototype.render = function (object) {\n  // no point rendering if our context has been blown up!\n  if (this.gl.isContextLost()) {\n    return;\n  }\n\n  this.drawCount = 0;\n  this._lastObjectRendered = object;\n\n  if (this._useFXAA) {\n    this._FXAAFilter[0].uniforms.resolution.value.x = this.width;\n    this._FXAAFilter[0].uniforms.resolution.value.y = this.height;\n    object.filterArea = this.renderTarget.size;\n    object.filters = this._FXAAFilter;\n  }\n\n  var cacheParent = object.parent;\n  object.parent = this._tempDisplayObjectParent; // update the scene graph\n\n  object.updateTransform();\n  object.parent = cacheParent;\n  var gl = this.gl; // make sure we are bound to the main frame buffer\n\n  this.setRenderTarget(this.renderTarget);\n\n  if (this.clearBeforeRender) {\n    if (this.transparent) {\n      gl.clearColor(0, 0, 0, 0);\n    } else {\n      gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  this.renderDisplayObject(object, this.renderTarget); //this.projection);\n};\n/**\n * Renders a Display Object.\n *\n * @param displayObject {DisplayObject} The DisplayObject to render\n * @param renderTarget {RenderTarget} The render target to use to render this display object\n *\n */\n\n\nWebGLRenderer.prototype.renderDisplayObject = function (displayObject, renderTarget, clear) //projection, buffer)\n{\n  // TODO is this needed...\n  //this.blendModeManager.setBlendMode(CONST.BLEND_MODES.NORMAL);\n  this.setRenderTarget(renderTarget);\n\n  if (clear) {\n    renderTarget.clear();\n  } // start the filter manager\n\n\n  this.filterManager.setFilterStack(renderTarget.filterStack); // render the scene!\n\n  displayObject.renderWebGL(this); // finish the current renderer..\n\n  this.currentRenderer.flush();\n};\n/**\n * Changes the current renderer to the one given in parameter\n *\n * @param objectRenderer {Object} TODO @alvin\n *\n */\n\n\nWebGLRenderer.prototype.setObjectRenderer = function (objectRenderer) {\n  if (this.currentRenderer === objectRenderer) {\n    return;\n  }\n\n  this.currentRenderer.stop();\n  this.currentRenderer = objectRenderer;\n  this.currentRenderer.start();\n};\n/**\n * Changes the current render target to the one given in parameter\n *\n * @param renderTarget {RenderTarget} the new render target\n *\n */\n\n\nWebGLRenderer.prototype.setRenderTarget = function (renderTarget) {\n  if (this.currentRenderTarget === renderTarget) {\n    return;\n  } // TODO - maybe down the line this should be a push pos thing? Leaving for now though.\n\n\n  this.currentRenderTarget = renderTarget;\n  this.currentRenderTarget.activate();\n  this.stencilManager.setMaskStack(renderTarget.stencilMaskStack);\n};\n/**\n * Resizes the webGL view to the specified width and height.\n *\n * @param width {number} the new width of the webGL view\n * @param height {number} the new height of the webGL view\n */\n\n\nWebGLRenderer.prototype.resize = function (width, height) {\n  SystemRenderer.prototype.resize.call(this, width, height);\n  this.filterManager.resize(width, height);\n  this.renderTarget.resize(width, height);\n\n  if (this.currentRenderTarget === this.renderTarget) {\n    this.renderTarget.activate();\n    this.gl.viewport(0, 0, this.width, this.height);\n  }\n};\n/**\n * Updates and/or Creates a WebGL texture for the renderer's context.\n *\n * @param texture {BaseTexture|Texture} the texture to update\n */\n\n\nWebGLRenderer.prototype.updateTexture = function (texture) {\n  texture = texture.baseTexture || texture;\n\n  if (!texture.hasLoaded) {\n    return;\n  }\n\n  var gl = this.gl;\n\n  if (!texture._glTextures[gl.id]) {\n    texture._glTextures[gl.id] = gl.createTexture();\n    texture.on('update', this.updateTexture, this);\n    texture.on('dispose', this.destroyTexture, this);\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n\n  if (texture.mipmap && texture.isPowerOfTwo) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n  }\n\n  if (!texture.isPowerOfTwo) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n  }\n\n  return texture._glTextures[gl.id];\n};\n/**\n * Deletes the texture from WebGL\n *\n * @param texture {BaseTexture|Texture} the texture to destroy\n */\n\n\nWebGLRenderer.prototype.destroyTexture = function (texture) {\n  texture = texture.baseTexture || texture;\n\n  if (!texture.hasLoaded) {\n    return;\n  }\n\n  if (texture._glTextures[this.gl.id]) {\n    this.gl.deleteTexture(texture._glTextures[this.gl.id]);\n  }\n};\n/**\n * Handles a lost webgl context\n *\n * @param event {Event}\n * @private\n */\n\n\nWebGLRenderer.prototype.handleContextLost = function (event) {\n  event.preventDefault();\n};\n/**\n * Handles a restored webgl context\n *\n * @param event {Event}\n * @private\n */\n\n\nWebGLRenderer.prototype.handleContextRestored = function () {\n  this._initContext(); // empty all the old gl textures as they are useless now\n\n\n  for (var key in utils.BaseTextureCache) {\n    utils.BaseTextureCache[key]._glTextures.length = 0;\n  }\n};\n/**\n * Removes everything from the renderer (event listeners, spritebatch, etc...)\n *\n * @param [removeView=false] {boolean} Removes the Canvas element from the DOM.\n */\n\n\nWebGLRenderer.prototype.destroy = function (removeView) {\n  this.destroyPlugins(); // remove listeners\n\n  this.view.removeEventListener('webglcontextlost', this.handleContextLost);\n  this.view.removeEventListener('webglcontextrestored', this.handleContextRestored); // call base destroy\n\n  SystemRenderer.prototype.destroy.call(this, removeView);\n  this.uid = 0; // destroy the managers\n\n  this.shaderManager.destroy();\n  this.maskManager.destroy();\n  this.stencilManager.destroy();\n  this.filterManager.destroy();\n  this.shaderManager = null;\n  this.maskManager = null;\n  this.filterManager = null;\n  this.blendModeManager = null;\n  this.handleContextLost = null;\n  this.handleContextRestored = null;\n  this._contextOptions = null;\n  this.drawCount = 0;\n  this.gl = null;\n};\n/**\n * Maps Pixi blend modes to WebGL blend modes.\n *\n * @private\n */\n\n\nWebGLRenderer.prototype._mapGlModes = function () {\n  var gl = this.gl;\n\n  if (!this.blendModes) {\n    this.blendModes = {};\n    this.blendModes[CONST.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.ADD] = [gl.SRC_ALPHA, gl.DST_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.SCREEN] = [gl.SRC_ALPHA, gl.ONE];\n    this.blendModes[CONST.BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    this.blendModes[CONST.BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  }\n\n  if (!this.drawModes) {\n    this.drawModes = {};\n    this.drawModes[CONST.DRAW_MODES.POINTS] = gl.POINTS;\n    this.drawModes[CONST.DRAW_MODES.LINES] = gl.LINES;\n    this.drawModes[CONST.DRAW_MODES.LINE_LOOP] = gl.LINE_LOOP;\n    this.drawModes[CONST.DRAW_MODES.LINE_STRIP] = gl.LINE_STRIP;\n    this.drawModes[CONST.DRAW_MODES.TRIANGLES] = gl.TRIANGLES;\n    this.drawModes[CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n    this.drawModes[CONST.DRAW_MODES.TRIANGLE_FAN] = gl.TRIANGLE_FAN;\n  }\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/webgl/WebGLRenderer.js"],"names":["SystemRenderer","require","ShaderManager","MaskManager","StencilManager","FilterManager","BlendModeManager","RenderTarget","ObjectRenderer","FXAAFilter","utils","CONST","WebGLRenderer","width","height","options","call","type","RENDERER_TYPE","WEBGL","handleContextLost","bind","handleContextRestored","view","addEventListener","_useFXAA","forceFXAA","antialias","_FXAAFilter","_contextOptions","alpha","transparent","premultipliedAlpha","stencil","preserveDrawingBuffer","drawCount","shaderManager","maskManager","stencilManager","filterManager","blendModeManager","currentRenderTarget","currentRenderer","initPlugins","_createContext","_initContext","_mapGlModes","_renderTargetStack","prototype","Object","create","constructor","module","exports","pluginTarget","mixin","glContextId","gl","getContext","Error","id","renderer","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","renderTarget","resolution","setRenderTarget","emit","resize","getContextAttributes","window","console","warn","render","object","isContextLost","_lastObjectRendered","uniforms","value","x","y","filterArea","size","filters","cacheParent","parent","_tempDisplayObjectParent","updateTransform","clearBeforeRender","clearColor","_backgroundColorRgb","clear","COLOR_BUFFER_BIT","renderDisplayObject","displayObject","setFilterStack","filterStack","renderWebGL","flush","setObjectRenderer","objectRenderer","stop","start","activate","setMaskStack","stencilMaskStack","viewport","updateTexture","texture","baseTexture","hasLoaded","_glTextures","createTexture","on","destroyTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","source","texParameteri","TEXTURE_MAG_FILTER","scaleMode","SCALE_MODES","LINEAR","NEAREST","mipmap","isPowerOfTwo","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","generateMipmap","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","REPEAT","deleteTexture","event","preventDefault","key","BaseTextureCache","length","destroy","removeView","destroyPlugins","removeEventListener","uid","blendModes","BLEND_MODES","NORMAL","ONE","ONE_MINUS_SRC_ALPHA","ADD","SRC_ALPHA","DST_ALPHA","MULTIPLY","DST_COLOR","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","drawModes","DRAW_MODES","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":"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","sourcesContent":["var SystemRenderer = require('../SystemRenderer'),\n    ShaderManager = require('./managers/ShaderManager'),\n    MaskManager = require('./managers/MaskManager'),\n    StencilManager = require('./managers/StencilManager'),\n    FilterManager = require('./managers/FilterManager'),\n    BlendModeManager = require('./managers/BlendModeManager'),\n    RenderTarget = require('./utils/RenderTarget'),\n    ObjectRenderer = require('./utils/ObjectRenderer'),\n    FXAAFilter = require('./filters/FXAAFilter'),\n    utils = require('../../utils'),\n    CONST = require('../../const');\n\n/**\n * The WebGLRenderer draws the scene and all its content onto a webGL enabled canvas. This renderer\n * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.\n * So no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.SystemRenderer\n * @param [width=0] {number} the width of the canvas view\n * @param [height=0] {number} the height of the canvas view\n * @param [options] {object} The optional renderer parameters\n * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n * @param [options.autoResize=false] {boolean} If the render view is automatically resized, default false\n * @param [options.antialias=false] {boolean} sets antialias. If not available natively then FXAA antialiasing is used\n * @param [options.forceFXAA=false] {boolean} forces FXAA antialiasing to be used over native. FXAA is faster, but may not always lok as great\n * @param [options.resolution=1] {number} the resolution of the renderer retina would be 2\n * @param [options.clearBeforeRender=true] {boolean} This sets if the CanvasRenderer will clear the canvas or\n *      not before the new render pass.\n * @param [options.preserveDrawingBuffer=false] {boolean} enables drawing buffer preservation, enable this if\n *      you need to call toDataUrl on the webgl context.\n */\nfunction WebGLRenderer(width, height, options)\n{\n    options = options || {};\n\n    SystemRenderer.call(this, 'WebGL', width, height, options);\n\n    /**\n     * The type of this renderer as a standardised const\n     *\n     * @member {number}\n     *\n     */\n    this.type = CONST.RENDERER_TYPE.WEBGL;\n\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n\n    this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n    this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n\n    //TODO possibility to force FXAA as it may offer better performance?\n    /**\n     * Does it use FXAA ?\n     *\n     * @member {boolean}\n     * @private\n     */\n    this._useFXAA = !!options.forceFXAA && options.antialias;\n\n    /**\n     * The fxaa filter\n     *\n     * @member {FXAAFilter}\n     * @private\n     */\n    this._FXAAFilter = null;\n\n    /**\n     * The options passed in to create a new webgl context.\n     *\n     * @member {object}\n     * @private\n     */\n    this._contextOptions = {\n        alpha: this.transparent,\n        antialias: options.antialias,\n        premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer\n    };\n\n    /**\n     * Counter for the number of draws made each frame\n     *\n     * @member {number}\n     */\n    this.drawCount = 0;\n\n    /**\n     * Deals with managing the shader programs and their attribs.\n     *\n     * @member {ShaderManager}\n     */\n    this.shaderManager = new ShaderManager(this);\n\n    /**\n     * Manages the masks using the stencil buffer.\n     *\n     * @member {MaskManager}\n     */\n    this.maskManager = new MaskManager(this);\n\n    /**\n     * Manages the stencil buffer.\n     *\n     * @member {StencilManager}\n     */\n    this.stencilManager = new StencilManager(this);\n\n    /**\n     * Manages the filters.\n     *\n     * @member {FilterManager}\n     */\n    this.filterManager = new FilterManager(this);\n\n\n    /**\n     * Manages the blendModes\n     * @member {BlendModeManager}\n     */\n    this.blendModeManager = new BlendModeManager(this);\n\n    /**\n     * Holds the current render target\n     * @member {Object}\n     */\n    this.currentRenderTarget = null;\n\n    /**\n     * object renderer @alvin\n     * @member {ObjectRenderer}\n     */\n    this.currentRenderer = new ObjectRenderer(this);\n\n    this.initPlugins();\n\n    // initialize the context so it is ready for the managers.\n    this._createContext();\n    this._initContext();\n\n    // map some webGL blend modes..\n    this._mapGlModes();\n\n    /**\n     * An array of render targets\n     * @member {Array}\n     * @private\n     */\n    this._renderTargetStack = [];\n}\n\n// constructor\nWebGLRenderer.prototype = Object.create(SystemRenderer.prototype);\nWebGLRenderer.prototype.constructor = WebGLRenderer;\nmodule.exports = WebGLRenderer;\nutils.pluginTarget.mixin(WebGLRenderer);\n\nWebGLRenderer.glContextId = 0;\n\nWebGLRenderer.prototype._createContext = function () {\n    var gl = this.view.getContext('webgl', this._contextOptions) || this.view.getContext('experimental-webgl', this._contextOptions);\n    this.gl = gl;\n\n    if (!gl)\n    {\n        // fail, not able to get a context\n        throw new Error('This browser does not support webGL. Try using the canvas renderer');\n    }\n\n    this.glContextId = WebGLRenderer.glContextId++;\n    gl.id = this.glContextId;\n    gl.renderer = this;\n};\n\n/**\n * Creates the WebGL context\n * @private\n */\nWebGLRenderer.prototype._initContext = function ()\n{\n    var gl = this.gl;\n\n    // set up the default pixi settings..\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n    gl.enable(gl.BLEND);\n\n    this.renderTarget = new RenderTarget(gl, this.width, this.height, null, this.resolution, true);\n\n    this.setRenderTarget(this.renderTarget);\n\n    this.emit('context', gl);\n\n    // setup the width/height properties and gl viewport\n    this.resize(this.width, this.height);\n\n    if(!this._useFXAA)\n    {\n        this._useFXAA = (this._contextOptions.antialias && ! gl.getContextAttributes().antialias);\n    }\n\n\n    if(this._useFXAA)\n    {\n        window.console.warn('FXAA antialiasing being used instead of native antialiasing');\n        this._FXAAFilter = [new FXAAFilter()];\n    }\n};\n\n/**\n * Renders the object to its webGL view\n *\n * @param object {DisplayObject} the object to be rendered\n */\nWebGLRenderer.prototype.render = function (object)\n{\n    // no point rendering if our context has been blown up!\n    if (this.gl.isContextLost())\n    {\n        return;\n    }\n\n    this.drawCount = 0;\n\n    this._lastObjectRendered = object;\n\n    if(this._useFXAA)\n    {\n        this._FXAAFilter[0].uniforms.resolution.value.x = this.width;\n        this._FXAAFilter[0].uniforms.resolution.value.y = this.height;\n        object.filterArea = this.renderTarget.size;\n        object.filters = this._FXAAFilter;\n    }\n\n    var cacheParent = object.parent;\n    object.parent = this._tempDisplayObjectParent;\n\n    // update the scene graph\n    object.updateTransform();\n\n    object.parent = cacheParent;\n\n    var gl = this.gl;\n\n    // make sure we are bound to the main frame buffer\n    this.setRenderTarget(this.renderTarget);\n\n    if (this.clearBeforeRender)\n    {\n        if (this.transparent)\n        {\n            gl.clearColor(0, 0, 0, 0);\n        }\n        else\n        {\n            gl.clearColor(this._backgroundColorRgb[0], this._backgroundColorRgb[1], this._backgroundColorRgb[2], 1);\n        }\n\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    this.renderDisplayObject(object, this.renderTarget);//this.projection);\n};\n\n/**\n * Renders a Display Object.\n *\n * @param displayObject {DisplayObject} The DisplayObject to render\n * @param renderTarget {RenderTarget} The render target to use to render this display object\n *\n */\nWebGLRenderer.prototype.renderDisplayObject = function (displayObject, renderTarget, clear)//projection, buffer)\n{\n    // TODO is this needed...\n    //this.blendModeManager.setBlendMode(CONST.BLEND_MODES.NORMAL);\n    this.setRenderTarget(renderTarget);\n\n    if(clear)\n    {\n        renderTarget.clear();\n    }\n\n    // start the filter manager\n    this.filterManager.setFilterStack( renderTarget.filterStack );\n\n    // render the scene!\n    displayObject.renderWebGL(this);\n\n    // finish the current renderer..\n    this.currentRenderer.flush();\n};\n\n/**\n * Changes the current renderer to the one given in parameter\n *\n * @param objectRenderer {Object} TODO @alvin\n *\n */\nWebGLRenderer.prototype.setObjectRenderer = function (objectRenderer)\n{\n    if (this.currentRenderer === objectRenderer)\n    {\n        return;\n    }\n\n    this.currentRenderer.stop();\n    this.currentRenderer = objectRenderer;\n    this.currentRenderer.start();\n};\n\n/**\n * Changes the current render target to the one given in parameter\n *\n * @param renderTarget {RenderTarget} the new render target\n *\n */\nWebGLRenderer.prototype.setRenderTarget = function (renderTarget)\n{\n    if( this.currentRenderTarget === renderTarget)\n    {\n        return;\n    }\n    // TODO - maybe down the line this should be a push pos thing? Leaving for now though.\n    this.currentRenderTarget = renderTarget;\n    this.currentRenderTarget.activate();\n    this.stencilManager.setMaskStack( renderTarget.stencilMaskStack );\n};\n\n\n/**\n * Resizes the webGL view to the specified width and height.\n *\n * @param width {number} the new width of the webGL view\n * @param height {number} the new height of the webGL view\n */\nWebGLRenderer.prototype.resize = function (width, height)\n{\n    SystemRenderer.prototype.resize.call(this, width, height);\n\n    this.filterManager.resize(width, height);\n    this.renderTarget.resize(width, height);\n\n    if(this.currentRenderTarget === this.renderTarget)\n    {\n        this.renderTarget.activate();\n        this.gl.viewport(0, 0, this.width, this.height);\n    }\n};\n\n/**\n * Updates and/or Creates a WebGL texture for the renderer's context.\n *\n * @param texture {BaseTexture|Texture} the texture to update\n */\nWebGLRenderer.prototype.updateTexture = function (texture)\n{\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded)\n    {\n        return;\n    }\n\n    var gl = this.gl;\n\n    if (!texture._glTextures[gl.id])\n    {\n        texture._glTextures[gl.id] = gl.createTexture();\n        texture.on('update', this.updateTexture, this);\n        texture.on('dispose', this.destroyTexture, this);\n    }\n\n\n    gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);\n\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n\n\n    if (texture.mipmap && texture.isPowerOfTwo)\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    else\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    }\n\n    if (!texture.isPowerOfTwo)\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    }\n    else\n    {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    }\n\n    return  texture._glTextures[gl.id];\n};\n\n/**\n * Deletes the texture from WebGL\n *\n * @param texture {BaseTexture|Texture} the texture to destroy\n */\nWebGLRenderer.prototype.destroyTexture = function (texture)\n{\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded)\n    {\n        return;\n    }\n\n    if (texture._glTextures[this.gl.id])\n    {\n        this.gl.deleteTexture(texture._glTextures[this.gl.id]);\n    }\n};\n\n/**\n * Handles a lost webgl context\n *\n * @param event {Event}\n * @private\n */\nWebGLRenderer.prototype.handleContextLost = function (event)\n{\n    event.preventDefault();\n};\n\n/**\n * Handles a restored webgl context\n *\n * @param event {Event}\n * @private\n */\nWebGLRenderer.prototype.handleContextRestored = function ()\n{\n    this._initContext();\n\n    // empty all the old gl textures as they are useless now\n    for (var key in utils.BaseTextureCache)\n    {\n        utils.BaseTextureCache[key]._glTextures.length = 0;\n    }\n};\n\n/**\n * Removes everything from the renderer (event listeners, spritebatch, etc...)\n *\n * @param [removeView=false] {boolean} Removes the Canvas element from the DOM.\n */\nWebGLRenderer.prototype.destroy = function (removeView)\n{\n    this.destroyPlugins();\n\n    // remove listeners\n    this.view.removeEventListener('webglcontextlost', this.handleContextLost);\n    this.view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n    // call base destroy\n    SystemRenderer.prototype.destroy.call(this, removeView);\n\n    this.uid = 0;\n\n    // destroy the managers\n    this.shaderManager.destroy();\n    this.maskManager.destroy();\n    this.stencilManager.destroy();\n    this.filterManager.destroy();\n\n    this.shaderManager = null;\n    this.maskManager = null;\n    this.filterManager = null;\n    this.blendModeManager = null;\n\n    this.handleContextLost = null;\n    this.handleContextRestored = null;\n\n    this._contextOptions = null;\n\n    this.drawCount = 0;\n\n    this.gl = null;\n};\n\n/**\n * Maps Pixi blend modes to WebGL blend modes.\n *\n * @private\n */\nWebGLRenderer.prototype._mapGlModes = function ()\n{\n    var gl = this.gl;\n\n    if (!this.blendModes)\n    {\n        this.blendModes = {};\n\n        this.blendModes[CONST.BLEND_MODES.NORMAL]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.ADD]           = [gl.SRC_ALPHA, gl.DST_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.MULTIPLY]      = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.SCREEN]        = [gl.SRC_ALPHA, gl.ONE];\n        this.blendModes[CONST.BLEND_MODES.OVERLAY]       = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.DARKEN]        = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.LIGHTEN]       = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.COLOR_DODGE]   = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.COLOR_BURN]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.HARD_LIGHT]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.SOFT_LIGHT]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.DIFFERENCE]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.EXCLUSION]     = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.HUE]           = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.SATURATION]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.COLOR]         = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n        this.blendModes[CONST.BLEND_MODES.LUMINOSITY]    = [gl.ONE,       gl.ONE_MINUS_SRC_ALPHA];\n    }\n\n    if (!this.drawModes)\n    {\n        this.drawModes = {};\n\n        this.drawModes[CONST.DRAW_MODES.POINTS]         = gl.POINTS;\n        this.drawModes[CONST.DRAW_MODES.LINES]          = gl.LINES;\n        this.drawModes[CONST.DRAW_MODES.LINE_LOOP]      = gl.LINE_LOOP;\n        this.drawModes[CONST.DRAW_MODES.LINE_STRIP]     = gl.LINE_STRIP;\n        this.drawModes[CONST.DRAW_MODES.TRIANGLES]      = gl.TRIANGLES;\n        this.drawModes[CONST.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;\n        this.drawModes[CONST.DRAW_MODES.TRIANGLE_FAN]   = gl.TRIANGLE_FAN;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}