{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport var Part = /*#__PURE__*/function (_ToneEvent) {\n  _inherits(Part, _ToneEvent);\n\n  var _super = _createSuper(Part);\n\n  function Part() {\n    var _this;\n\n    _classCallCheck(this, Part);\n\n    _this = _super.call(this, optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n    _this.name = \"Part\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * The events that belong to this part\n     */\n\n    _this._events = new Set();\n    var options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]); // make sure things are assigned in the right order\n\n    _this._state.increasing = true; // add the events\n\n    options.events.forEach(function (event) {\n      if (isArray(event)) {\n        _this.add(event[0], event[1]);\n      } else {\n        _this.add(event);\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Part, [{\n    key: \"start\",\n\n    /**\n     * Start the part at the given time.\n     * @param  time    When to start the part.\n     * @param  offset  The offset from the start of the part to begin playing at.\n     */\n    value: function start(time, offset) {\n      var _this2 = this;\n\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) !== \"started\") {\n        offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\n        if (this._loop) {\n          offset = defaultArg(offset, this._loopStart);\n        } else {\n          offset = defaultArg(offset, 0);\n        }\n\n        var computedOffset = this.toTicks(offset);\n\n        this._state.add({\n          id: -1,\n          offset: computedOffset,\n          state: \"started\",\n          time: ticks\n        });\n\n        this._forEach(function (event) {\n          _this2._startNote(event, ticks, computedOffset);\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Start the event in the given event at the correct time given\n     * the ticks and offset and looping.\n     * @param  event\n     * @param  ticks\n     * @param  offset\n     */\n\n  }, {\n    key: \"_startNote\",\n    value: function _startNote(event, ticks, offset) {\n      ticks -= offset;\n\n      if (this._loop) {\n        if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n          if (event.startOffset < offset) {\n            // start it on the next loop\n            ticks += this._getLoopDuration();\n          }\n\n          event.start(new TicksClass(this.context, ticks));\n        } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n          event.loop = false;\n          event.start(new TicksClass(this.context, ticks));\n        }\n      } else if (event.startOffset >= offset) {\n        event.start(new TicksClass(this.context, ticks));\n      }\n    }\n  }, {\n    key: \"stop\",\n\n    /**\n     * Stop the part at the given time.\n     * @param  time  When to stop the part.\n     */\n    value: function stop(time) {\n      var ticks = this.toTicks(time);\n\n      this._state.cancel(ticks);\n\n      this._state.setStateAtTime(\"stopped\", ticks);\n\n      this._forEach(function (event) {\n        event.stop(time);\n      });\n\n      return this;\n    }\n    /**\n     * Get/Set an Event's value at the given time.\n     * If a value is passed in and no event exists at\n     * the given time, one will be created with that value.\n     * If two events are at the same time, the first one will\n     * be returned.\n     * @example\n     * const part = new Tone.Part();\n     * part.at(\"1m\"); // returns the part at the first measure\n     * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n     * // if an event didn't exist at that time, it will be created.\n     * @param time The time of the event to get or set.\n     * @param value If a value is passed in, the value of the event at the given time will be set to it.\n     */\n\n  }, {\n    key: \"at\",\n    value: function at(time, value) {\n      var timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n      var tickTime = new TicksClass(this.context, 1).toSeconds();\n\n      var iterator = this._events.values();\n\n      var result = iterator.next();\n\n      while (!result.done) {\n        var event = result.value;\n\n        if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n          if (isDefined(value)) {\n            event.value = value;\n          }\n\n          return event;\n        }\n\n        result = iterator.next();\n      } // if there was no event at that time, create one\n\n\n      if (isDefined(value)) {\n        this.add(time, value); // return the new event\n\n        return this.at(time);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(time, value) {\n      // extract the parameters\n      if (time instanceof Object && Reflect.has(time, \"time\")) {\n        value = time;\n        time = value.time;\n      }\n\n      var ticks = this.toTicks(time);\n      var event;\n\n      if (value instanceof ToneEvent) {\n        event = value;\n        event.callback = this._tick.bind(this);\n      } else {\n        event = new ToneEvent({\n          callback: this._tick.bind(this),\n          context: this.context,\n          value: value\n        });\n      } // the start offset\n\n\n      event.startOffset = ticks; // initialize the values\n\n      event.set({\n        humanize: this.humanize,\n        loop: this.loop,\n        loopEnd: this.loopEnd,\n        loopStart: this.loopStart,\n        playbackRate: this.playbackRate,\n        probability: this.probability\n      });\n\n      this._events.add(event); // start the note if it should be played right now\n\n\n      this._restartEvent(event);\n\n      return this;\n    }\n    /**\n     * Restart the given event\n     */\n\n  }, {\n    key: \"_restartEvent\",\n    value: function _restartEvent(event) {\n      var _this3 = this;\n\n      this._state.forEach(function (stateEvent) {\n        if (stateEvent.state === \"started\") {\n          _this3._startNote(event, stateEvent.time, stateEvent.offset);\n        } else {\n          // stop the note\n          event.stop(new TicksClass(_this3.context, stateEvent.time));\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(time, value) {\n      var _this4 = this;\n\n      // extract the parameters\n      if (isObject(time) && time.hasOwnProperty(\"time\")) {\n        value = time;\n        time = value.time;\n      }\n\n      time = this.toTicks(time);\n\n      this._events.forEach(function (event) {\n        if (event.startOffset === time) {\n          if (isUndef(value) || isDefined(value) && event.value === value) {\n            _this4._events.delete(event);\n\n            event.dispose();\n          }\n        }\n      });\n\n      return this;\n    }\n    /**\n     * Remove all of the notes from the group.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._forEach(function (event) {\n        return event.dispose();\n      });\n\n      this._events.clear();\n\n      return this;\n    }\n    /**\n     * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n     * @param after The time after which to cancel the scheduled events.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(after) {\n      this._forEach(function (event) {\n        return event.cancel(after);\n      });\n\n      this._state.cancel(this.toTicks(after));\n\n      return this;\n    }\n    /**\n     * Iterate over all of the events\n     */\n\n  }, {\n    key: \"_forEach\",\n    value: function _forEach(callback) {\n      if (this._events) {\n        this._events.forEach(function (event) {\n          if (event instanceof Part) {\n            event._forEach(callback);\n          } else {\n            callback(event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Set the attribute of all of the events\n     * @param  attr  the attribute to set\n     * @param  value      The value to set it to\n     */\n\n  }, {\n    key: \"_setAll\",\n    value: function _setAll(attr, value) {\n      this._forEach(function (event) {\n        event[attr] = value;\n      });\n    }\n    /**\n     * Internal tick method\n     * @param  time  The time of the event in seconds\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time, value) {\n      if (!this.mute) {\n        this.callback(time, value);\n      }\n    }\n    /**\n     * Determine if the event should be currently looping\n     * given the loop boundries of this Part.\n     * @param  event  The event to test\n     */\n\n  }, {\n    key: \"_testLoopBoundries\",\n    value: function _testLoopBoundries(event) {\n      if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n        event.cancel(0);\n      } else if (event.state === \"stopped\") {\n        // reschedule it if it's stopped\n        this._restartEvent(event);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Part.prototype), \"dispose\", this).call(this);\n\n      this.clear();\n      return this;\n    }\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._startOffset;\n    },\n    set: function set(offset) {\n      var _this5 = this;\n\n      this._startOffset = offset;\n\n      this._forEach(function (event) {\n        event.startOffset += _this5._startOffset;\n      });\n    }\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._probability;\n    },\n    set: function set(prob) {\n      this._probability = prob;\n\n      this._setAll(\"probability\", prob);\n    }\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._humanize;\n    },\n    set: function set(variation) {\n      this._humanize = variation;\n\n      this._setAll(\"humanize\", variation);\n    }\n    /**\n     * If the part should loop or not\n     * between Part.loopStart and\n     * Part.loopEnd. If set to true,\n     * the part will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     * @example\n     * const part = new Tone.Part();\n     * // loop the part 8 times\n     * part.loop = 8;\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      var _this6 = this;\n\n      this._loop = loop;\n\n      this._forEach(function (event) {\n        event.loopStart = _this6.loopStart;\n        event.loopEnd = _this6.loopEnd;\n        event.loop = loop;\n\n        _this6._testLoopBoundries(event);\n      });\n    }\n    /**\n     * The loopEnd point determines when it will\n     * loop if Part.loop is true.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function set(loopEnd) {\n      var _this7 = this;\n\n      this._loopEnd = this.toTicks(loopEnd);\n\n      if (this._loop) {\n        this._forEach(function (event) {\n          event.loopEnd = loopEnd;\n\n          _this7._testLoopBoundries(event);\n        });\n      }\n    }\n    /**\n     * The loopStart point determines when it will\n     * loop if Part.loop is true.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function set(loopStart) {\n      var _this8 = this;\n\n      this._loopStart = this.toTicks(loopStart);\n\n      if (this._loop) {\n        this._forEach(function (event) {\n          event.loopStart = _this8.loopStart;\n\n          _this8._testLoopBoundries(event);\n        });\n      }\n    }\n    /**\n     * The playback rate of the part\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n\n      this._setAll(\"playbackRate\", rate);\n    }\n    /**\n     * The number of scheduled notes in the part.\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._events.size;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneEvent.getDefaults(), {\n        events: []\n      });\n    }\n  }]);\n\n  return Part;\n}(ToneEvent);","map":{"version":3,"sources":["../../../Tone/event/Part.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Part extends ToneEvent {\n    constructor() {\n        super(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n        this.name = \"Part\";\n        /**\n         * Tracks the scheduled events\n         */\n        this._state = new StateTimeline(\"stopped\");\n        /**\n         * The events that belong to this part\n         */\n        this._events = new Set();\n        const options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n        // make sure things are assigned in the right order\n        this._state.increasing = true;\n        // add the events\n        options.events.forEach(event => {\n            if (isArray(event)) {\n                this.add(event[0], event[1]);\n            }\n            else {\n                this.add(event);\n            }\n        });\n    }\n    static getDefaults() {\n        return Object.assign(ToneEvent.getDefaults(), {\n            events: [],\n        });\n    }\n    /**\n     * Start the part at the given time.\n     * @param  time    When to start the part.\n     * @param  offset  The offset from the start of the part to begin playing at.\n     */\n    start(time, offset) {\n        const ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) !== \"started\") {\n            offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n            if (this._loop) {\n                offset = defaultArg(offset, this._loopStart);\n            }\n            else {\n                offset = defaultArg(offset, 0);\n            }\n            const computedOffset = this.toTicks(offset);\n            this._state.add({\n                id: -1,\n                offset: computedOffset,\n                state: \"started\",\n                time: ticks,\n            });\n            this._forEach(event => {\n                this._startNote(event, ticks, computedOffset);\n            });\n        }\n        return this;\n    }\n    /**\n     * Start the event in the given event at the correct time given\n     * the ticks and offset and looping.\n     * @param  event\n     * @param  ticks\n     * @param  offset\n     */\n    _startNote(event, ticks, offset) {\n        ticks -= offset;\n        if (this._loop) {\n            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n                if (event.startOffset < offset) {\n                    // start it on the next loop\n                    ticks += this._getLoopDuration();\n                }\n                event.start(new TicksClass(this.context, ticks));\n            }\n            else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n                event.loop = false;\n                event.start(new TicksClass(this.context, ticks));\n            }\n        }\n        else if (event.startOffset >= offset) {\n            event.start(new TicksClass(this.context, ticks));\n        }\n    }\n    get startOffset() {\n        return this._startOffset;\n    }\n    set startOffset(offset) {\n        this._startOffset = offset;\n        this._forEach(event => {\n            event.startOffset += this._startOffset;\n        });\n    }\n    /**\n     * Stop the part at the given time.\n     * @param  time  When to stop the part.\n     */\n    stop(time) {\n        const ticks = this.toTicks(time);\n        this._state.cancel(ticks);\n        this._state.setStateAtTime(\"stopped\", ticks);\n        this._forEach(event => {\n            event.stop(time);\n        });\n        return this;\n    }\n    /**\n     * Get/Set an Event's value at the given time.\n     * If a value is passed in and no event exists at\n     * the given time, one will be created with that value.\n     * If two events are at the same time, the first one will\n     * be returned.\n     * @example\n     * const part = new Tone.Part();\n     * part.at(\"1m\"); // returns the part at the first measure\n     * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n     * // if an event didn't exist at that time, it will be created.\n     * @param time The time of the event to get or set.\n     * @param value If a value is passed in, the value of the event at the given time will be set to it.\n     */\n    at(time, value) {\n        const timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n        const tickTime = new TicksClass(this.context, 1).toSeconds();\n        const iterator = this._events.values();\n        let result = iterator.next();\n        while (!result.done) {\n            const event = result.value;\n            if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n                if (isDefined(value)) {\n                    event.value = value;\n                }\n                return event;\n            }\n            result = iterator.next();\n        }\n        // if there was no event at that time, create one\n        if (isDefined(value)) {\n            this.add(time, value);\n            // return the new event\n            return this.at(time);\n        }\n        else {\n            return null;\n        }\n    }\n    add(time, value) {\n        // extract the parameters\n        if (time instanceof Object && Reflect.has(time, \"time\")) {\n            value = time;\n            time = value.time;\n        }\n        const ticks = this.toTicks(time);\n        let event;\n        if (value instanceof ToneEvent) {\n            event = value;\n            event.callback = this._tick.bind(this);\n        }\n        else {\n            event = new ToneEvent({\n                callback: this._tick.bind(this),\n                context: this.context,\n                value,\n            });\n        }\n        // the start offset\n        event.startOffset = ticks;\n        // initialize the values\n        event.set({\n            humanize: this.humanize,\n            loop: this.loop,\n            loopEnd: this.loopEnd,\n            loopStart: this.loopStart,\n            playbackRate: this.playbackRate,\n            probability: this.probability,\n        });\n        this._events.add(event);\n        // start the note if it should be played right now\n        this._restartEvent(event);\n        return this;\n    }\n    /**\n     * Restart the given event\n     */\n    _restartEvent(event) {\n        this._state.forEach((stateEvent) => {\n            if (stateEvent.state === \"started\") {\n                this._startNote(event, stateEvent.time, stateEvent.offset);\n            }\n            else {\n                // stop the note\n                event.stop(new TicksClass(this.context, stateEvent.time));\n            }\n        });\n    }\n    remove(time, value) {\n        // extract the parameters\n        if (isObject(time) && time.hasOwnProperty(\"time\")) {\n            value = time;\n            time = value.time;\n        }\n        time = this.toTicks(time);\n        this._events.forEach(event => {\n            if (event.startOffset === time) {\n                if (isUndef(value) || (isDefined(value) && event.value === value)) {\n                    this._events.delete(event);\n                    event.dispose();\n                }\n            }\n        });\n        return this;\n    }\n    /**\n     * Remove all of the notes from the group.\n     */\n    clear() {\n        this._forEach(event => event.dispose());\n        this._events.clear();\n        return this;\n    }\n    /**\n     * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n     * @param after The time after which to cancel the scheduled events.\n     */\n    cancel(after) {\n        this._forEach(event => event.cancel(after));\n        this._state.cancel(this.toTicks(after));\n        return this;\n    }\n    /**\n     * Iterate over all of the events\n     */\n    _forEach(callback) {\n        if (this._events) {\n            this._events.forEach(event => {\n                if (event instanceof Part) {\n                    event._forEach(callback);\n                }\n                else {\n                    callback(event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Set the attribute of all of the events\n     * @param  attr  the attribute to set\n     * @param  value      The value to set it to\n     */\n    _setAll(attr, value) {\n        this._forEach(event => {\n            event[attr] = value;\n        });\n    }\n    /**\n     * Internal tick method\n     * @param  time  The time of the event in seconds\n     */\n    _tick(time, value) {\n        if (!this.mute) {\n            this.callback(time, value);\n        }\n    }\n    /**\n     * Determine if the event should be currently looping\n     * given the loop boundries of this Part.\n     * @param  event  The event to test\n     */\n    _testLoopBoundries(event) {\n        if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n            event.cancel(0);\n        }\n        else if (event.state === \"stopped\") {\n            // reschedule it if it's stopped\n            this._restartEvent(event);\n        }\n    }\n    get probability() {\n        return this._probability;\n    }\n    set probability(prob) {\n        this._probability = prob;\n        this._setAll(\"probability\", prob);\n    }\n    get humanize() {\n        return this._humanize;\n    }\n    set humanize(variation) {\n        this._humanize = variation;\n        this._setAll(\"humanize\", variation);\n    }\n    /**\n     * If the part should loop or not\n     * between Part.loopStart and\n     * Part.loopEnd. If set to true,\n     * the part will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     * @example\n     * const part = new Tone.Part();\n     * // loop the part 8 times\n     * part.loop = 8;\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        this._loop = loop;\n        this._forEach(event => {\n            event.loopStart = this.loopStart;\n            event.loopEnd = this.loopEnd;\n            event.loop = loop;\n            this._testLoopBoundries(event);\n        });\n    }\n    /**\n     * The loopEnd point determines when it will\n     * loop if Part.loop is true.\n     */\n    get loopEnd() {\n        return new TicksClass(this.context, this._loopEnd).toSeconds();\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = this.toTicks(loopEnd);\n        if (this._loop) {\n            this._forEach(event => {\n                event.loopEnd = loopEnd;\n                this._testLoopBoundries(event);\n            });\n        }\n    }\n    /**\n     * The loopStart point determines when it will\n     * loop if Part.loop is true.\n     */\n    get loopStart() {\n        return new TicksClass(this.context, this._loopStart).toSeconds();\n    }\n    set loopStart(loopStart) {\n        this._loopStart = this.toTicks(loopStart);\n        if (this._loop) {\n            this._forEach(event => {\n                event.loopStart = this.loopStart;\n                this._testLoopBoundries(event);\n            });\n        }\n    }\n    /**\n     * The playback rate of the part\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        this._setAll(\"playbackRate\", rate);\n    }\n    /**\n     * The number of scheduled notes in the part.\n     */\n    get length() {\n        return this._events.size;\n    }\n    dispose() {\n        super.dispose();\n        this.clear();\n        return this;\n    }\n}\n//# sourceMappingURL=Part.js.map"]},"metadata":{},"sourceType":"module"}