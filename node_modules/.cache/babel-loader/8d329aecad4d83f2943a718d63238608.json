{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * ```js\n *  var colorMatrix = new PIXI.ColorMatrixFilter();\n *  container.filters = [colorMatrix];\n *  colorMatrix.contrast(2);\n * ```\n * @author Cl√©ment Chenebault <clement@goodboydigital.com>\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction ColorMatrixFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/colorMatrix.frag', 'utf8'), // custom uniforms\n  {\n    m: {\n      type: '1fv',\n      value: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n    }\n  });\n}\n\nColorMatrixFilter.prototype = Object.create(core.AbstractFilter.prototype);\nColorMatrixFilter.prototype.constructor = ColorMatrixFilter;\nmodule.exports = ColorMatrixFilter;\n/**\n * Transforms current matrix and set the new one\n *\n * @param matrix {number[]} (mat 5x4)\n * @param multiply {boolean} if true, current matrix and matrix are multiplied. If false, just set the current matrix with @param matrix\n */\n\nColorMatrixFilter.prototype._loadMatrix = function (matrix, multiply) {\n  multiply = !!multiply;\n  var newMatrix = matrix;\n\n  if (multiply) {\n    this._multiply(newMatrix, this.uniforms.m.value, matrix);\n\n    newMatrix = this._colorMatrix(newMatrix);\n  } // set the new matrix\n\n\n  this.uniforms.m.value = newMatrix;\n};\n/**\n * Multiplies two mat5's\n *\n * @param out {array} (mat 5x4) the receiving matrix\n * @param a {array} (mat 5x4) the first operand\n * @param b {array} (mat 5x4) the second operand\n * @returns out {array} (mat 5x4)\n */\n\n\nColorMatrixFilter.prototype._multiply = function (out, a, b) {\n  // Red Channel\n  out[0] = a[0] * b[0] + a[1] * b[5] + a[2] * b[10] + a[3] * b[15];\n  out[1] = a[0] * b[1] + a[1] * b[6] + a[2] * b[11] + a[3] * b[16];\n  out[2] = a[0] * b[2] + a[1] * b[7] + a[2] * b[12] + a[3] * b[17];\n  out[3] = a[0] * b[3] + a[1] * b[8] + a[2] * b[13] + a[3] * b[18];\n  out[4] = a[0] * b[4] + a[1] * b[9] + a[2] * b[14] + a[3] * b[19]; // Green Channel\n\n  out[5] = a[5] * b[0] + a[6] * b[5] + a[7] * b[10] + a[8] * b[15];\n  out[6] = a[5] * b[1] + a[6] * b[6] + a[7] * b[11] + a[8] * b[16];\n  out[7] = a[5] * b[2] + a[6] * b[7] + a[7] * b[12] + a[8] * b[17];\n  out[8] = a[5] * b[3] + a[6] * b[8] + a[7] * b[13] + a[8] * b[18];\n  out[9] = a[5] * b[4] + a[6] * b[9] + a[7] * b[14] + a[8] * b[19]; // Blue Channel\n\n  out[10] = a[10] * b[0] + a[11] * b[5] + a[12] * b[10] + a[13] * b[15];\n  out[11] = a[10] * b[1] + a[11] * b[6] + a[12] * b[11] + a[13] * b[16];\n  out[12] = a[10] * b[2] + a[11] * b[7] + a[12] * b[12] + a[13] * b[17];\n  out[13] = a[10] * b[3] + a[11] * b[8] + a[12] * b[13] + a[13] * b[18];\n  out[14] = a[10] * b[4] + a[11] * b[9] + a[12] * b[14] + a[13] * b[19]; // Alpha Channel\n\n  out[15] = a[15] * b[0] + a[16] * b[5] + a[17] * b[10] + a[18] * b[15];\n  out[16] = a[15] * b[1] + a[16] * b[6] + a[17] * b[11] + a[18] * b[16];\n  out[17] = a[15] * b[2] + a[16] * b[7] + a[17] * b[12] + a[18] * b[17];\n  out[18] = a[15] * b[3] + a[16] * b[8] + a[17] * b[13] + a[18] * b[18];\n  out[19] = a[15] * b[4] + a[16] * b[9] + a[17] * b[14] + a[18] * b[19];\n  return out;\n};\n/**\n * Create a Float32 Array and normalize the offset component to 0-1\n *\n * @param matrix {number[]} (mat 5x4)\n * @return m {number[]} (mat 5x4) with all values between 0-1\n */\n\n\nColorMatrixFilter.prototype._colorMatrix = function (matrix) {\n  // Create a Float32 Array and normalize the offset component to 0-1\n  var m = new Float32Array(matrix);\n  m[4] /= 255;\n  m[9] /= 255;\n  m[14] /= 255;\n  m[19] /= 255;\n  return m;\n};\n/**\n * Adjusts brightness\n *\n * Multiply the current matrix\n * @param b {number} value of the brigthness (0 is black)\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.brightness = function (b, multiply) {\n  var matrix = [b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Set the matrices in grey scales\n *\n * Multiply the current matrix\n * @param scale {number} value of the grey (0 is black)\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.greyscale = function (scale, multiply) {\n  var matrix = [scale, scale, scale, 0, 0, scale, scale, scale, 0, 0, scale, scale, scale, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n}; //Americanized alias\n\n\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\n/**\n * Set the black and white matrice\n * Multiply the current matrix\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\nColorMatrixFilter.prototype.blackAndWhite = function (multiply) {\n  var matrix = [0.3, 0.6, 0.1, 0, 0, 0.3, 0.6, 0.1, 0, 0, 0.3, 0.6, 0.1, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Set the hue property of the color\n *\n * Multiply the current matrix\n * @param rotation {number} in degrees\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.hue = function (rotation, multiply) {\n  rotation = (rotation || 0) / 180 * Math.PI;\n  var cos = Math.cos(rotation),\n      sin = Math.sin(rotation); // luminanceRed, luminanceGreen, luminanceBlue\n\n  var lumR = 0.213,\n      // or 0.3086\n  lumG = 0.715,\n      // or 0.6094\n  lumB = 0.072; // or 0.0820\n\n  var matrix = [lumR + cos * (1 - lumR) + sin * -lumR, lumG + cos * -lumG + sin * -lumG, lumB + cos * -lumB + sin * (1 - lumB), 0, 0, lumR + cos * -lumR + sin * 0.143, lumG + cos * (1 - lumG) + sin * 0.140, lumB + cos * -lumB + sin * -0.283, 0, 0, lumR + cos * -lumR + sin * -(1 - lumR), lumG + cos * -lumG + sin * lumG, lumB + cos * (1 - lumB) + sin * lumB, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Set the contrast matrix, increase the separation between dark and bright\n * Increase contrast : shadows darker and highlights brighter\n * Decrease contrast : bring the shadows up and the highlights down\n *\n * @param amount {number} value of the contrast\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.contrast = function (amount, multiply) {\n  var v = (amount || 0) + 1;\n  var o = -128 * (v - 1);\n  var matrix = [v, 0, 0, 0, o, 0, v, 0, 0, o, 0, 0, v, 0, o, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Set the saturation matrix, increase the separation between colors\n * Increase saturation : increase contrast, brightness, and sharpness\n * @param amount {number}\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.saturate = function (amount, multiply) {\n  var x = (amount || 0) * 2 / 3 + 1;\n  var y = (x - 1) * -0.5;\n  var matrix = [x, y, y, 0, 0, y, x, y, 0, 0, y, y, x, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Desaturate image (remove color)\n *\n * Call the saturate function\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.desaturate = function (multiply) // jshint unused:false\n{\n  this.saturate(-1);\n};\n/**\n * Negative image (inverse of classic rgb matrix)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.negative = function (multiply) {\n  var matrix = [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Sepia image\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.sepia = function (multiply) {\n  var matrix = [0.393, 0.7689999, 0.18899999, 0, 0, 0.349, 0.6859999, 0.16799999, 0, 0, 0.272, 0.5339999, 0.13099999, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.technicolor = function (multiply) {\n  var matrix = [1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337, -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398, -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Polaroid filter\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.polaroid = function (multiply) {\n  var matrix = [1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016, 1.483, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Filter who transforms : Red -> Blue and Blue -> Red\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.toBGR = function (multiply) {\n  var matrix = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.kodachrome = function (multiply) {\n  var matrix = [1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502, -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203, -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/**\n * Brown delicious browni filter (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.browni = function (multiply) {\n  var matrix = [0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873, -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127, 0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * Vintage filter (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.vintage = function (multiply) {\n  var matrix = [0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123, 0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591, 0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * We don't know exactly what it does, kind of gradient map, but funny to play with!\n *\n * @param desaturation {number}\n * @param toned {number}\n * @param lightColor {string} (example : \"0xFFE580\")\n * @param darkColor {string}  (example : \"0xFFE580\")\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.colorTone = function (desaturation, toned, lightColor, darkColor, multiply) {\n  desaturation = desaturation || 0.2;\n  toned = toned || 0.15;\n  lightColor = lightColor || 0xFFE580;\n  darkColor = darkColor || 0x338000;\n  var lR = (lightColor >> 16 & 0xFF) / 255;\n  var lG = (lightColor >> 8 & 0xFF) / 255;\n  var lB = (lightColor & 0xFF) / 255;\n  var dR = (darkColor >> 16 & 0xFF) / 255;\n  var dG = (darkColor >> 8 & 0xFF) / 255;\n  var dB = (darkColor & 0xFF) / 255;\n  var matrix = [0.3, 0.59, 0.11, 0, 0, lR, lG, lB, desaturation, 0, dR, dG, dB, toned, 0, lR - dR, lG - dG, lB - dB, 0, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * Night effect\n *\n * @param intensity {number}\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.night = function (intensity, multiply) {\n  intensity = intensity || 0.1;\n  var matrix = [intensity * -2.0, -intensity, 0, 0, 0, -intensity, 0, intensity, 0, 0, 0, intensity, intensity * 2.0, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * Predator effect\n *\n * Erase the current matrix by setting a new indepent one\n *\n * @param amount {number} how much the predator feels his future victim\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.predator = function (amount, multiply) {\n  var matrix = [11.224130630493164 * amount, -4.794486999511719 * amount, -2.8746118545532227 * amount, 0 * amount, 0.40342438220977783 * amount, -3.6330697536468506 * amount, 9.193157196044922 * amount, -2.951810836791992 * amount, 0 * amount, -1.316135048866272 * amount, -3.2184197902679443 * amount, -4.2375030517578125 * amount, 7.476448059082031 * amount, 0 * amount, 0.8044459223747253 * amount, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * LSD effect\n *\n * Multiply the current matrix\n *\n * @param amount {number} How crazy is your effect\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\n\n\nColorMatrixFilter.prototype.lsd = function (multiply) {\n  var matrix = [2, -0.4, 0.5, 0, 0, -0.5, 2, -0.4, 0, 0, -0.4, -0.5, 3, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, multiply);\n};\n/*\n * Reset function\n *\n * Erase the current matrix by setting the default one\n *\n */\n\n\nColorMatrixFilter.prototype.reset = function () {\n  var matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n\n  this._loadMatrix(matrix, false);\n};\n\nObject.defineProperties(ColorMatrixFilter.prototype, {\n  /**\n   * Sets the matrix of the color matrix filter\n   *\n   * @member {number[]}\n   * @memberof ColorMatrixFilter#\n   * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n   */\n  matrix: {\n    get: function () {\n      return this.uniforms.m.value;\n    },\n    set: function (value) {\n      this.uniforms.m.value = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/color/ColorMatrixFilter.js"],"names":["core","require","fs","ColorMatrixFilter","AbstractFilter","call","readFileSync","__dirname","m","type","value","prototype","Object","create","constructor","module","exports","_loadMatrix","matrix","multiply","newMatrix","_multiply","uniforms","_colorMatrix","out","a","b","Float32Array","brightness","greyscale","scale","grayscale","blackAndWhite","hue","rotation","Math","PI","cos","sin","lumR","lumG","lumB","contrast","amount","v","o","saturate","x","y","desaturate","negative","sepia","technicolor","polaroid","toBGR","kodachrome","browni","vintage","colorTone","desaturation","toned","lightColor","darkColor","lR","lG","lB","dR","dG","dB","night","intensity","predator","lsd","reset","defineProperties","get","set"],"mappings":"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","sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * ```js\n *  var colorMatrix = new PIXI.ColorMatrixFilter();\n *  container.filters = [colorMatrix];\n *  colorMatrix.contrast(2);\n * ```\n * @author Cl√©ment Chenebault <clement@goodboydigital.com>\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction ColorMatrixFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/colorMatrix.frag', 'utf8'),\n        // custom uniforms\n        {\n            m: {\n                type: '1fv', value: [\n                    1, 0, 0, 0, 0,\n                    0, 1, 0, 0, 0,\n                    0, 0, 1, 0, 0,\n                    0, 0, 0, 1, 0\n                ]\n            }\n        }\n    );\n}\n\nColorMatrixFilter.prototype = Object.create(core.AbstractFilter.prototype);\nColorMatrixFilter.prototype.constructor = ColorMatrixFilter;\nmodule.exports = ColorMatrixFilter;\n\n\n/**\n * Transforms current matrix and set the new one\n *\n * @param matrix {number[]} (mat 5x4)\n * @param multiply {boolean} if true, current matrix and matrix are multiplied. If false, just set the current matrix with @param matrix\n */\nColorMatrixFilter.prototype._loadMatrix = function (matrix, multiply)\n{\n    multiply = !!multiply;\n\n    var newMatrix = matrix;\n\n    if (multiply) {\n        this._multiply(newMatrix, this.uniforms.m.value, matrix);\n        newMatrix = this._colorMatrix(newMatrix);\n    }\n\n    // set the new matrix\n    this.uniforms.m.value = newMatrix;\n};\n\n/**\n * Multiplies two mat5's\n *\n * @param out {array} (mat 5x4) the receiving matrix\n * @param a {array} (mat 5x4) the first operand\n * @param b {array} (mat 5x4) the second operand\n * @returns out {array} (mat 5x4)\n */\nColorMatrixFilter.prototype._multiply = function (out, a, b)\n{\n\n    // Red Channel\n    out[0] = (a[0] * b[0]) + (a[1] * b[5]) + (a[2] * b[10]) + (a[3] * b[15]);\n    out[1] = (a[0] * b[1]) + (a[1] * b[6]) + (a[2] * b[11]) + (a[3] * b[16]);\n    out[2] = (a[0] * b[2]) + (a[1] * b[7]) + (a[2] * b[12]) + (a[3] * b[17]);\n    out[3] = (a[0] * b[3]) + (a[1] * b[8]) + (a[2] * b[13]) + (a[3] * b[18]);\n    out[4] = (a[0] * b[4]) + (a[1] * b[9]) + (a[2] * b[14]) + (a[3] * b[19]);\n\n    // Green Channel\n    out[5] = (a[5] * b[0]) + (a[6] * b[5]) + (a[7] * b[10]) + (a[8] * b[15]);\n    out[6] = (a[5] * b[1]) + (a[6] * b[6]) + (a[7] * b[11]) + (a[8] * b[16]);\n    out[7] = (a[5] * b[2]) + (a[6] * b[7]) + (a[7] * b[12]) + (a[8] * b[17]);\n    out[8] = (a[5] * b[3]) + (a[6] * b[8]) + (a[7] * b[13]) + (a[8] * b[18]);\n    out[9] = (a[5] * b[4]) + (a[6] * b[9]) + (a[7] * b[14]) + (a[8] * b[19]);\n\n    // Blue Channel\n    out[10] = (a[10] * b[0]) + (a[11] * b[5]) + (a[12] * b[10]) + (a[13] * b[15]);\n    out[11] = (a[10] * b[1]) + (a[11] * b[6]) + (a[12] * b[11]) + (a[13] * b[16]);\n    out[12] = (a[10] * b[2]) + (a[11] * b[7]) + (a[12] * b[12]) + (a[13] * b[17]);\n    out[13] = (a[10] * b[3]) + (a[11] * b[8]) + (a[12] * b[13]) + (a[13] * b[18]);\n    out[14] = (a[10] * b[4]) + (a[11] * b[9]) + (a[12] * b[14]) + (a[13] * b[19]);\n\n    // Alpha Channel\n    out[15] = (a[15] * b[0]) + (a[16] * b[5]) + (a[17] * b[10]) + (a[18] * b[15]);\n    out[16] = (a[15] * b[1]) + (a[16] * b[6]) + (a[17] * b[11]) + (a[18] * b[16]);\n    out[17] = (a[15] * b[2]) + (a[16] * b[7]) + (a[17] * b[12]) + (a[18] * b[17]);\n    out[18] = (a[15] * b[3]) + (a[16] * b[8]) + (a[17] * b[13]) + (a[18] * b[18]);\n    out[19] = (a[15] * b[4]) + (a[16] * b[9]) + (a[17] * b[14]) + (a[18] * b[19]);\n\n    return out;\n};\n\n/**\n * Create a Float32 Array and normalize the offset component to 0-1\n *\n * @param matrix {number[]} (mat 5x4)\n * @return m {number[]} (mat 5x4) with all values between 0-1\n */\nColorMatrixFilter.prototype._colorMatrix = function (matrix)\n{\n    // Create a Float32 Array and normalize the offset component to 0-1\n    var m = new Float32Array(matrix);\n    m[4] /= 255;\n    m[9] /= 255;\n    m[14] /= 255;\n    m[19] /= 255;\n\n    return m;\n};\n\n/**\n * Adjusts brightness\n *\n * Multiply the current matrix\n * @param b {number} value of the brigthness (0 is black)\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.brightness = function (b, multiply)\n{\n    var matrix = [\n        b, 0, 0, 0, 0,\n        0, b, 0, 0, 0,\n        0, 0, b, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Set the matrices in grey scales\n *\n * Multiply the current matrix\n * @param scale {number} value of the grey (0 is black)\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.greyscale = function (scale, multiply)\n{\n    var matrix = [\n        scale, scale, scale, 0, 0,\n        scale, scale, scale, 0, 0,\n        scale, scale, scale, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n//Americanized alias\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\n\n/**\n * Set the black and white matrice\n * Multiply the current matrix\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.blackAndWhite = function (multiply)\n{\n    var matrix = [\n        0.3, 0.6, 0.1, 0, 0,\n        0.3, 0.6, 0.1, 0, 0,\n        0.3, 0.6, 0.1, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Set the hue property of the color\n *\n * Multiply the current matrix\n * @param rotation {number} in degrees\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.hue = function (rotation, multiply)\n{\n    rotation = (rotation || 0) / 180 * Math.PI;\n    var cos = Math.cos(rotation),\n        sin = Math.sin(rotation);\n\n    // luminanceRed, luminanceGreen, luminanceBlue\n    var lumR = 0.213, // or 0.3086\n        lumG = 0.715, // or 0.6094\n        lumB = 0.072; // or 0.0820\n\n    var matrix = [\n        lumR + cos * (1 - lumR) + sin * (-lumR), lumG + cos * (-lumG) + sin * (-lumG), lumB + cos * (-lumB) + sin * (1 - lumB), 0, 0,\n        lumR + cos * (-lumR) + sin * (0.143), lumG + cos * (1 - lumG) + sin * (0.140), lumB + cos * (-lumB) + sin * (-0.283), 0, 0,\n        lumR + cos * (-lumR) + sin * (-(1 - lumR)), lumG + cos * (-lumG) + sin * (lumG), lumB + cos * (1 - lumB) + sin * (lumB), 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n\n/**\n * Set the contrast matrix, increase the separation between dark and bright\n * Increase contrast : shadows darker and highlights brighter\n * Decrease contrast : bring the shadows up and the highlights down\n *\n * @param amount {number} value of the contrast\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.contrast = function (amount, multiply)\n{\n    var v = (amount || 0) + 1;\n    var o = -128 * (v - 1);\n\n    var matrix = [\n        v, 0, 0, 0, o,\n        0, v, 0, 0, o,\n        0, 0, v, 0, o,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Set the saturation matrix, increase the separation between colors\n * Increase saturation : increase contrast, brightness, and sharpness\n * @param amount {number}\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.saturate = function (amount, multiply)\n{\n    var x = (amount || 0) * 2 / 3 + 1;\n    var y = ((x - 1) * -0.5);\n\n    var matrix = [\n        x, y, y, 0, 0,\n        y, x, y, 0, 0,\n        y, y, x, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Desaturate image (remove color)\n *\n * Call the saturate function\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.desaturate = function (multiply) // jshint unused:false\n{\n    this.saturate(-1);\n};\n\n/**\n * Negative image (inverse of classic rgb matrix)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.negative = function (multiply)\n{\n    var matrix = [\n        0, 1, 1, 0, 0,\n        1, 0, 1, 0, 0,\n        1, 1, 0, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Sepia image\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.sepia = function (multiply)\n{\n    var matrix = [\n        0.393, 0.7689999, 0.18899999, 0, 0,\n        0.349, 0.6859999, 0.16799999, 0, 0,\n        0.272, 0.5339999, 0.13099999, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.technicolor = function (multiply)\n{\n    var matrix = [\n        1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n        -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n        -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Polaroid filter\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.polaroid = function (multiply)\n{\n    var matrix = [\n        1.438, -0.062, -0.062, 0, 0,\n        -0.122, 1.378, -0.122, 0, 0,\n        -0.016, -0.016, 1.483, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Filter who transforms : Red -> Blue and Blue -> Red\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.toBGR = function (multiply)\n{\n    var matrix = [\n        0, 0, 1, 0, 0,\n        0, 1, 0, 0, 0,\n        1, 0, 0, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.kodachrome = function (multiply)\n{\n    var matrix = [\n        1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n        -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n        -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/**\n * Brown delicious browni filter (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.browni = function (multiply)\n{\n    var matrix = [\n        0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n        -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n        0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/*\n * Vintage filter (thanks Dominic Szablewski)\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.vintage = function (multiply)\n{\n    var matrix = [\n        0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n        0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n        0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/*\n * We don't know exactly what it does, kind of gradient map, but funny to play with!\n *\n * @param desaturation {number}\n * @param toned {number}\n * @param lightColor {string} (example : \"0xFFE580\")\n * @param darkColor {string}  (example : \"0xFFE580\")\n *\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.colorTone = function (desaturation, toned, lightColor, darkColor, multiply)\n{\n    desaturation = desaturation || 0.2;\n    toned = toned || 0.15;\n    lightColor = lightColor || 0xFFE580;\n    darkColor = darkColor || 0x338000;\n\n    var lR = ((lightColor >> 16) & 0xFF) / 255;\n    var lG = ((lightColor >> 8) & 0xFF) / 255;\n    var lB = (lightColor & 0xFF) / 255;\n\n    var dR = ((darkColor >> 16) & 0xFF) / 255;\n    var dG = ((darkColor >> 8) & 0xFF) / 255;\n    var dB = (darkColor & 0xFF) / 255;\n\n    var matrix = [\n        0.3, 0.59, 0.11, 0, 0,\n        lR, lG, lB, desaturation, 0,\n        dR, dG, dB, toned, 0,\n        lR - dR, lG - dG, lB - dB, 0, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/*\n * Night effect\n *\n * @param intensity {number}\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.night = function (intensity, multiply)\n{\n    intensity = intensity || 0.1;\n    var matrix = [\n        intensity * ( -2.0), -intensity, 0, 0, 0,\n        -intensity, 0, intensity, 0, 0,\n        0, intensity, intensity * 2.0, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n\n/*\n * Predator effect\n *\n * Erase the current matrix by setting a new indepent one\n *\n * @param amount {number} how much the predator feels his future victim\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.predator = function (amount, multiply)\n{\n    var matrix = [\n        11.224130630493164 * amount, -4.794486999511719 * amount, -2.8746118545532227 * amount, 0 * amount, 0.40342438220977783 * amount,\n        -3.6330697536468506 * amount, 9.193157196044922 * amount, -2.951810836791992 * amount, 0 * amount, -1.316135048866272 * amount,\n        -3.2184197902679443 * amount, -4.2375030517578125 * amount, 7.476448059082031 * amount, 0 * amount, 0.8044459223747253 * amount,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/*\n * LSD effect\n *\n * Multiply the current matrix\n *\n * @param amount {number} How crazy is your effect\n * @param multiply {boolean} refer to ._loadMatrix() method\n */\nColorMatrixFilter.prototype.lsd = function (multiply)\n{\n    var matrix = [\n        2, -0.4, 0.5, 0, 0,\n        -0.5, 2, -0.4, 0, 0,\n        -0.4, -0.5, 3, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, multiply);\n};\n\n/*\n * Reset function\n *\n * Erase the current matrix by setting the default one\n *\n */\nColorMatrixFilter.prototype.reset = function ()\n{\n    var matrix = [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0\n    ];\n\n    this._loadMatrix(matrix, false);\n};\n\n\nObject.defineProperties(ColorMatrixFilter.prototype, {\n    /**\n     * Sets the matrix of the color matrix filter\n     *\n     * @member {number[]}\n     * @memberof ColorMatrixFilter#\n     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n     */\n    matrix: {\n        get: function ()\n        {\n            return this.uniforms.m.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.m.value = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}