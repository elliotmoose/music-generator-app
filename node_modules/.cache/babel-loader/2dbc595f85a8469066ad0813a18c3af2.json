{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\n\nexport var AMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(AMOscillator, _Source);\n\n  var _super = _createSuper(AMOscillator);\n\n  function AMOscillator() {\n    var _this;\n\n    _classCallCheck(this, AMOscillator);\n\n    _this = _super.call(this, optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    _this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    _this._modulationNode = new Gain({\n      context: _this.context\n    });\n    var options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    _this._carrier = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: options.type\n    });\n    _this.frequency = _this._carrier.frequency, _this.detune = _this._carrier.detune;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n\n    _this._carrier.chain(_this._modulationNode, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\", \"harmonicity\"]);\n    return _this;\n  }\n\n  _createClass(AMOscillator, [{\n    key: \"_start\",\n\n    /**\n     * start the oscillator\n     */\n    value: function _start(time) {\n      this._modulator.start(time);\n\n      this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._modulator.stop(time);\n\n      this._carrier.stop(time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n\n      this._carrier.restart(time);\n    }\n    /**\n     * The type of the carrier oscillator\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AMOscillator.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n\n      this._carrier.dispose();\n\n      this._modulator.dispose();\n\n      this._modulationNode.dispose();\n\n      this._modulationScale.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._carrier.type;\n    },\n    set: function set(type) {\n      this._carrier.type = type;\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._carrier.baseType;\n    },\n    set: function set(baseType) {\n      this._carrier.baseType = baseType;\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._carrier.partialCount;\n    },\n    set: function set(partialCount) {\n      this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n\n  }, {\n    key: \"modulationType\",\n    get: function get() {\n      return this._modulator.type;\n    },\n    set: function set(type) {\n      this._modulator.type = type;\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._carrier.phase;\n    },\n    set: function set(phase) {\n      this._carrier.phase = phase;\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._carrier.partials;\n    },\n    set: function set(partials) {\n      this._carrier.partials = partials;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        harmonicity: 1,\n        modulationType: \"square\"\n      });\n    }\n  }]);\n\n  return AMOscillator;\n}(Source);","map":{"version":3,"sources":["../../../../Tone/source/oscillator/AMOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source {\n    constructor() {\n        super(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n        this.name = \"AMOscillator\";\n        /**\n         * convert the -1,1 output to 0,1\n         */\n        this._modulationScale = new AudioToGain({ context: this.context });\n        /**\n         * the node where the modulation happens\n         */\n        this._modulationNode = new Gain({\n            context: this.context,\n        });\n        const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n        this._carrier = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n            type: options.type,\n        });\n        this.frequency = this._carrier.frequency,\n            this.detune = this._carrier.detune;\n        this._modulator = new Oscillator({\n            context: this.context,\n            phase: options.phase,\n            type: options.modulationType,\n        });\n        this.harmonicity = new Multiply({\n            context: this.context,\n            units: \"positive\",\n            value: options.harmonicity,\n        });\n        // connections\n        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n        this._carrier.chain(this._modulationNode, this.output);\n        readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            harmonicity: 1,\n            modulationType: \"square\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        this._modulator.start(time);\n        this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        this._modulator.stop(time);\n        this._carrier.stop(time);\n    }\n    _restart(time) {\n        this._modulator.restart(time);\n        this._carrier.restart(time);\n    }\n    /**\n     * The type of the carrier oscillator\n     */\n    get type() {\n        return this._carrier.type;\n    }\n    set type(type) {\n        this._carrier.type = type;\n    }\n    get baseType() {\n        return this._carrier.baseType;\n    }\n    set baseType(baseType) {\n        this._carrier.baseType = baseType;\n    }\n    get partialCount() {\n        return this._carrier.partialCount;\n    }\n    set partialCount(partialCount) {\n        this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n    get modulationType() {\n        return this._modulator.type;\n    }\n    set modulationType(type) {\n        this._modulator.type = type;\n    }\n    get phase() {\n        return this._carrier.phase;\n    }\n    set phase(phase) {\n        this._carrier.phase = phase;\n        this._modulator.phase = phase;\n    }\n    get partials() {\n        return this._carrier.partials;\n    }\n    set partials(partials) {\n        this._carrier.partials = partials;\n    }\n    asArray(length = 1024) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this._modulationNode.dispose();\n        this._modulationScale.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AMOscillator.js.map"]},"metadata":{},"sourceType":"module"}