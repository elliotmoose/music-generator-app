{"ast":null,"code":"/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\nfunction ParticleBuffer(gl, properties, size) {\n  /**\n   * the current WebGL drawing context\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n  /**\n   *\n   *\n   * @member {number}\n   */\n\n  this.vertSize = 2;\n  /**\n   *\n   *\n   * @member {number}\n   */\n\n  this.vertByteSize = this.vertSize * 4;\n  /**\n   * The number of images in the SpriteBatch before it flushes.\n   *\n   * @member {number}\n   */\n\n  this.size = size;\n  /**\n   *\n   *\n   * @member {Array}\n   */\n\n  this.dynamicProperties = [];\n  /**\n   *\n   *\n   * @member {Array}\n   */\n\n  this.staticProperties = [];\n\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n\n    if (property.dynamic) {\n      this.dynamicProperties.push(property);\n    } else {\n      this.staticProperties.push(property);\n    }\n  }\n\n  this.staticStride = 0;\n  this.staticBuffer = null;\n  this.staticData = null;\n  this.dynamicStride = 0;\n  this.dynamicBuffer = null;\n  this.dynamicData = null;\n  this.initBuffers();\n}\n\nParticleBuffer.prototype.constructor = ParticleBuffer;\nmodule.exports = ParticleBuffer;\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\n\nParticleBuffer.prototype.initBuffers = function () {\n  var gl = this.gl;\n  var i;\n  var property;\n  var dynamicOffset = 0;\n  this.dynamicStride = 0;\n\n  for (i = 0; i < this.dynamicProperties.length; i++) {\n    property = this.dynamicProperties[i];\n    property.offset = dynamicOffset;\n    dynamicOffset += property.size;\n    this.dynamicStride += property.size;\n  }\n\n  this.dynamicData = new Float32Array(this.size * this.dynamicStride * 4);\n  this.dynamicBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW); // static //\n\n  var staticOffset = 0;\n  this.staticStride = 0;\n\n  for (i = 0; i < this.staticProperties.length; i++) {\n    property = this.staticProperties[i];\n    property.offset = staticOffset;\n    staticOffset += property.size;\n    this.staticStride += property.size;\n  }\n\n  this.staticData = new Float32Array(this.size * this.staticStride * 4);\n  this.staticBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, this.staticData, gl.DYNAMIC_DRAW);\n};\n\nParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n  var gl = this.gl;\n\n  for (var i = 0; i < this.dynamicProperties.length; i++) {\n    var property = this.dynamicProperties[i];\n    property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n};\n\nParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n  var gl = this.gl;\n\n  for (var i = 0; i < this.staticProperties.length; i++) {\n    var property = this.staticProperties[i];\n    property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.staticData);\n};\n/**\n * Starts a new sprite batch.\n *\n */\n\n\nParticleBuffer.prototype.bind = function () {\n  var gl = this.gl;\n  var i, property;\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n\n  for (i = 0; i < this.dynamicProperties.length; i++) {\n    property = this.dynamicProperties[i];\n    gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n\n  for (i = 0; i < this.staticProperties.length; i++) {\n    property = this.staticProperties[i];\n    gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.staticStride * 4, property.offset * 4);\n  }\n};\n/**\n * Destroys the SpriteBatch.\n *\n */\n\n\nParticleBuffer.prototype.destroy = function () {\n  this.dynamicProperties = null;\n  this.dynamicData = null;\n  this.gl.deleteBuffer(this.dynamicBuffer);\n  this.staticProperties = null;\n  this.staticData = null;\n  this.gl.deleteBuffer(this.staticBuffer);\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/particles/webgl/ParticleBuffer.js"],"names":["ParticleBuffer","gl","properties","size","vertSize","vertByteSize","dynamicProperties","staticProperties","i","length","property","dynamic","push","staticStride","staticBuffer","staticData","dynamicStride","dynamicBuffer","dynamicData","initBuffers","prototype","constructor","module","exports","dynamicOffset","offset","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","staticOffset","uploadDynamic","children","startIndex","amount","uploadFunction","bufferSubData","uploadStatic","bind","vertexAttribPointer","attribute","FLOAT","destroy","deleteBuffer"],"mappings":"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","sourcesContent":["\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\nfunction ParticleBuffer(gl, properties, size)\n{\n    /**\n     * the current WebGL drawing context\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     *\n     *\n     * @member {number}\n     */\n    this.vertSize = 2;\n\n    /**\n     *\n     *\n     * @member {number}\n     */\n    this.vertByteSize = this.vertSize * 4;\n\n    /**\n     * The number of images in the SpriteBatch before it flushes.\n     *\n     * @member {number}\n     */\n    this.size = size;\n\n    /**\n     *\n     *\n     * @member {Array}\n     */\n    this.dynamicProperties = [];\n\n    /**\n     *\n     *\n     * @member {Array}\n     */\n    this.staticProperties = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n        var property = properties[i];\n\n        if(property.dynamic)\n        {\n            this.dynamicProperties.push(property);\n        }\n        else\n        {\n            this.staticProperties.push(property);\n        }\n    }\n\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n\n    this.initBuffers();\n\n}\n\nParticleBuffer.prototype.constructor = ParticleBuffer;\nmodule.exports = ParticleBuffer;\n\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\nParticleBuffer.prototype.initBuffers = function ()\n{\n    var gl = this.gl;\n    var i;\n    var property;\n\n    var dynamicOffset = 0;\n    this.dynamicStride = 0;\n\n    for (i = 0; i < this.dynamicProperties.length; i++)\n    {\n        property = this.dynamicProperties[i];\n\n        property.offset = dynamicOffset;\n        dynamicOffset += property.size;\n        this.dynamicStride += property.size;\n    }\n\n    this.dynamicData = new Float32Array( this.size * this.dynamicStride * 4);\n    this.dynamicBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW);\n\n\n    // static //\n    var staticOffset = 0;\n    this.staticStride = 0;\n\n    for (i = 0; i < this.staticProperties.length; i++)\n    {\n        property = this.staticProperties[i];\n\n        property.offset = staticOffset;\n        staticOffset += property.size;\n        this.staticStride += property.size;\n    }\n\n    this.staticData = new Float32Array( this.size * this.staticStride * 4);\n    this.staticBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.staticData, gl.DYNAMIC_DRAW);\n\n};\n\nParticleBuffer.prototype.uploadDynamic = function(children, startIndex, amount)\n{\n    var gl = this.gl;\n\n    for (var i = 0; i < this.dynamicProperties.length; i++)\n    {\n        var property = this.dynamicProperties[i];\n        property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n};\n\nParticleBuffer.prototype.uploadStatic = function(children, startIndex, amount)\n{\n    var gl = this.gl;\n\n    for (var i = 0; i < this.staticProperties.length; i++)\n    {\n        var property = this.staticProperties[i];\n        property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.staticData);\n};\n\n/**\n * Starts a new sprite batch.\n *\n */\nParticleBuffer.prototype.bind = function ()\n{\n    var gl = this.gl;\n    var i, property;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n\n    for (i = 0; i < this.dynamicProperties.length; i++)\n    {\n        property = this.dynamicProperties[i];\n        gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n\n    for (i = 0; i < this.staticProperties.length; i++)\n    {\n        property = this.staticProperties[i];\n        gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.staticStride * 4, property.offset * 4);\n    }\n};\n\n/**\n * Destroys the SpriteBatch.\n *\n */\nParticleBuffer.prototype.destroy = function ()\n{\n    this.dynamicProperties = null;\n    this.dynamicData = null;\n    this.gl.deleteBuffer(this.dynamicBuffer);\n\n    this.staticProperties = null;\n    this.staticData = null;\n    this.gl.deleteBuffer(this.staticBuffer);\n};\n"]},"metadata":{},"sourceType":"script"}