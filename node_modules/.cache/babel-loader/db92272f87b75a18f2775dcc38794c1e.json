{"ast":null,"code":"import _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nvar allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nexport var Freeverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Freeverb, _StereoEffect);\n\n  var _super = _createSuper(Freeverb);\n\n  function Freeverb() {\n    var _this;\n\n    _classCallCheck(this, Freeverb);\n\n    _this = _super.call(this, optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    _this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    _this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    _this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    _this._allpassFiltersR = [];\n    var options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    _this._allpassFiltersL = allpassFilterFrequencies.map(function (freq) {\n      var allpassL = _this.context.createBiquadFilter();\n\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    _this._allpassFiltersR = allpassFilterFrequencies.map(function (freq) {\n      var allpassR = _this.context.createBiquadFilter();\n\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    _this._combFilters = combFilterTunings.map(function (delayTime, index) {\n      var lfpf = new LowpassCombFilter({\n        context: _this.context,\n        dampening: options.dampening,\n        delayTime: delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        var _this2;\n\n        (_this2 = _this).connectEffectLeft.apply(_this2, [lfpf].concat(_toConsumableArray(_this._allpassFiltersL)));\n      } else {\n        var _this3;\n\n        (_this3 = _this).connectEffectRight.apply(_this3, [lfpf].concat(_toConsumableArray(_this._allpassFiltersR)));\n      }\n\n      _this.roomSize.connect(lfpf.resonance);\n\n      return lfpf;\n    });\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n\n  _createClass(Freeverb, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Freeverb.prototype), \"dispose\", this).call(this);\n\n      this._allpassFiltersL.forEach(function (al) {\n        return al.disconnect();\n      });\n\n      this._allpassFiltersR.forEach(function (ar) {\n        return ar.disconnect();\n      });\n\n      this._combFilters.forEach(function (cf) {\n        return cf.dispose();\n      });\n\n      this.roomSize.dispose();\n      return this;\n    }\n  }, {\n    key: \"dampening\",\n\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    get: function get() {\n      return this._combFilters[0].dampening;\n    },\n    set: function set(d) {\n      this._combFilters.forEach(function (c) {\n        return c.dampening = d;\n      });\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.7,\n        dampening: 3000\n      });\n    }\n  }]);\n\n  return Freeverb;\n}(StereoEffect);","map":{"version":3,"sources":["../../../Tone/effect/Freeverb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n        this.name = \"Freeverb\";\n        /**\n         * the comb filters\n         */\n        this._combFilters = [];\n        /**\n         * the allpass filters on the left\n         */\n        this._allpassFiltersL = [];\n        /**\n         * the allpass filters on the right\n         */\n        this._allpassFiltersR = [];\n        const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n        this.roomSize = new Signal({\n            context: this.context,\n            value: options.roomSize,\n            units: \"normalRange\",\n        });\n        // make the allpass filters on the right\n        this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n            const allpassL = this.context.createBiquadFilter();\n            allpassL.type = \"allpass\";\n            allpassL.frequency.value = freq;\n            return allpassL;\n        });\n        // make the allpass filters on the left\n        this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n            const allpassR = this.context.createBiquadFilter();\n            allpassR.type = \"allpass\";\n            allpassR.frequency.value = freq;\n            return allpassR;\n        });\n        // make the comb filters\n        this._combFilters = combFilterTunings.map((delayTime, index) => {\n            const lfpf = new LowpassCombFilter({\n                context: this.context,\n                dampening: options.dampening,\n                delayTime,\n            });\n            if (index < combFilterTunings.length / 2) {\n                this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n            }\n            else {\n                this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n            }\n            this.roomSize.connect(lfpf.resonance);\n            return lfpf;\n        });\n        readOnly(this, [\"roomSize\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            roomSize: 0.7,\n            dampening: 3000\n        });\n    }\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    get dampening() {\n        return this._combFilters[0].dampening;\n    }\n    set dampening(d) {\n        this._combFilters.forEach(c => c.dampening = d);\n    }\n    dispose() {\n        super.dispose();\n        this._allpassFiltersL.forEach(al => al.disconnect());\n        this._allpassFiltersR.forEach(ar => ar.disconnect());\n        this._combFilters.forEach(cf => cf.dispose());\n        this.roomSize.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Freeverb.js.map"]},"metadata":{},"sourceType":"module"}