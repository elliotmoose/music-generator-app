{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport var OneShotSource = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OneShotSource, _ToneAudioNode);\n\n  var _super = _createSuper(OneShotSource);\n\n  function OneShotSource(options) {\n    var _this;\n\n    _classCallCheck(this, OneShotSource);\n\n    _this = _super.call(this, options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    _this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    _this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    _this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    _this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    _this.output = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    _this._gainNode = _this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    _this.getStateAtTime = function (time) {\n      var computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    _this._curve = options.curve;\n    _this.onended = options.onended;\n    return _this;\n  }\n\n  _createClass(OneShotSource, [{\n    key: \"_startGain\",\n\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    value: function _startGain(time) {\n      var gain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n      var fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n      this._startTime = time + fadeInTime;\n      this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n      if (fadeInTime > 0) {\n        this._gainNode.gain.setValueAtTime(0, time);\n\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n        } else {\n          this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n        }\n      } else {\n        this._gainNode.gain.setValueAtTime(gain, time);\n      }\n\n      return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.log(\"stop\", time);\n\n      this._stopGain(this.toSeconds(time));\n\n      return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n\n  }, {\n    key: \"_stopGain\",\n    value: function _stopGain(time) {\n      var _this2 = this;\n\n      assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n      this.cancelStop(); // the fadeOut time\n\n      var fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n      this._stopTime = this.toSeconds(time) + fadeOutTime;\n      this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n      if (fadeOutTime > 0) {\n        // start the fade out curve at the given time\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n        } else {\n          this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n        }\n      } else {\n        // stop any ongoing ramps, and set the value to 0\n        this._gainNode.gain.cancelAndHoldAtTime(time);\n\n        this._gainNode.gain.setValueAtTime(0, time);\n      }\n\n      this.context.clearTimeout(this._timeout);\n      this._timeout = this.context.setTimeout(function () {\n        // allow additional time for the exponential curve to fully decay\n        var additionalTail = _this2._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n        _this2._stopSource(_this2.now() + additionalTail);\n\n        _this2._onended();\n      }, this._stopTime - this.context.currentTime);\n      return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n\n  }, {\n    key: \"_onended\",\n    value: function _onended() {\n      var _this3 = this;\n\n      if (this.onended !== noOp) {\n        this.onended(this); // overwrite onended to make sure it only is called once\n\n        this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n        if (!this.context.isOffline) {\n          var disposeCallback = function disposeCallback() {\n            return _this3.dispose();\n          }; // @ts-ignore\n\n\n          if (typeof window.requestIdleCallback !== \"undefined\") {\n            // @ts-ignore\n            window.requestIdleCallback(disposeCallback);\n          } else {\n            setTimeout(disposeCallback, 1000);\n          }\n        }\n      }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n\n  }, {\n    key: \"cancelStop\",\n\n    /**\n     * Cancel a scheduled stop event\n     */\n    value: function cancelStop() {\n      this.log(\"cancelStop\");\n      assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n      this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n      this.context.clearTimeout(this._timeout);\n      this._stopTime = -1;\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OneShotSource.prototype), \"dispose\", this).call(this);\n\n      this._gainNode.disconnect();\n\n      return this;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.getStateAtTime(this.now());\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        curve: \"linear\",\n        fadeIn: 0,\n        fadeOut: 0,\n        onended: noOp\n      });\n    }\n  }]);\n\n  return OneShotSource;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../Tone/source/OneShotSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport class OneShotSource extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        /**\n         * The callback to invoke after the\n         * source is done playing.\n         */\n        this.onended = noOp;\n        /**\n         * The start time\n         */\n        this._startTime = -1;\n        /**\n         * The stop time\n         */\n        this._stopTime = -1;\n        /**\n         * The id of the timeout\n         */\n        this._timeout = -1;\n        /**\n         * The public output node\n         */\n        this.output = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * The output gain node.\n         */\n        this._gainNode = this.output;\n        /**\n         * Get the playback state at the given time\n         */\n        this.getStateAtTime = function (time) {\n            const computedTime = this.toSeconds(time);\n            if (this._startTime !== -1 &&\n                computedTime >= this._startTime &&\n                (this._stopTime === -1 || computedTime <= this._stopTime)) {\n                return \"started\";\n            }\n            else {\n                return \"stopped\";\n            }\n        };\n        this._fadeIn = options.fadeIn;\n        this._fadeOut = options.fadeOut;\n        this._curve = options.curve;\n        this.onended = options.onended;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            curve: \"linear\",\n            fadeIn: 0,\n            fadeOut: 0,\n            onended: noOp,\n        });\n    }\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    _startGain(time, gain = 1) {\n        assert(this._startTime === -1, \"Source cannot be started more than once\");\n        // apply a fade in envelope\n        const fadeInTime = this.toSeconds(this._fadeIn);\n        // record the start time\n        this._startTime = time + fadeInTime;\n        this._startTime = Math.max(this._startTime, this.context.currentTime);\n        // schedule the envelope\n        if (fadeInTime > 0) {\n            this._gainNode.gain.setValueAtTime(0, time);\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n            }\n            else {\n                this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n            }\n        }\n        else {\n            this._gainNode.gain.setValueAtTime(gain, time);\n        }\n        return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n    stop(time) {\n        this.log(\"stop\", time);\n        this._stopGain(this.toSeconds(time));\n        return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n    _stopGain(time) {\n        assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n        // cancel the previous stop\n        this.cancelStop();\n        // the fadeOut time\n        const fadeOutTime = this.toSeconds(this._fadeOut);\n        // schedule the stop callback\n        this._stopTime = this.toSeconds(time) + fadeOutTime;\n        this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n        if (fadeOutTime > 0) {\n            // start the fade out curve at the given time\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n            }\n            else {\n                this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n            }\n        }\n        else {\n            // stop any ongoing ramps, and set the value to 0\n            this._gainNode.gain.cancelAndHoldAtTime(time);\n            this._gainNode.gain.setValueAtTime(0, time);\n        }\n        this.context.clearTimeout(this._timeout);\n        this._timeout = this.context.setTimeout(() => {\n            // allow additional time for the exponential curve to fully decay\n            const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n            this._stopSource(this.now() + additionalTail);\n            this._onended();\n        }, this._stopTime - this.context.currentTime);\n        return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n    _onended() {\n        if (this.onended !== noOp) {\n            this.onended(this);\n            // overwrite onended to make sure it only is called once\n            this.onended = noOp;\n            // dispose when it's ended to free up for garbage collection only in the online context\n            if (!this.context.isOffline) {\n                const disposeCallback = () => this.dispose();\n                // @ts-ignore\n                if (typeof window.requestIdleCallback !== \"undefined\") {\n                    // @ts-ignore\n                    window.requestIdleCallback(disposeCallback);\n                }\n                else {\n                    setTimeout(disposeCallback, 1000);\n                }\n            }\n        }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n    get state() {\n        return this.getStateAtTime(this.now());\n    }\n    /**\n     * Cancel a scheduled stop event\n     */\n    cancelStop() {\n        this.log(\"cancelStop\");\n        assert(this._startTime !== -1, \"Source is not started\");\n        // cancel the stop envelope\n        this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n        this.context.clearTimeout(this._timeout);\n        this._stopTime = -1;\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._gainNode.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=OneShotSource.js.map"]},"metadata":{},"sourceType":"module"}