{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\n\nexport var StereoWidener = /*#__PURE__*/function (_MidSideEffect) {\n  _inherits(StereoWidener, _MidSideEffect);\n\n  var _super = _createSuper(StereoWidener);\n\n  function StereoWidener() {\n    var _this;\n\n    _classCallCheck(this, StereoWidener);\n\n    _this = _super.call(this, optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    _this.name = \"StereoWidener\";\n    var options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"width\"]);\n    _this._twoTimesWidthMid = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._twoTimesWidthSide = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._midMult = new Multiply({\n      context: _this.context\n    });\n\n    _this._twoTimesWidthMid.connect(_this._midMult.factor);\n\n    _this.connectEffectMid(_this._midMult);\n\n    _this._oneMinusWidth = new Subtract({\n      context: _this.context\n    });\n\n    _this._oneMinusWidth.connect(_this._twoTimesWidthMid);\n\n    connect(_this.context.getConstant(1), _this._oneMinusWidth);\n\n    _this.width.connect(_this._oneMinusWidth.subtrahend);\n\n    _this._sideMult = new Multiply({\n      context: _this.context\n    });\n\n    _this.width.connect(_this._twoTimesWidthSide);\n\n    _this._twoTimesWidthSide.connect(_this._sideMult.factor);\n\n    _this.connectEffectSide(_this._sideMult);\n\n    return _this;\n  }\n\n  _createClass(StereoWidener, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoWidener.prototype), \"dispose\", this).call(this);\n\n      this.width.dispose();\n\n      this._midMult.dispose();\n\n      this._sideMult.dispose();\n\n      this._twoTimesWidthMid.dispose();\n\n      this._twoTimesWidthSide.dispose();\n\n      this._oneMinusWidth.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MidSideEffect.getDefaults(), {\n        width: 0.5\n      });\n    }\n  }]);\n\n  return StereoWidener;\n}(MidSideEffect);","map":{"version":3,"sources":["../../../Tone/effect/StereoWidener.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,aAAT,QAAoD,yBAApD;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,QAAT,QAAyB,oBAAzB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,OAAT,QAAwB,+BAAxB;AAMA;;;;;;;;;AASG;;AACH,WAAa,aAAb;AAAA;;AAAA;;AAuCC,2BAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAA1B;AAvCQ,UAAA,IAAA,GAAe,eAAf;AAwCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,OAAD,CAAzC,CAApC;AACA,UAAK,KAAL,GAAa,IAAI,MAAJ,CAAW;AACvB,MAAA,OAAO,EAAE,MAAK,OADS;AAEvB,MAAA,KAAK,EAAE,OAAO,CAAC,KAFQ;AAGvB,MAAA,KAAK,EAAE;AAHgB,KAAX,CAAb;AAKA,IAAA,QAAQ,gCAAO,CAAC,OAAD,CAAP,CAAR;AACA,UAAK,iBAAL,GAAyB,IAAI,QAAJ,CAAa;AACrC,MAAA,OAAO,EAAE,MAAK,OADuB;AAErC,MAAA,KAAK,EAAE;AAF8B,KAAb,CAAzB;AAIA,UAAK,kBAAL,GAA0B,IAAI,QAAJ,CAAa;AACtC,MAAA,OAAO,EAAE,MAAK,OADwB;AAEtC,MAAA,KAAK,EAAE;AAF+B,KAAb,CAA1B;AAIA,UAAK,QAAL,GAAgB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAb,CAAhB;;AACA,UAAK,iBAAL,CAAuB,OAAvB,CAA+B,MAAK,QAAL,CAAc,MAA7C;;AACA,UAAK,gBAAL,CAAsB,MAAK,QAA3B;;AAEA,UAAK,cAAL,GAAsB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAb,CAAtB;;AACA,UAAK,cAAL,CAAoB,OAApB,CAA4B,MAAK,iBAAjC;;AACA,IAAA,OAAO,CAAC,MAAK,OAAL,CAAa,WAAb,CAAyB,CAAzB,CAAD,EAA8B,MAAK,cAAnC,CAAP;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,cAAL,CAAoB,UAAvC;;AAEA,UAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAb,CAAjB;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,kBAAxB;;AACA,UAAK,kBAAL,CAAwB,OAAxB,CAAgC,MAAK,SAAL,CAAe,MAA/C;;AACA,UAAK,iBAAL,CAAuB,MAAK,SAA5B;;AA9BD;AA+BC;;AAtEF;AAAA;AAAA,8BA8EQ;AACN;;AACA,WAAK,KAAL,CAAW,OAAX;;AACA,WAAK,QAAL,CAAc,OAAd;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,WAAK,iBAAL,CAAuB,OAAvB;;AACA,WAAK,kBAAL,CAAwB,OAAxB;;AACA,WAAK,cAAL,CAAoB,OAApB;;AACA,aAAO,IAAP;AACA;AAvFF;AAAA;AAAA,kCAwEmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,KAAK,EAAE;AAD0C,OAA3C,CAAP;AAGA;AA5EF;;AAAA;AAAA,EAAmC,aAAnC","sourceRoot":"","sourcesContent":["import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect {\n    constructor() {\n        super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n        this.name = \"StereoWidener\";\n        const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n        this.width = new Signal({\n            context: this.context,\n            value: options.width,\n            units: \"normalRange\",\n        });\n        readOnly(this, [\"width\"]);\n        this._twoTimesWidthMid = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        this._twoTimesWidthSide = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        this._midMult = new Multiply({ context: this.context });\n        this._twoTimesWidthMid.connect(this._midMult.factor);\n        this.connectEffectMid(this._midMult);\n        this._oneMinusWidth = new Subtract({ context: this.context });\n        this._oneMinusWidth.connect(this._twoTimesWidthMid);\n        connect(this.context.getConstant(1), this._oneMinusWidth);\n        this.width.connect(this._oneMinusWidth.subtrahend);\n        this._sideMult = new Multiply({ context: this.context });\n        this.width.connect(this._twoTimesWidthSide);\n        this._twoTimesWidthSide.connect(this._sideMult.factor);\n        this.connectEffectSide(this._sideMult);\n    }\n    static getDefaults() {\n        return Object.assign(MidSideEffect.getDefaults(), {\n            width: 0.5,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.width.dispose();\n        this._midMult.dispose();\n        this._sideMult.dispose();\n        this._twoTimesWidthMid.dispose();\n        this._twoTimesWidthSide.dispose();\n        this._oneMinusWidth.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoWidener.js.map"]},"metadata":{},"sourceType":"module"}