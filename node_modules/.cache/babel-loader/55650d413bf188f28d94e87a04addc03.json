{"ast":null,"code":"export var wrapAudioBufferSourceNodeStartMethodOffsetClamping = function wrapAudioBufferSourceNodeStartMethodOffsetClamping(nativeAudioBufferSourceNode) {\n  nativeAudioBufferSourceNode.start = function (start) {\n    return function () {\n      var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var duration = arguments.length > 2 ? arguments[2] : undefined;\n      var buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n\n      var clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  }(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"sources":["../../../src/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,kDAAkD,GAAG,SAArD,kDAAqD,CAAC,2BAAD,EAAoE;AAClI,EAAA,2BAA2B,CAAC,KAA5B,GAAqC,UAAC,KAAD,EAAU;AAC3C,WAAO,YAA4C;AAAA,UAA3C,IAA2C,uEAApC,CAAoC;AAAA,UAAjC,MAAiC,uEAAxB,CAAwB;AAAA,UAArB,QAAqB;AAC/C,UAAM,MAAM,GAAG,2BAA2B,CAAC,MAA3C,CAD+C,CAE/C;;AACA,UAAM,aAAa,GAAG,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,QAAhB,EAA0B,MAA1B,CAAjD,CAH+C,CAK/C;;AACA,UAAI,MAAM,KAAK,IAAX,IAAmB,aAAa,GAAG,MAAM,CAAC,QAAP,GAAkB,MAAM,2BAA2B,CAAC,OAA5B,CAAoC,UAAnG,EAA+G;AAC3G,QAAA,KAAK,CAAC,IAAN,CAAW,2BAAX,EAAwC,IAAxC,EAA8C,CAA9C,EAAiD,CAAjD;AACH,OAFD,MAEO;AACH,QAAA,KAAK,CAAC,IAAN,CAAW,2BAAX,EAAwC,IAAxC,EAA8C,aAA9C,EAA6D,QAA7D;AACH;AACJ,KAXD;AAYH,GAbmC,CAajC,2BAA2B,CAAC,KAbK,CAApC;AAcH,CAfM","sourceRoot":"","sourcesContent":["export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping.js.map"]},"metadata":{},"sourceType":"module"}