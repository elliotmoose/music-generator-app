{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\n\nexport var AmplitudeEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(AmplitudeEnvelope, _Envelope);\n\n  var _super = _createSuper(AmplitudeEnvelope);\n\n  function AmplitudeEnvelope() {\n    var _this;\n\n    _classCallCheck(this, AmplitudeEnvelope);\n\n    _this = _super.call(this, optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    _this.name = \"AmplitudeEnvelope\";\n    _this._gainNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    _this.output = _this._gainNode;\n    _this.input = _this._gainNode;\n\n    _this._sig.connect(_this._gainNode.gain);\n\n    _this.output = _this._gainNode;\n    _this.input = _this._gainNode;\n    return _this;\n  }\n  /**\n   * Clean up\n   */\n\n\n  _createClass(AmplitudeEnvelope, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AmplitudeEnvelope.prototype), \"dispose\", this).call(this);\n\n      this._gainNode.dispose();\n\n      return this;\n    }\n  }]);\n\n  return AmplitudeEnvelope;\n}(Envelope);","map":{"version":3,"sources":["../../../../Tone/component/envelope/AmplitudeEnvelope.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,IAAT,QAAqB,yBAArB;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,QAA0C,YAA1C;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AACH,WAAa,iBAAb;AAAA;;AAAA;;AAsBC,+BAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,EAA+B,SAA/B,CAA7C,CAA1B;AArBQ,UAAA,IAAA,GAAe,mBAAf;AAED,UAAA,SAAA,GAAkB,IAAI,IAAJ,CAAS;AAClC,MAAA,OAAO,EAAE,MAAK,OADoB;AAElC,MAAA,IAAI,EAAE;AAF4B,KAAT,CAAlB;AAIR,UAAA,MAAA,GAAe,MAAK,SAApB;AACA,UAAA,KAAA,GAAc,MAAK,SAAnB;;AAeC,UAAK,IAAL,CAAU,OAAV,CAAkB,MAAK,SAAL,CAAe,IAAjC;;AACA,UAAK,MAAL,GAAc,MAAK,SAAnB;AACA,UAAK,KAAL,GAAa,MAAK,SAAlB;AAJD;AAKC;AAED;;AAEG;;;AA/BJ;AAAA;AAAA,8BAgCQ;AACN;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,aAAO,IAAP;AACA;AApCF;;AAAA;AAAA,EAAuC,QAAvC","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n    constructor() {\n        super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n        this.name = \"AmplitudeEnvelope\";\n        this._gainNode = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        this.output = this._gainNode;\n        this.input = this._gainNode;\n        this._sig.connect(this._gainNode.gain);\n        this.output = this._gainNode;\n        this.input = this._gainNode;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._gainNode.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AmplitudeEnvelope.js.map"]},"metadata":{},"sourceType":"module"}