{"ast":null,"code":"import _toConsumableArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nexport var Phaser = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Phaser, _StereoEffect);\n\n  var _super = _createSuper(Phaser);\n\n  function Phaser() {\n    var _this2, _this3;\n\n    var _this;\n\n    _classCallCheck(this, Phaser);\n\n    _this = _super.call(this, optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    _this.name = \"Phaser\";\n    var options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this.Q = new Signal({\n      context: _this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    _this._filtersL = _this._makeFilters(options.stages, _this._lfoL);\n    _this._filtersR = _this._makeFilters(options.stages, _this._lfoR);\n    _this.frequency = _this._lfoL.frequency;\n    _this.frequency.value = options.frequency; // connect them up\n\n    (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._filtersL));\n\n    (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._filtersR)); // control the frequency with one LFO\n\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // set the options\n\n\n    _this.baseFrequency = options.baseFrequency;\n    _this.octaves = options.octaves; // start the lfo\n\n    _this._lfoL.start();\n\n    _this._lfoR.start();\n\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(Phaser, [{\n    key: \"_makeFilters\",\n    value: function _makeFilters(stages, connectToFreq) {\n      var filters = []; // make all the filters\n\n      for (var i = 0; i < stages; i++) {\n        var filter = this.context.createBiquadFilter();\n        filter.type = \"allpass\";\n        this.Q.connect(filter.Q);\n        connectToFreq.connect(filter.frequency);\n        filters.push(filter);\n      }\n\n      return filters;\n    }\n    /**\n     * The number of octaves the phase goes above the baseFrequency\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Phaser.prototype), \"dispose\", this).call(this);\n\n      this.Q.dispose();\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._filtersL.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this._filtersR.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this.frequency.dispose();\n      return this;\n    }\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      var max = this._baseFrequency * Math.pow(2, octaves);\n      this._lfoL.max = max;\n      this._lfoR.max = max;\n    }\n    /**\n     * The the base frequency of the filters.\n     */\n\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(freq) {\n      this._baseFrequency = this.toFrequency(freq);\n      this._lfoL.min = this._baseFrequency;\n      this._lfoR.min = this._baseFrequency;\n      this.octaves = this._octaves;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 0.5,\n        octaves: 3,\n        stages: 10,\n        Q: 10,\n        baseFrequency: 350\n      });\n    }\n  }]);\n\n  return Phaser;\n}(StereoEffect);","map":{"version":3,"sources":["../../../Tone/effect/Phaser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect {\n    constructor() {\n        super(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n        this.name = \"Phaser\";\n        const options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n        this._lfoL = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1\n        });\n        this._lfoR = new LFO({\n            context: this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n            phase: 180,\n        });\n        this._baseFrequency = this.toFrequency(options.baseFrequency);\n        this._octaves = options.octaves;\n        this.Q = new Signal({\n            context: this.context,\n            value: options.Q,\n            units: \"positive\",\n        });\n        this._filtersL = this._makeFilters(options.stages, this._lfoL);\n        this._filtersR = this._makeFilters(options.stages, this._lfoR);\n        this.frequency = this._lfoL.frequency;\n        this.frequency.value = options.frequency;\n        // connect them up\n        this.connectEffectLeft(...this._filtersL);\n        this.connectEffectRight(...this._filtersR);\n        // control the frequency with one LFO\n        this._lfoL.frequency.connect(this._lfoR.frequency);\n        // set the options\n        this.baseFrequency = options.baseFrequency;\n        this.octaves = options.octaves;\n        // start the lfo\n        this._lfoL.start();\n        this._lfoR.start();\n        readOnly(this, [\"frequency\", \"Q\"]);\n    }\n    static getDefaults() {\n        return Object.assign(StereoEffect.getDefaults(), {\n            frequency: 0.5,\n            octaves: 3,\n            stages: 10,\n            Q: 10,\n            baseFrequency: 350,\n        });\n    }\n    _makeFilters(stages, connectToFreq) {\n        const filters = [];\n        // make all the filters\n        for (let i = 0; i < stages; i++) {\n            const filter = this.context.createBiquadFilter();\n            filter.type = \"allpass\";\n            this.Q.connect(filter.Q);\n            connectToFreq.connect(filter.frequency);\n            filters.push(filter);\n        }\n        return filters;\n    }\n    /**\n     * The number of octaves the phase goes above the baseFrequency\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(octaves) {\n        this._octaves = octaves;\n        const max = this._baseFrequency * Math.pow(2, octaves);\n        this._lfoL.max = max;\n        this._lfoR.max = max;\n    }\n    /**\n     * The the base frequency of the filters.\n     */\n    get baseFrequency() {\n        return this._baseFrequency;\n    }\n    set baseFrequency(freq) {\n        this._baseFrequency = this.toFrequency(freq);\n        this._lfoL.min = this._baseFrequency;\n        this._lfoR.min = this._baseFrequency;\n        this.octaves = this._octaves;\n    }\n    dispose() {\n        super.dispose();\n        this.Q.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._filtersL.forEach(f => f.disconnect());\n        this._filtersR.forEach(f => f.disconnect());\n        this.frequency.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Phaser.js.map"]},"metadata":{},"sourceType":"module"}