{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\n\nexport var AMSynth = /*#__PURE__*/function (_ModulationSynth) {\n  _inherits(AMSynth, _ModulationSynth);\n\n  var _super = _createSuper(AMSynth);\n\n  function AMSynth() {\n    var _this;\n\n    _classCallCheck(this, AMSynth);\n\n    _this = _super.call(this, optionsFromArguments(AMSynth.getDefaults(), arguments));\n    _this.name = \"AMSynth\";\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    }); // control the two voices frequency\n\n    _this.frequency.connect(_this._carrier.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n\n    _this._carrier.chain(_this._modulationNode, _this.output);\n\n    return _this;\n  }\n\n  _createClass(AMSynth, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AMSynth.prototype), \"dispose\", this).call(this);\n\n      this._modulationScale.dispose();\n\n      return this;\n    }\n  }]);\n\n  return AMSynth;\n}(ModulationSynth);","map":{"version":3,"sources":["../../../Tone/instrument/AMSynth.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,WAAT,QAA4B,uBAA5B;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,eAAT,QAAwD,mBAAxD;AAIA;;;;;;;;;;;;AAYG;;AACH,WAAa,OAAb;AAAA;;AAAA;;AAUC,qBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAA1B;AATQ,UAAA,IAAA,GAAe,SAAf;AAWR,UAAK,gBAAL,GAAwB,IAAI,WAAJ,CAAgB;AACvC,MAAA,OAAO,EAAE,MAAK;AADyB,KAAhB,CAAxB,CAHD,CAOC;;AACA,UAAK,SAAL,CAAe,OAAf,CAAuB,MAAK,QAAL,CAAc,SAArC;;AACA,UAAK,SAAL,CAAe,KAAf,CAAqB,MAAK,WAA1B,EAAuC,MAAK,UAAL,CAAgB,SAAvD;;AACA,UAAK,MAAL,CAAY,GAAZ,CAAgB,MAAK,QAAL,CAAc,MAA9B,EAAsC,MAAK,UAAL,CAAgB,MAAtD;;AACA,UAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAK,gBAA3B,EAA6C,MAAK,eAAL,CAAqB,IAAlE;;AACA,UAAK,QAAL,CAAc,KAAd,CAAoB,MAAK,eAAzB,EAA0C,MAAK,MAA/C;;AAZD;AAaC;;AAvBF;AAAA;AAAA,8BAyBQ;AACN;;AACA,WAAK,gBAAL,CAAsB,OAAtB;;AACA,aAAO,IAAP;AACA;AA7BF;;AAAA;AAAA,EAA6B,eAA7B","sourceRoot":"","sourcesContent":["import { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth {\n    constructor() {\n        super(optionsFromArguments(AMSynth.getDefaults(), arguments));\n        this.name = \"AMSynth\";\n        this._modulationScale = new AudioToGain({\n            context: this.context,\n        });\n        // control the two voices frequency\n        this.frequency.connect(this._carrier.frequency);\n        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n        this.detune.fan(this._carrier.detune, this._modulator.detune);\n        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n        this._carrier.chain(this._modulationNode, this.output);\n    }\n    dispose() {\n        super.dispose();\n        this._modulationScale.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AMSynth.js.map"]},"metadata":{},"sourceType":"module"}