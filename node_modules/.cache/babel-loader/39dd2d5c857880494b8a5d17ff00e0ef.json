{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The BlurYTintFilter applies a vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction BlurYTintFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  fs.readFileSync(__dirname + '/blurYTint.vert', 'utf8'), // fragment shader\n  fs.readFileSync(__dirname + '/blurYTint.frag', 'utf8'), // set the uniforms\n  {\n    blur: {\n      type: '1f',\n      value: 1 / 512\n    },\n    color: {\n      type: 'c',\n      value: [0, 0, 0]\n    },\n    alpha: {\n      type: '1f',\n      value: 0.7\n    },\n    offset: {\n      type: '2f',\n      value: [5, 5]\n    },\n    strength: {\n      type: '1f',\n      value: 1\n    }\n  });\n  this.passes = 1;\n  this.strength = 4;\n}\n\nBlurYTintFilter.prototype = Object.create(core.AbstractFilter.prototype);\nBlurYTintFilter.prototype.constructor = BlurYTintFilter;\nmodule.exports = BlurYTintFilter;\n\nBlurYTintFilter.prototype.applyFilter = function (renderer, input, output, clear) {\n  var shader = this.getShader(renderer);\n  this.uniforms.strength.value = this.strength / 4 / this.passes * (input.frame.height / input.size.height);\n\n  if (this.passes === 1) {\n    renderer.filterManager.applyFilter(shader, input, output, clear);\n  } else {\n    var renderTarget = renderer.filterManager.getRenderTarget(true);\n    var flip = input;\n    var flop = renderTarget;\n\n    for (var i = 0; i < this.passes - 1; i++) {\n      renderer.filterManager.applyFilter(shader, flip, flop, clear);\n      var temp = flop;\n      flop = flip;\n      flip = temp;\n    }\n\n    renderer.filterManager.applyFilter(shader, flip, output, clear);\n    renderer.filterManager.returnRenderTarget(renderTarget);\n  }\n};\n\nObject.defineProperties(BlurYTintFilter.prototype, {\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @memberof BlurYFilter#\n   * @default 2\n   */\n  blur: {\n    get: function () {\n      return this.strength;\n    },\n    set: function (value) {\n      this.padding = value * 0.5;\n      this.strength = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/dropshadow/BlurYTintFilter.js"],"names":["core","require","fs","BlurYTintFilter","AbstractFilter","call","readFileSync","__dirname","blur","type","value","color","alpha","offset","strength","passes","prototype","Object","create","constructor","module","exports","applyFilter","renderer","input","output","clear","shader","getShader","uniforms","frame","height","size","filterManager","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","defineProperties","get","set","padding"],"mappings":"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","sourcesContent":["var core = require('../../core');\n\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The BlurYTintFilter applies a vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction BlurYTintFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        fs.readFileSync(__dirname + '/blurYTint.vert', 'utf8'),\n        // fragment shader\n        fs.readFileSync(__dirname + '/blurYTint.frag', 'utf8'),\n        // set the uniforms\n        {\n            blur: { type: '1f', value: 1 / 512 },\n            color: { type: 'c', value: [0,0,0]},\n            alpha: { type: '1f', value: 0.7 },\n            offset: { type: '2f', value:[5, 5]},\n            strength: { type: '1f', value:1}\n        }\n    );\n\n    this.passes = 1;\n    this.strength = 4;\n}\n\nBlurYTintFilter.prototype = Object.create(core.AbstractFilter.prototype);\nBlurYTintFilter.prototype.constructor = BlurYTintFilter;\nmodule.exports = BlurYTintFilter;\n\nBlurYTintFilter.prototype.applyFilter = function (renderer, input, output, clear)\n{\n    var shader = this.getShader(renderer);\n\n    this.uniforms.strength.value = this.strength / 4 / this.passes * (input.frame.height / input.size.height);\n\n    if(this.passes === 1)\n    {\n        renderer.filterManager.applyFilter(shader, input, output, clear);\n    }\n    else\n    {\n        var renderTarget = renderer.filterManager.getRenderTarget(true);\n        var flip = input;\n        var flop = renderTarget;\n\n        for(var i = 0; i < this.passes-1; i++)\n        {\n            renderer.filterManager.applyFilter(shader, flip, flop, clear);\n\n           var temp = flop;\n           flop = flip;\n           flip = temp;\n        }\n\n        renderer.filterManager.applyFilter(shader, flip, output, clear);\n\n        renderer.filterManager.returnRenderTarget(renderTarget);\n    }\n};\n\n\nObject.defineProperties(BlurYTintFilter.prototype, {\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @memberof BlurYFilter#\n     * @default 2\n     */\n    blur: {\n        get: function ()\n        {\n            return  this.strength;\n        },\n        set: function (value)\n        {\n            this.padding = value * 0.5;\n            this.strength = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}