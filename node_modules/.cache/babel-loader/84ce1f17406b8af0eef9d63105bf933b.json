{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport var Signal = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Signal, _ToneAudioNode);\n\n  var _super = _createSuper(Signal);\n\n  function Signal() {\n    var _this;\n\n    _classCallCheck(this, Signal);\n\n    _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    _this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    _this.override = true;\n    var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    _this.output = _this._constantSource = new ToneConstantSource({\n      context: _this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    _this._constantSource.start(0);\n\n    _this.input = _this._param = _this._constantSource.offset;\n    return _this;\n  }\n\n  _createClass(Signal, [{\n    key: \"connect\",\n    value: function connect(destination) {\n      var outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // start it only when connected to something\n      connectSignal(this, destination, outputNum, inputNum);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Signal.prototype), \"dispose\", this).call(this);\n\n      this._param.dispose();\n\n      this._constantSource.dispose();\n\n      return this;\n    } //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n\n  }, {\n    key: \"setValueAtTime\",\n    value: function setValueAtTime(value, time) {\n      this._param.setValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"getValueAtTime\",\n    value: function getValueAtTime(time) {\n      return this._param.getValueAtTime(time);\n    }\n  }, {\n    key: \"setRampPoint\",\n    value: function setRampPoint(time) {\n      this._param.setRampPoint(time);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampToValueAtTime\",\n    value: function linearRampToValueAtTime(value, time) {\n      this._param.linearRampToValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampToValueAtTime\",\n    value: function exponentialRampToValueAtTime(value, time) {\n      this._param.exponentialRampToValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampTo\",\n    value: function exponentialRampTo(value, rampTime, startTime) {\n      this._param.exponentialRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampTo\",\n    value: function linearRampTo(value, rampTime, startTime) {\n      this._param.linearRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"targetRampTo\",\n    value: function targetRampTo(value, rampTime, startTime) {\n      this._param.targetRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialApproachValueAtTime\",\n    value: function exponentialApproachValueAtTime(value, time, rampTime) {\n      this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n      return this;\n    }\n  }, {\n    key: \"setTargetAtTime\",\n    value: function setTargetAtTime(value, startTime, timeConstant) {\n      this._param.setTargetAtTime(value, startTime, timeConstant);\n\n      return this;\n    }\n  }, {\n    key: \"setValueCurveAtTime\",\n    value: function setValueCurveAtTime(values, startTime, duration, scaling) {\n      this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n      return this;\n    }\n  }, {\n    key: \"cancelScheduledValues\",\n    value: function cancelScheduledValues(time) {\n      this._param.cancelScheduledValues(time);\n\n      return this;\n    }\n  }, {\n    key: \"cancelAndHoldAtTime\",\n    value: function cancelAndHoldAtTime(time) {\n      this._param.cancelAndHoldAtTime(time);\n\n      return this;\n    }\n  }, {\n    key: \"rampTo\",\n    value: function rampTo(value, rampTime, startTime) {\n      this._param.rampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"apply\",\n\n    /**\n     * See [[Param.apply]].\n     */\n    value: function apply(param) {\n      this._param.apply(param);\n\n      return this;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._param.value;\n    },\n    set: function set(value) {\n      this._param.value = value;\n    }\n  }, {\n    key: \"convert\",\n    get: function get() {\n      return this._param.convert;\n    },\n    set: function set(convert) {\n      this._param.convert = convert;\n    }\n  }, {\n    key: \"units\",\n    get: function get() {\n      return this._param.units;\n    }\n  }, {\n    key: \"overridden\",\n    get: function get() {\n      return this._param.overridden;\n    },\n    set: function set(overridden) {\n      this._param.overridden = overridden;\n    }\n  }, {\n    key: \"maxValue\",\n    get: function get() {\n      return this._param.maxValue;\n    }\n  }, {\n    key: \"minValue\",\n    get: function get() {\n      return this._param.minValue;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        convert: true,\n        units: \"number\",\n        value: 0\n      });\n    }\n  }]);\n\n  return Signal;\n}(ToneAudioNode);\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"sources":["../../../Tone/signal/Signal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n        this.name = \"Signal\";\n        /**\n         * Indicates if the value should be overridden on connection.\n         */\n        this.override = true;\n        const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n        this.output = this._constantSource = new ToneConstantSource({\n            context: this.context,\n            convert: options.convert,\n            offset: options.value,\n            units: options.units,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        this._constantSource.start(0);\n        this.input = this._param = this._constantSource.offset;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            units: \"number\",\n            value: 0,\n        });\n    }\n    connect(destination, outputNum = 0, inputNum = 0) {\n        // start it only when connected to something\n        connectSignal(this, destination, outputNum, inputNum);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._param.dispose();\n        this._constantSource.dispose();\n        return this;\n    }\n    //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n    setValueAtTime(value, time) {\n        this._param.setValueAtTime(value, time);\n        return this;\n    }\n    getValueAtTime(time) {\n        return this._param.getValueAtTime(time);\n    }\n    setRampPoint(time) {\n        this._param.setRampPoint(time);\n        return this;\n    }\n    linearRampToValueAtTime(value, time) {\n        this._param.linearRampToValueAtTime(value, time);\n        return this;\n    }\n    exponentialRampToValueAtTime(value, time) {\n        this._param.exponentialRampToValueAtTime(value, time);\n        return this;\n    }\n    exponentialRampTo(value, rampTime, startTime) {\n        this._param.exponentialRampTo(value, rampTime, startTime);\n        return this;\n    }\n    linearRampTo(value, rampTime, startTime) {\n        this._param.linearRampTo(value, rampTime, startTime);\n        return this;\n    }\n    targetRampTo(value, rampTime, startTime) {\n        this._param.targetRampTo(value, rampTime, startTime);\n        return this;\n    }\n    exponentialApproachValueAtTime(value, time, rampTime) {\n        this._param.exponentialApproachValueAtTime(value, time, rampTime);\n        return this;\n    }\n    setTargetAtTime(value, startTime, timeConstant) {\n        this._param.setTargetAtTime(value, startTime, timeConstant);\n        return this;\n    }\n    setValueCurveAtTime(values, startTime, duration, scaling) {\n        this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n        return this;\n    }\n    cancelScheduledValues(time) {\n        this._param.cancelScheduledValues(time);\n        return this;\n    }\n    cancelAndHoldAtTime(time) {\n        this._param.cancelAndHoldAtTime(time);\n        return this;\n    }\n    rampTo(value, rampTime, startTime) {\n        this._param.rampTo(value, rampTime, startTime);\n        return this;\n    }\n    get value() {\n        return this._param.value;\n    }\n    set value(value) {\n        this._param.value = value;\n    }\n    get convert() {\n        return this._param.convert;\n    }\n    set convert(convert) {\n        this._param.convert = convert;\n    }\n    get units() {\n        return this._param.units;\n    }\n    get overridden() {\n        return this._param.overridden;\n    }\n    set overridden(overridden) {\n        this._param.overridden = overridden;\n    }\n    get maxValue() {\n        return this._param.maxValue;\n    }\n    get minValue() {\n        return this._param.minValue;\n    }\n    /**\n     * See [[Param.apply]].\n     */\n    apply(param) {\n        this._param.apply(param);\n        return this;\n    }\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n    if (destination instanceof Param || isAudioParam(destination) ||\n        (destination instanceof Signal && destination.override)) {\n        // cancel changes\n        destination.cancelScheduledValues(0);\n        // reset the value\n        destination.setValueAtTime(0, 0);\n        // mark the value as overridden\n        if (destination instanceof Signal) {\n            destination.overridden = true;\n        }\n    }\n    connect(signal, destination, outputNum, inputNum);\n}\n//# sourceMappingURL=Signal.js.map"]},"metadata":{},"sourceType":"module"}