{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\n\nexport var Timeline = /*#__PURE__*/function (_Tone) {\n  _inherits(Timeline, _Tone);\n\n  var _super = _createSuper(Timeline);\n\n  function Timeline() {\n    var _this;\n\n    _classCallCheck(this, Timeline);\n\n    _this = _super.call(this);\n    _this.name = \"Timeline\";\n    /**\n     * The array of scheduled timeline events\n     */\n\n    _this._timeline = [];\n    var options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n    _this.memory = options.memory;\n    _this.increasing = options.increasing;\n    return _this;\n  }\n\n  _createClass(Timeline, [{\n    key: \"add\",\n\n    /**\n     * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n     * @param event  The event object to insert into the timeline.\n     */\n    value: function add(event) {\n      // the event needs to have a time attribute\n      assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n      event.time = event.time.valueOf();\n\n      if (this.increasing && this.length) {\n        var lastValue = this._timeline[this.length - 1];\n        assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\n        this._timeline.push(event);\n      } else {\n        var index = this._search(event.time);\n\n        this._timeline.splice(index + 1, 0, event);\n      } // if the length is more than the memory, remove the previous ones\n\n\n      if (this.length > this.memory) {\n        var diff = this.length - this.memory;\n\n        this._timeline.splice(0, diff);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  {Object}  event  The event object to remove from the list.\n     * @returns {Timeline} this\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(event) {\n      var index = this._timeline.indexOf(event);\n\n      if (index !== -1) {\n        this._timeline.splice(index, 1);\n      }\n\n      return this;\n    }\n    /**\n     * Get the nearest event whose time is less than or equal to the given time.\n     * @param  time  The time to query.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(time) {\n      var param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"time\";\n\n      var index = this._search(time, param);\n\n      if (index !== -1) {\n        return this._timeline[index];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Return the first event in the timeline without removing it\n     * @returns {Object} The first event object\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._timeline[0];\n    }\n    /**\n     * Return the first event in the timeline and remove it\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      return this._timeline.shift();\n    }\n    /**\n     * Get the event which is scheduled after the given time.\n     * @param  time  The time to query.\n     */\n\n  }, {\n    key: \"getAfter\",\n    value: function getAfter(time) {\n      var param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"time\";\n\n      var index = this._search(time, param);\n\n      if (index + 1 < this._timeline.length) {\n        return this._timeline[index + 1];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get the event before the event at the given time.\n     * @param  time  The time to query.\n     */\n\n  }, {\n    key: \"getBefore\",\n    value: function getBefore(time) {\n      var len = this._timeline.length; // if it's after the last item, return the last item\n\n      if (len > 0 && this._timeline[len - 1].time < time) {\n        return this._timeline[len - 1];\n      }\n\n      var index = this._search(time);\n\n      if (index - 1 >= 0) {\n        return this._timeline[index - 1];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Cancel events at and after the given time\n     * @param  after  The time to query.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(after) {\n      if (this._timeline.length > 1) {\n        var index = this._search(after);\n\n        if (index >= 0) {\n          if (EQ(this._timeline[index].time, after)) {\n            // get the first item with that time\n            for (var i = index; i >= 0; i--) {\n              if (EQ(this._timeline[i].time, after)) {\n                index = i;\n              } else {\n                break;\n              }\n            }\n\n            this._timeline = this._timeline.slice(0, index);\n          } else {\n            this._timeline = this._timeline.slice(0, index + 1);\n          }\n        } else {\n          this._timeline = [];\n        }\n      } else if (this._timeline.length === 1) {\n        // the first item's time\n        if (GTE(this._timeline[0].time, after)) {\n          this._timeline = [];\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Cancel events before or equal to the given time.\n     * @param  time  The time to cancel before.\n     */\n\n  }, {\n    key: \"cancelBefore\",\n    value: function cancelBefore(time) {\n      var index = this._search(time);\n\n      if (index >= 0) {\n        this._timeline = this._timeline.slice(index + 1);\n      }\n\n      return this;\n    }\n    /**\n     * Returns the previous event if there is one. null otherwise\n     * @param  event The event to find the previous one of\n     * @return The event right before the given event\n     */\n\n  }, {\n    key: \"previousEvent\",\n    value: function previousEvent(event) {\n      var index = this._timeline.indexOf(event);\n\n      if (index > 0) {\n        return this._timeline[index - 1];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Does a binary search on the timeline array and returns the\n     * nearest event index whose time is after or equal to the given time.\n     * If a time is searched before the first index in the timeline, -1 is returned.\n     * If the time is after the end, the index of the last item is returned.\n     */\n\n  }, {\n    key: \"_search\",\n    value: function _search(time) {\n      var param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"time\";\n\n      if (this._timeline.length === 0) {\n        return -1;\n      }\n\n      var beginning = 0;\n      var len = this._timeline.length;\n      var end = len;\n\n      if (len > 0 && this._timeline[len - 1][param] <= time) {\n        return len - 1;\n      }\n\n      while (beginning < end) {\n        // calculate the midpoint for roughly equal partition\n        var midPoint = Math.floor(beginning + (end - beginning) / 2);\n        var event = this._timeline[midPoint];\n        var nextEvent = this._timeline[midPoint + 1];\n\n        if (EQ(event[param], time)) {\n          // choose the last one that has the same time\n          for (var i = midPoint; i < this._timeline.length; i++) {\n            var testEvent = this._timeline[i];\n\n            if (EQ(testEvent[param], time)) {\n              midPoint = i;\n            } else {\n              break;\n            }\n          }\n\n          return midPoint;\n        } else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n          return midPoint;\n        } else if (GT(event[param], time)) {\n          // search lower\n          end = midPoint;\n        } else {\n          // search upper\n          beginning = midPoint + 1;\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Internal iterator. Applies extra safety checks for\n     * removing items from the array.\n     */\n\n  }, {\n    key: \"_iterate\",\n    value: function _iterate(callback) {\n      var lowerBound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var upperBound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._timeline.length - 1;\n\n      this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n    }\n    /**\n     * Iterate over everything in the array\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this._iterate(callback);\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array at or before the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachBefore\",\n    value: function forEachBefore(time, callback) {\n      // iterate over the items in reverse so that removing an item doesn't break things\n      var upperBound = this._search(time);\n\n      if (upperBound !== -1) {\n        this._iterate(callback, 0, upperBound);\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array after the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachAfter\",\n    value: function forEachAfter(time, callback) {\n      // iterate over the items in reverse so that removing an item doesn't break things\n      var lowerBound = this._search(time);\n\n      this._iterate(callback, lowerBound + 1);\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array between the startTime and endTime.\n     * The timerange is inclusive of the startTime, but exclusive of the endTime.\n     * range = [startTime, endTime).\n     * @param  startTime The time to check if items are before\n     * @param  endTime The end of the test interval.\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachBetween\",\n    value: function forEachBetween(startTime, endTime, callback) {\n      var lowerBound = this._search(startTime);\n\n      var upperBound = this._search(endTime);\n\n      if (lowerBound !== -1 && upperBound !== -1) {\n        if (this._timeline[lowerBound].time !== startTime) {\n          lowerBound += 1;\n        } // exclusive of the end time\n\n\n        if (this._timeline[upperBound].time === endTime) {\n          upperBound -= 1;\n        }\n\n        this._iterate(callback, lowerBound, upperBound);\n      } else if (lowerBound === -1) {\n        this._iterate(callback, 0, upperBound);\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array at or after the given time. Similar to\n     * forEachAfter, but includes the item(s) at the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachFrom\",\n    value: function forEachFrom(time, callback) {\n      // iterate over the items in reverse so that removing an item doesn't break things\n      var lowerBound = this._search(time); // work backwards until the event time is less than time\n\n\n      while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n        lowerBound--;\n      }\n\n      this._iterate(callback, lowerBound + 1);\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array at the given time\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachAtTime\",\n    value: function forEachAtTime(time, callback) {\n      // iterate over the items in reverse so that removing an item doesn't break things\n      var upperBound = this._search(time);\n\n      if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n        var lowerBound = upperBound;\n\n        for (var i = upperBound; i >= 0; i--) {\n          if (EQ(this._timeline[i].time, time)) {\n            lowerBound = i;\n          } else {\n            break;\n          }\n        }\n\n        this._iterate(function (event) {\n          callback(event);\n        }, lowerBound, upperBound);\n      }\n\n      return this;\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Timeline.prototype), \"dispose\", this).call(this);\n\n      this._timeline = [];\n      return this;\n    }\n  }, {\n    key: \"length\",\n\n    /**\n     * The number of items in the timeline.\n     */\n    get: function get() {\n      return this._timeline.length;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        memory: Infinity,\n        increasing: false\n      };\n    }\n  }]);\n\n  return Timeline;\n}(Tone);","map":{"version":3,"sources":["../../../../Tone/core/util/Timeline.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline extends Tone {\n    constructor() {\n        super();\n        this.name = \"Timeline\";\n        /**\n         * The array of scheduled timeline events\n         */\n        this._timeline = [];\n        const options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n        this.memory = options.memory;\n        this.increasing = options.increasing;\n    }\n    static getDefaults() {\n        return {\n            memory: Infinity,\n            increasing: false,\n        };\n    }\n    /**\n     * The number of items in the timeline.\n     */\n    get length() {\n        return this._timeline.length;\n    }\n    /**\n     * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n     * @param event  The event object to insert into the timeline.\n     */\n    add(event) {\n        // the event needs to have a time attribute\n        assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n        event.time = event.time.valueOf();\n        if (this.increasing && this.length) {\n            const lastValue = this._timeline[this.length - 1];\n            assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n            this._timeline.push(event);\n        }\n        else {\n            const index = this._search(event.time);\n            this._timeline.splice(index + 1, 0, event);\n        }\n        // if the length is more than the memory, remove the previous ones\n        if (this.length > this.memory) {\n            const diff = this.length - this.memory;\n            this._timeline.splice(0, diff);\n        }\n        return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  {Object}  event  The event object to remove from the list.\n     * @returns {Timeline} this\n     */\n    remove(event) {\n        const index = this._timeline.indexOf(event);\n        if (index !== -1) {\n            this._timeline.splice(index, 1);\n        }\n        return this;\n    }\n    /**\n     * Get the nearest event whose time is less than or equal to the given time.\n     * @param  time  The time to query.\n     */\n    get(time, param = \"time\") {\n        const index = this._search(time, param);\n        if (index !== -1) {\n            return this._timeline[index];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Return the first event in the timeline without removing it\n     * @returns {Object} The first event object\n     */\n    peek() {\n        return this._timeline[0];\n    }\n    /**\n     * Return the first event in the timeline and remove it\n     */\n    shift() {\n        return this._timeline.shift();\n    }\n    /**\n     * Get the event which is scheduled after the given time.\n     * @param  time  The time to query.\n     */\n    getAfter(time, param = \"time\") {\n        const index = this._search(time, param);\n        if (index + 1 < this._timeline.length) {\n            return this._timeline[index + 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Get the event before the event at the given time.\n     * @param  time  The time to query.\n     */\n    getBefore(time) {\n        const len = this._timeline.length;\n        // if it's after the last item, return the last item\n        if (len > 0 && this._timeline[len - 1].time < time) {\n            return this._timeline[len - 1];\n        }\n        const index = this._search(time);\n        if (index - 1 >= 0) {\n            return this._timeline[index - 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Cancel events at and after the given time\n     * @param  after  The time to query.\n     */\n    cancel(after) {\n        if (this._timeline.length > 1) {\n            let index = this._search(after);\n            if (index >= 0) {\n                if (EQ(this._timeline[index].time, after)) {\n                    // get the first item with that time\n                    for (let i = index; i >= 0; i--) {\n                        if (EQ(this._timeline[i].time, after)) {\n                            index = i;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    this._timeline = this._timeline.slice(0, index);\n                }\n                else {\n                    this._timeline = this._timeline.slice(0, index + 1);\n                }\n            }\n            else {\n                this._timeline = [];\n            }\n        }\n        else if (this._timeline.length === 1) {\n            // the first item's time\n            if (GTE(this._timeline[0].time, after)) {\n                this._timeline = [];\n            }\n        }\n        return this;\n    }\n    /**\n     * Cancel events before or equal to the given time.\n     * @param  time  The time to cancel before.\n     */\n    cancelBefore(time) {\n        const index = this._search(time);\n        if (index >= 0) {\n            this._timeline = this._timeline.slice(index + 1);\n        }\n        return this;\n    }\n    /**\n     * Returns the previous event if there is one. null otherwise\n     * @param  event The event to find the previous one of\n     * @return The event right before the given event\n     */\n    previousEvent(event) {\n        const index = this._timeline.indexOf(event);\n        if (index > 0) {\n            return this._timeline[index - 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Does a binary search on the timeline array and returns the\n     * nearest event index whose time is after or equal to the given time.\n     * If a time is searched before the first index in the timeline, -1 is returned.\n     * If the time is after the end, the index of the last item is returned.\n     */\n    _search(time, param = \"time\") {\n        if (this._timeline.length === 0) {\n            return -1;\n        }\n        let beginning = 0;\n        const len = this._timeline.length;\n        let end = len;\n        if (len > 0 && this._timeline[len - 1][param] <= time) {\n            return len - 1;\n        }\n        while (beginning < end) {\n            // calculate the midpoint for roughly equal partition\n            let midPoint = Math.floor(beginning + (end - beginning) / 2);\n            const event = this._timeline[midPoint];\n            const nextEvent = this._timeline[midPoint + 1];\n            if (EQ(event[param], time)) {\n                // choose the last one that has the same time\n                for (let i = midPoint; i < this._timeline.length; i++) {\n                    const testEvent = this._timeline[i];\n                    if (EQ(testEvent[param], time)) {\n                        midPoint = i;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                return midPoint;\n            }\n            else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n                return midPoint;\n            }\n            else if (GT(event[param], time)) {\n                // search lower\n                end = midPoint;\n            }\n            else {\n                // search upper\n                beginning = midPoint + 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Internal iterator. Applies extra safety checks for\n     * removing items from the array.\n     */\n    _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {\n        this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n    }\n    /**\n     * Iterate over everything in the array\n     * @param  callback The callback to invoke with every item\n     */\n    forEach(callback) {\n        this._iterate(callback);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at or before the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachBefore(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const upperBound = this._search(time);\n        if (upperBound !== -1) {\n            this._iterate(callback, 0, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array after the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAfter(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const lowerBound = this._search(time);\n        this._iterate(callback, lowerBound + 1);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array between the startTime and endTime.\n     * The timerange is inclusive of the startTime, but exclusive of the endTime.\n     * range = [startTime, endTime).\n     * @param  startTime The time to check if items are before\n     * @param  endTime The end of the test interval.\n     * @param  callback The callback to invoke with every item\n     */\n    forEachBetween(startTime, endTime, callback) {\n        let lowerBound = this._search(startTime);\n        let upperBound = this._search(endTime);\n        if (lowerBound !== -1 && upperBound !== -1) {\n            if (this._timeline[lowerBound].time !== startTime) {\n                lowerBound += 1;\n            }\n            // exclusive of the end time\n            if (this._timeline[upperBound].time === endTime) {\n                upperBound -= 1;\n            }\n            this._iterate(callback, lowerBound, upperBound);\n        }\n        else if (lowerBound === -1) {\n            this._iterate(callback, 0, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at or after the given time. Similar to\n     * forEachAfter, but includes the item(s) at the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachFrom(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        let lowerBound = this._search(time);\n        // work backwards until the event time is less than time\n        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n            lowerBound--;\n        }\n        this._iterate(callback, lowerBound + 1);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at the given time\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAtTime(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const upperBound = this._search(time);\n        if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n            let lowerBound = upperBound;\n            for (let i = upperBound; i >= 0; i--) {\n                if (EQ(this._timeline[i].time, time)) {\n                    lowerBound = i;\n                }\n                else {\n                    break;\n                }\n            }\n            this._iterate(event => {\n                callback(event);\n            }, lowerBound, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._timeline = [];\n        return this;\n    }\n}\n//# sourceMappingURL=Timeline.js.map"]},"metadata":{},"sourceType":"module"}