{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport var createAudioListenerFactory = function createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) {\n  return function (context, nativeContext) {\n    var nativeListener = nativeContext.listener; // Bug #117: Only Chrome, Edge & Opera support the new interface already.\n\n    var createFakeAudioParams = function createFakeAudioParams() {\n      var channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n      var createFakeAudioParam = function createFakeAudioParam(input, value) {\n        var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: value\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get: function get() {\n            return value;\n          }\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        return createAudioParam({\n          context: context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      };\n\n      var lastOrientation = [0, 0, -1, 0, 1, 0];\n      var lastPosition = [0, 0, 0]; // tslint:disable-next-line:deprecation\n\n      scriptProcessorNode.onaudioprocess = function (_ref) {\n        var inputBuffer = _ref.inputBuffer;\n        var orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n        if (orientation.some(function (value, index) {\n          return value !== lastOrientation[index];\n        })) {\n          nativeListener.setOrientation.apply(nativeListener, orientation); // tslint:disable-line:deprecation\n\n          lastOrientation = orientation;\n        }\n\n        var positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n        if (positon.some(function (value, index) {\n          return value !== lastPosition[index];\n        })) {\n          nativeListener.setPosition.apply(nativeListener, positon); // tslint:disable-line:deprecation\n\n          lastPosition = positon;\n        }\n      };\n\n      channelMergerNode.connect(scriptProcessorNode);\n      return {\n        forwardX: createFakeAudioParam(0, 0),\n        forwardY: createFakeAudioParam(1, 0),\n        forwardZ: createFakeAudioParam(2, -1),\n        positionX: createFakeAudioParam(6, 0),\n        positionY: createFakeAudioParam(7, 0),\n        positionZ: createFakeAudioParam(8, 0),\n        upX: createFakeAudioParam(3, 0),\n        upY: createFakeAudioParam(4, 1),\n        upZ: createFakeAudioParam(5, 0)\n      };\n    };\n\n    var _ref2 = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener,\n        forwardX = _ref2.forwardX,\n        forwardY = _ref2.forwardY,\n        forwardZ = _ref2.forwardZ,\n        positionX = _ref2.positionX,\n        positionY = _ref2.positionY,\n        positionZ = _ref2.positionZ,\n        upX = _ref2.upX,\n        upY = _ref2.upY,\n        upZ = _ref2.upZ;\n\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-listener-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome, Edge & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: value\n                });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            // tslint:disable-next-line:deprecation\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => value !== lastPosition[index])) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-listener-factory.js.map"]},"metadata":{},"sourceType":"module"}