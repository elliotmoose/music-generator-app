{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log as _log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\n\nexport var Tone = /*#__PURE__*/function () {\n  function Tone() {\n    _classCallCheck(this, Tone);\n\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false; //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n\n    /**\n     * Indicates if the instance was disposed\n     */\n\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n\n\n  _createClass(Tone, [{\n    key: \"log\",\n\n    /**\n     * Prints the outputs to the console log for debugging purposes.\n     * Prints the contents only if either the object has a property\n     * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n     * is set to the name of the class.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * // prints all logs originating from this oscillator\n     * osc.debug = true;\n     * // calls to start/stop will print in the console\n     * osc.start();\n     */\n    value: function log() {\n      // if the object is either set to debug = true\n      // or if there is a string on the Tone.global.with the class name\n      if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _log.apply(void 0, [this].concat(args));\n      }\n    }\n    /**\n     * disconnect and dispose.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._wasDisposed = true;\n      return this;\n    }\n    /**\n     * Indicates if the instance was disposed. 'Disposing' an\n     * instance means that all of the Web Audio nodes that were\n     * created for the instance are disconnected and freed for garbage collection.\n     */\n\n  }, {\n    key: \"toString\",\n\n    /**\n     * Convert the class to a string\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.toString());\n     */\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this._wasDisposed;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {};\n    }\n  }]);\n\n  return Tone;\n}();\n/**\n * The version number semver\n */\n\nTone.version = version;","map":{"version":3,"sources":["../../../Tone/core/Tone.ts"],"names":[],"mappings":";;;AAAA;;;;;AAKG;AACH,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,SAAT,QAA0B,wBAA1B;AACA,SAAS,GAAG,IAAH,IAAT,QAAoB,cAApB;AASA;;;;AAIG;;AACH,WAAsB,IAAtB;AAAA,kBAAA;AAAA;;AAmBC;AACA;AACA;;AAEA;;AAEG;AACH,SAAA,KAAA,GAAQ,KAAR,CA1BD,CAgDC;AACA;AACA;;AAEA;;AAEG;;AACK,SAAA,YAAA,GAAe,KAAf;AA4BR;AAvEA;;AAEG;;;AAdJ;AAAA;;AA4BC;;;;;;;;;;;AAWG;AAvCJ,0BAwC6B;AAC3B;AACA;AACA,UAAI,KAAK,KAAL,IAAe,SAAS,IAAI,KAAK,QAAL,OAAoB,SAAS,CAAC,gBAA9D,EAAiF;AAAA,0CAHjE,IAGiE;AAHjE,UAAA,IAGiE;AAAA;;AAChF,QAAA,IAAG,MAAH,UAAI,IAAJ,SAAa,IAAb;AACA;AACD;AAWD;;AAEG;;AA3DJ;AAAA;AAAA,8BA4DQ;AACN,WAAK,YAAL,GAAoB,IAApB;AACA,aAAO,IAAP;AACA;AAED;;;;AAIG;;AArEJ;AAAA;;AA0EC;;;;;AAKG;AA/EJ,+BAgFS;AACP,aAAO,KAAK,IAAZ;AACA;AAlFF;AAAA;AAAA,wBAsEa;AACX,aAAO,KAAK,YAAZ;AACA;AAxEF;AAAA;AAAA,kCAemB;AACjB,aAAO,EAAP;AACA;AAjBF;;AAAA;AAAA;AAEC;;AAEG;;AACI,IAAA,CAAA,OAAA,GAAkB,OAAlB","sourceRoot":"","sourcesContent":["/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport class Tone {\n    constructor() {\n        //-------------------------------------\n        // \tDEBUGGING\n        //-------------------------------------\n        /**\n         * Set this debug flag to log all events that happen in this class.\n         */\n        this.debug = false;\n        //-------------------------------------\n        // \tDISPOSING\n        //-------------------------------------\n        /**\n         * Indicates if the instance was disposed\n         */\n        this._wasDisposed = false;\n    }\n    /**\n     * Returns all of the default options belonging to the class.\n     */\n    static getDefaults() {\n        return {};\n    }\n    /**\n     * Prints the outputs to the console log for debugging purposes.\n     * Prints the contents only if either the object has a property\n     * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n     * is set to the name of the class.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * // prints all logs originating from this oscillator\n     * osc.debug = true;\n     * // calls to start/stop will print in the console\n     * osc.start();\n     */\n    log(...args) {\n        // if the object is either set to debug = true\n        // or if there is a string on the Tone.global.with the class name\n        if (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n            log(this, ...args);\n        }\n    }\n    /**\n     * disconnect and dispose.\n     */\n    dispose() {\n        this._wasDisposed = true;\n        return this;\n    }\n    /**\n     * Indicates if the instance was disposed. 'Disposing' an\n     * instance means that all of the Web Audio nodes that were\n     * created for the instance are disconnected and freed for garbage collection.\n     */\n    get disposed() {\n        return this._wasDisposed;\n    }\n    /**\n     * Convert the class to a string\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.toString());\n     */\n    toString() {\n        return this.name;\n    }\n}\n/**\n * The version number semver\n */\nTone.version = version;\n//# sourceMappingURL=Tone.js.map"]},"metadata":{},"sourceType":"module"}