{"ast":null,"code":"export var createNativeAudioDestinationNodeFactory = function createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors) {\n  return function (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) {\n    var nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Safari does not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch (_unused) {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Safari does not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    var gainNode = createNativeGainNode(nativeContext, {\n      channelCount: channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n\n        try {\n          nativeAudioDestinationNode.channelCount = value;\n        } catch (err) {\n          // Bug #169: Safari throws an error on each attempt to change the channelCount.\n          if (value > nativeAudioDestinationNode.maxChannelCount) {\n            throw err;\n          }\n        }\n      };\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelCountMode = value;\n      };\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelInterpretation = value;\n      };\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: function get() {\n        return nativeAudioDestinationNode.maxChannelCount;\n      }\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-audio-destination-node.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,uCAAuC,GAA8C,SAArF,uCAAqF,CAC9F,oBAD8F,EAE9F,kBAF8F,EAG9F;AACA,SAAO,UAAC,aAAD,EAAgB,YAAhB,EAA8B,iCAA9B,EAAmE;AACtE,QAAM,0BAA0B,GAAG,aAAa,CAAC,WAAjD,CADsE,CAGtE;;AACA,QAAI,0BAA0B,CAAC,YAA3B,KAA4C,YAAhD,EAA8D;AAC1D,UAAI;AACA,QAAA,0BAA0B,CAAC,YAA3B,GAA0C,YAA1C;AACH,OAFD,CAEE,gBAAM,CACJ;AACH;AACJ,KAVqE,CAYtE;;;AACA,QAAI,iCAAiC,IAAI,0BAA0B,CAAC,gBAA3B,KAAgD,UAAzF,EAAqG;AACjG,MAAA,0BAA0B,CAAC,gBAA3B,GAA8C,UAA9C;AACH,KAfqE,CAiBtE;;;AACA,QAAI,0BAA0B,CAAC,eAA3B,KAA+C,CAAnD,EAAsD;AAClD,MAAA,MAAM,CAAC,cAAP,CAAsB,0BAAtB,EAAkD,iBAAlD,EAAqE;AACjE,QAAA,KAAK,EAAE;AAD0D,OAArE;AAGH,KAtBqE,CAwBtE;;;AACA,QAAM,QAAQ,GAAG,oBAAoB,CAAC,aAAD,EAAgB;AACjD,MAAA,YAAY,EAAZ,YADiD;AAEjD,MAAA,gBAAgB,EAAE,0BAA0B,CAAC,gBAFI;AAGjD,MAAA,qBAAqB,EAAE,0BAA0B,CAAC,qBAHD;AAIjD,MAAA,IAAI,EAAE;AAJ2C,KAAhB,CAArC;AAOA,IAAA,kBAAkB,CACd,QADc,EAEd,cAFc,EAGd,UAAC,GAAD;AAAA,aAAS;AAAA,eAAM,GAAG,CAAC,IAAJ,CAAS,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAAC,GAAD;AAAA,aAAS,UAAC,KAAD,EAAU;AACf,QAAA,GAAG,CAAC,IAAJ,CAAS,QAAT,EAAmB,KAAnB;;AAEA,YAAI;AACA,UAAA,0BAA0B,CAAC,YAA3B,GAA0C,KAA1C;AACH,SAFD,CAEE,OAAO,GAAP,EAAY;AACV;AACA,cAAI,KAAK,GAAG,0BAA0B,CAAC,eAAvC,EAAwD;AACpD,kBAAM,GAAN;AACH;AACJ;AACJ,OAXD;AAAA,KAJc,CAAlB;AAkBA,IAAA,kBAAkB,CACd,QADc,EAEd,kBAFc,EAGd,UAAC,GAAD;AAAA,aAAS;AAAA,eAAM,GAAG,CAAC,IAAJ,CAAS,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAAC,GAAD;AAAA,aAAS,UAAC,KAAD,EAAU;AACf,QAAA,GAAG,CAAC,IAAJ,CAAS,QAAT,EAAmB,KAAnB;AACA,QAAA,0BAA0B,CAAC,gBAA3B,GAA8C,KAA9C;AACH,OAHD;AAAA,KAJc,CAAlB;AAUA,IAAA,kBAAkB,CACd,QADc,EAEd,uBAFc,EAGd,UAAC,GAAD;AAAA,aAAS;AAAA,eAAM,GAAG,CAAC,IAAJ,CAAS,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAAC,GAAD;AAAA,aAAS,UAAC,KAAD,EAAU;AACf,QAAA,GAAG,CAAC,IAAJ,CAAS,QAAT,EAAmB,KAAnB;AACA,QAAA,0BAA0B,CAAC,qBAA3B,GAAmD,KAAnD;AACH,OAHD;AAAA,KAJc,CAAlB;AAUA,IAAA,MAAM,CAAC,cAAP,CAAsB,QAAtB,EAAgC,iBAAhC,EAAmD;AAC/C,MAAA,GAAG,EAAE;AAAA,eAAM,0BAA0B,CAAC,eAAjC;AAAA;AAD0C,KAAnD,EAtEsE,CA0EtE;;AACA,IAAA,QAAQ,CAAC,OAAT,CAAiB,0BAAjB;AAEA,WAA8F,QAA9F;AACH,GA9ED;AA+EH,CAnFM","sourceRoot":"","sourcesContent":["export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=native-audio-destination-node.js.map"]},"metadata":{},"sourceType":"module"}