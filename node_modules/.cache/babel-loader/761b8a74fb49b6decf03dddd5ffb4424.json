{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\n\nexport var Chebyshev = /*#__PURE__*/function (_Effect) {\n  _inherits(Chebyshev, _Effect);\n\n  var _super = _createSuper(Chebyshev);\n\n  function Chebyshev() {\n    var _this;\n\n    _classCallCheck(this, Chebyshev);\n\n    _this = _super.call(this, optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n    _this.name = \"Chebyshev\";\n    var options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._order = options.order;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.order = options.order;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  _createClass(Chebyshev, [{\n    key: \"_getCoefficient\",\n\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    value: function _getCoefficient(x, degree, memo) {\n      if (memo.has(degree)) {\n        return memo.get(degree);\n      } else if (degree === 0) {\n        memo.set(degree, 0);\n      } else if (degree === 1) {\n        memo.set(degree, x);\n      } else {\n        memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n      }\n\n      return memo.get(degree);\n    }\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Chebyshev.prototype), \"dispose\", this).call(this);\n\n      this._shaper.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this._order;\n    },\n    set: function set(order) {\n      var _this2 = this;\n\n      this._order = order;\n\n      this._shaper.setMap(function (x) {\n        return _this2._getCoefficient(x, order, new Map());\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        order: 1,\n        oversample: \"none\"\n      });\n    }\n  }]);\n\n  return Chebyshev;\n}(Effect);","map":{"version":3,"sources":["../../../Tone/effect/Chebyshev.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,MAAT,QAAsC,UAAtC;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,UAAT,QAA2B,sBAA3B;AAOA;;;;;;;;;;;;;AAaG;;AACH,WAAa,SAAb;AAAA;;AAAA;;AAmBC,uBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAA1B;AAnBQ,UAAA,IAAA,GAAe,WAAf;AAoBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,SAAS,CAAC,WAAV,EAAD,EAA0B,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAApC;AAEA,UAAK,OAAL,GAAe,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,MAAK,OADe;AAE7B,MAAA,MAAM,EAAE;AAFqB,KAAf,CAAf;AAIA,UAAK,MAAL,GAAc,OAAO,CAAC,KAAtB;;AAEA,UAAK,aAAL,CAAmB,MAAK,OAAxB;;AACA,UAAK,KAAL,GAAa,OAAO,CAAC,KAArB;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AAbD;AAcC;;AAjCF;AAAA;;AA0CC;;;;;AAKG;AA/CJ,oCAgDyB,CAhDzB,EAgDoC,MAhDpC,EAgDoD,IAhDpD,EAgD6E;AAC3E,UAAI,IAAI,CAAC,GAAL,CAAS,MAAT,CAAJ,EAAsB;AACrB,eAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAP;AACA,OAFD,MAEO,IAAI,MAAM,KAAK,CAAf,EAAkB;AACxB,QAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB;AACA,OAFM,MAEA,IAAI,MAAM,KAAK,CAAf,EAAkB;AACxB,QAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB;AACA,OAFM,MAEA;AACN,QAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,IAAI,CAAJ,GAAQ,KAAK,eAAL,CAAqB,CAArB,EAAwB,MAAM,GAAG,CAAjC,EAAoC,IAApC,CAAR,GAAoD,KAAK,eAAL,CAAqB,CAArB,EAAwB,MAAM,GAAG,CAAjC,EAAoC,IAApC,CAArE;AACA;;AACD,aAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAP;AACA;AAED;;;;;;;;;AASG;;AAtEJ;AAAA;AAAA,8BA2FQ;AACN;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,aAAO,IAAP;AACA;AA/FF;AAAA;AAAA,wBAuEU;AACR,aAAO,KAAK,MAAZ;AACA,KAzEF;AAAA,sBA0EW,KA1EX,EA0EgB;AAAA;;AACd,WAAK,MAAL,GAAc,KAAd;;AACA,WAAK,OAAL,CAAa,MAAb,CAAqB,UAAA,CAAC,EAAG;AACxB,eAAO,MAAI,CAAC,eAAL,CAAqB,CAArB,EAAwB,KAAxB,EAA+B,IAAI,GAAJ,EAA/B,CAAP;AACA,OAFD;AAGA;AAED;;AAEG;;AAnFJ;AAAA;AAAA,wBAoFe;AACb,aAAO,KAAK,OAAL,CAAa,UAApB;AACA,KAtFF;AAAA,sBAuFgB,YAvFhB,EAuF4B;AAC1B,WAAK,OAAL,CAAa,UAAb,GAA0B,YAA1B;AACA;AAzFF;AAAA;AAAA,kCAmCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,KAAK,EAAE,CADmC;AAE1C,QAAA,UAAU,EAAE;AAF8B,OAApC,CAAP;AAIA;AAxCF;;AAAA;AAAA,EAA+B,MAA/B","sourceRoot":"","sourcesContent":["import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect {\n    constructor() {\n        super(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n        this.name = \"Chebyshev\";\n        const options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n        this._shaper = new WaveShaper({\n            context: this.context,\n            length: 4096\n        });\n        this._order = options.order;\n        this.connectEffect(this._shaper);\n        this.order = options.order;\n        this.oversample = options.oversample;\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            order: 1,\n            oversample: \"none\"\n        });\n    }\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    _getCoefficient(x, degree, memo) {\n        if (memo.has(degree)) {\n            return memo.get(degree);\n        }\n        else if (degree === 0) {\n            memo.set(degree, 0);\n        }\n        else if (degree === 1) {\n            memo.set(degree, x);\n        }\n        else {\n            memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n        }\n        return memo.get(degree);\n    }\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n    get order() {\n        return this._order;\n    }\n    set order(order) {\n        this._order = order;\n        this._shaper.setMap((x => {\n            return this._getCoefficient(x, order, new Map());\n        }));\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        this._shaper.oversample = oversampling;\n    }\n    dispose() {\n        super.dispose();\n        this._shaper.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Chebyshev.js.map"]},"metadata":{},"sourceType":"module"}