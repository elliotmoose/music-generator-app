{"ast":null,"code":"var TextureShader = require('../../renderers/webgl/shaders/TextureShader');\n/**\n * @class\n * @extends PIXI.TextureShader\n * @memberof PIXI\n * @param shaderManager {ShaderManager} The webgl shader manager this shader works for.\n */\n\n\nfunction ParticleShader(shaderManager) {\n  TextureShader.call(this, shaderManager, // vertex shader\n  ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'attribute float aColor;', 'attribute vec2 aPositionCoord;', 'attribute vec2 aScale;', 'attribute float aRotation;', 'uniform mat3 projectionMatrix;', 'varying vec2 vTextureCoord;', 'varying float vColor;', 'void main(void){', '   vec2 v = aVertexPosition;', '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);', '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);', '   v = v + aPositionCoord;', '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);', '   vTextureCoord = aTextureCoord;', '   vColor = aColor;', '}'].join('\\n'), // hello\n  ['precision lowp float;', 'varying vec2 vTextureCoord;', 'varying float vColor;', 'uniform sampler2D uSampler;', 'uniform float uAlpha;', 'void main(void){', '  vec4 color = texture2D(uSampler, vTextureCoord) * vColor * uAlpha;', '  if (color.a == 0.0) discard;', '  gl_FragColor = color;', '}'].join('\\n'), // custom uniforms\n  {\n    uAlpha: {\n      type: '1f',\n      value: 1\n    }\n  }, // custom attributes\n  {\n    aPositionCoord: 0,\n    // aScale:         0,\n    aRotation: 0\n  }); // TEMP HACK\n}\n\nParticleShader.prototype = Object.create(TextureShader.prototype);\nParticleShader.prototype.constructor = ParticleShader;\nmodule.exports = ParticleShader;","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/particles/webgl/ParticleShader.js"],"names":["TextureShader","require","ParticleShader","shaderManager","call","join","uAlpha","type","value","aPositionCoord","aRotation","prototype","Object","create","constructor","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,6CAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,aAAxB,EACA;AACIH,EAAAA,aAAa,CAACI,IAAd,CAAmB,IAAnB,EACID,aADJ,EAEI;AACA,GACI,iCADJ,EAEI,+BAFJ,EAGI,yBAHJ,EAKI,gCALJ,EAMI,wBANJ,EAOI,4BAPJ,EASI,gCATJ,EAWI,6BAXJ,EAYI,uBAZJ,EAcI,kBAdJ,EAeI,8BAfJ,EAiBI,uFAjBJ,EAkBI,uFAlBJ,EAmBI,4BAnBJ,EAqBI,wEArBJ,EAuBI,mCAvBJ,EAwBI,qBAxBJ,EAyBI,GAzBJ,EA0BEE,IA1BF,CA0BO,IA1BP,CAHJ,EA8BI;AACC,GACG,uBADH,EAGG,6BAHH,EAIG,uBAJH,EAMG,6BANH,EAOG,uBAPH,EASG,kBATH,EAUG,sEAVH,EAWG,gCAXH,EAYG,yBAZH,EAaG,GAbH,EAcCA,IAdD,CAcM,IAdN,CA/BL,EA8CI;AACA;AACIC,IAAAA,MAAM,EAAG;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB;AADb,GA/CJ,EAkDI;AACA;AACIC,IAAAA,cAAc,EAAE,CADpB;AAEG;AACCC,IAAAA,SAAS,EAAO;AAHpB,GAnDJ,EADJ,CA2DI;AAEH;;AAEDR,cAAc,CAACS,SAAf,GAA2BC,MAAM,CAACC,MAAP,CAAcb,aAAa,CAACW,SAA5B,CAA3B;AACAT,cAAc,CAACS,SAAf,CAAyBG,WAAzB,GAAuCZ,cAAvC;AAEAa,MAAM,CAACC,OAAP,GAAiBd,cAAjB","sourcesContent":["var TextureShader = require('../../renderers/webgl/shaders/TextureShader');\n\n/**\n * @class\n * @extends PIXI.TextureShader\n * @memberof PIXI\n * @param shaderManager {ShaderManager} The webgl shader manager this shader works for.\n */\nfunction ParticleShader(shaderManager)\n{\n    TextureShader.call(this,\n        shaderManager,\n        // vertex shader\n        [\n            'attribute vec2 aVertexPosition;',\n            'attribute vec2 aTextureCoord;',\n            'attribute float aColor;',\n\n            'attribute vec2 aPositionCoord;',\n            'attribute vec2 aScale;',\n            'attribute float aRotation;',\n\n            'uniform mat3 projectionMatrix;',\n\n            'varying vec2 vTextureCoord;',\n            'varying float vColor;',\n\n            'void main(void){',\n            '   vec2 v = aVertexPosition;',\n\n            '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n            '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n            '   v = v + aPositionCoord;',\n\n            '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);',\n\n            '   vTextureCoord = aTextureCoord;',\n            '   vColor = aColor;',\n            '}'\n        ].join('\\n'),\n        // hello\n         [\n            'precision lowp float;',\n\n            'varying vec2 vTextureCoord;',\n            'varying float vColor;',\n\n            'uniform sampler2D uSampler;',\n            'uniform float uAlpha;',\n\n            'void main(void){',\n            '  vec4 color = texture2D(uSampler, vTextureCoord) * vColor * uAlpha;',\n            '  if (color.a == 0.0) discard;',\n            '  gl_FragColor = color;',\n            '}'\n        ].join('\\n'),\n        // custom uniforms\n        {\n            uAlpha:  { type: '1f', value: 1 }\n        },\n        // custom attributes\n        {\n            aPositionCoord: 0,\n           // aScale:         0,\n            aRotation:      0\n        }\n    );\n\n    // TEMP HACK\n\n}\n\nParticleShader.prototype = Object.create(TextureShader.prototype);\nParticleShader.prototype.constructor = ParticleShader;\n\nmodule.exports = ParticleShader;\n"]},"metadata":{},"sourceType":"script"}