{"ast":null,"code":"// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\nfunction parseMidi(data) {\n  var p = new Parser(data);\n  var headerChunk = p.readChunk();\n  if (headerChunk.id != 'MThd') throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\";\n  var header = parseHeader(headerChunk.data);\n  var tracks = [];\n\n  for (var i = 0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk();\n    if (trackChunk.id != 'MTrk') throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\";\n    var track = parseTrack(trackChunk.data);\n    tracks.push(track);\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  };\n}\n\nfunction parseHeader(data) {\n  var p = new Parser(data);\n  var format = p.readUInt16();\n  var numTracks = p.readUInt16();\n  var result = {\n    format: format,\n    numTracks: numTracks\n  };\n  var timeDivision = p.readUInt16();\n\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8);\n    result.ticksPerFrame = timeDivision & 0xFF;\n  } else {\n    result.ticksPerBeat = timeDivision;\n  }\n\n  return result;\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data);\n  var events = [];\n\n  while (!p.eof()) {\n    var event = readEvent();\n    events.push(event);\n  }\n\n  return events;\n  var lastEventTypeByte = null;\n\n  function readEvent() {\n    var event = {};\n    event.deltaTime = p.readVarInt();\n    var eventTypeByte = p.readUInt8();\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true;\n        var metatypeByte = p.readUInt8();\n        var length = p.readVarInt();\n\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber';\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\n            event.number = p.readUInt16();\n            return event;\n\n          case 0x01:\n            event.type = 'text';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x02:\n            event.type = 'copyrightNotice';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x03:\n            event.type = 'trackName';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x04:\n            event.type = 'instrumentName';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x05:\n            event.type = 'lyrics';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x06:\n            event.type = 'marker';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x07:\n            event.type = 'cuePoint';\n            event.text = p.readString(length);\n            return event;\n\n          case 0x20:\n            event.type = 'channelPrefix';\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length;\n            event.channel = p.readUInt8();\n            return event;\n\n          case 0x21:\n            event.type = 'portPrefix';\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length;\n            event.port = p.readUInt8();\n            return event;\n\n          case 0x2f:\n            event.type = 'endOfTrack';\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\n            return event;\n\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\n            event.microsecondsPerBeat = p.readUInt24();\n            return event;\n\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\n            var hourByte = p.readUInt8();\n            var FRAME_RATES = {\n              0x00: 24,\n              0x20: 25,\n              0x40: 29,\n              0x60: 30\n            };\n            event.frameRate = FRAME_RATES[hourByte & 0x60];\n            event.hour = hourByte & 0x1f;\n            event.min = p.readUInt8();\n            event.sec = p.readUInt8();\n            event.frame = p.readUInt8();\n            event.subFrame = p.readUInt8();\n            return event;\n\n          case 0x58:\n            event.type = 'timeSignature';\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\n            event.numerator = p.readUInt8();\n            event.denominator = 1 << p.readUInt8();\n            event.metronome = p.readUInt8();\n            event.thirtyseconds = p.readUInt8();\n            return event;\n\n          case 0x59:\n            event.type = 'keySignature';\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\n            event.key = p.readInt8();\n            event.scale = p.readUInt8();\n            return event;\n\n          case 0x7f:\n            event.type = 'sequencerSpecific';\n            event.data = p.readBytes(length);\n            return event;\n\n          default:\n            event.type = 'unknownMeta';\n            event.data = p.readBytes(length);\n            event.metatypeByte = metatypeByte;\n            return event;\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx';\n        var length = p.readVarInt();\n        event.data = p.readBytes(length);\n        return event;\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx';\n        var length = p.readVarInt();\n        event.data = p.readBytes(length);\n        return event;\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte;\n      }\n    } else {\n      // channel event\n      var param1;\n\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null) throw \"Running status byte encountered before status byte\";\n        param1 = eventTypeByte;\n        eventTypeByte = lastEventTypeByte;\n        event.running = true;\n      } else {\n        param1 = p.readUInt8();\n        lastEventTypeByte = eventTypeByte;\n      }\n\n      var eventType = eventTypeByte >> 4;\n      event.channel = eventTypeByte & 0x0f;\n\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff';\n          event.noteNumber = param1;\n          event.velocity = p.readUInt8();\n          return event;\n\n        case 0x09:\n          var velocity = p.readUInt8();\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn';\n          event.noteNumber = param1;\n          event.velocity = velocity;\n          if (velocity === 0) event.byte9 = true;\n          return event;\n\n        case 0x0a:\n          event.type = 'noteAftertouch';\n          event.noteNumber = param1;\n          event.amount = p.readUInt8();\n          return event;\n\n        case 0x0b:\n          event.type = 'controller';\n          event.controllerType = param1;\n          event.value = p.readUInt8();\n          return event;\n\n        case 0x0c:\n          event.type = 'programChange';\n          event.programNumber = param1;\n          return event;\n\n        case 0x0d:\n          event.type = 'channelAftertouch';\n          event.amount = param1;\n          return event;\n\n        case 0x0e:\n          event.type = 'pitchBend';\n          event.value = param1 + (p.readUInt8() << 7) - 0x2000;\n          return event;\n\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType;\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data;\n  this.bufferLen = this.buffer.length;\n  this.pos = 0;\n}\n\nParser.prototype.eof = function () {\n  return this.pos >= this.bufferLen;\n};\n\nParser.prototype.readUInt8 = function () {\n  var result = this.buffer[this.pos];\n  this.pos += 1;\n  return result;\n};\n\nParser.prototype.readInt8 = function () {\n  var u = this.readUInt8();\n  if (u & 0x80) return u - 0x100;else return u;\n};\n\nParser.prototype.readUInt16 = function () {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8();\n  return (b0 << 8) + b1;\n};\n\nParser.prototype.readInt16 = function () {\n  var u = this.readUInt16();\n  if (u & 0x8000) return u - 0x10000;else return u;\n};\n\nParser.prototype.readUInt24 = function () {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8();\n  return (b0 << 16) + (b1 << 8) + b2;\n};\n\nParser.prototype.readInt24 = function () {\n  var u = this.readUInt24();\n  if (u & 0x800000) return u - 0x1000000;else return u;\n};\n\nParser.prototype.readUInt32 = function () {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8();\n  return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n};\n\nParser.prototype.readBytes = function (len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len);\n  this.pos += len;\n  return bytes;\n};\n\nParser.prototype.readString = function (len) {\n  var bytes = this.readBytes(len);\n  return String.fromCharCode.apply(null, bytes);\n};\n\nParser.prototype.readVarInt = function () {\n  var result = 0;\n\n  while (!this.eof()) {\n    var b = this.readUInt8();\n\n    if (b & 0x80) {\n      result += b & 0x7f;\n      result <<= 7;\n    } else {\n      // b is last byte\n      return result + b;\n    }\n  } // premature eof\n\n\n  return result;\n};\n\nParser.prototype.readChunk = function () {\n  var id = this.readString(4);\n  var length = this.readUInt32();\n  var data = this.readBytes(length);\n  return {\n    id: id,\n    length: length,\n    data: data\n  };\n};\n\nmodule.exports = parseMidi;","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/midi-file/lib/midi-parser.js"],"names":["parseMidi","data","p","Parser","headerChunk","readChunk","id","header","parseHeader","tracks","i","eof","numTracks","trackChunk","track","parseTrack","push","format","readUInt16","result","timeDivision","framesPerSecond","ticksPerFrame","ticksPerBeat","events","event","readEvent","lastEventTypeByte","deltaTime","readVarInt","eventTypeByte","readUInt8","meta","metatypeByte","length","type","number","text","readString","channel","port","microsecondsPerBeat","readUInt24","hourByte","FRAME_RATES","frameRate","hour","min","sec","frame","subFrame","numerator","denominator","metronome","thirtyseconds","key","readInt8","scale","readBytes","param1","running","eventType","noteNumber","velocity","byte9","amount","controllerType","value","programNumber","buffer","bufferLen","pos","prototype","u","b0","b1","readInt16","b2","readInt24","readUInt32","b3","len","bytes","slice","String","fromCharCode","apply","b","module","exports"],"mappings":"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","sourcesContent":["// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n"]},"metadata":{},"sourceType":"script"}