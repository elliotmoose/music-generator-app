{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\n\nexport var Follower = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Follower, _ToneAudioNode);\n\n  var _super = _createSuper(Follower);\n\n  function Follower() {\n    var _this;\n\n    _classCallCheck(this, Follower);\n\n    _this = _super.call(this, optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    _this.name = \"Follower\";\n    var options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    _this._abs = _this.input = new Abs({\n      context: _this.context\n    });\n    _this._lowpass = _this.output = new OnePoleFilter({\n      context: _this.context,\n      frequency: 1 / _this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n\n    _this._abs.connect(_this._lowpass);\n\n    _this._smoothing = options.smoothing;\n    return _this;\n  }\n\n  _createClass(Follower, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Follower.prototype), \"dispose\", this).call(this);\n\n      this._abs.dispose();\n\n      this._lowpass.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"smoothing\",\n\n    /**\n     * The amount of time it takes a value change to arrive at the updated value.\n     */\n    get: function get() {\n      return this._smoothing;\n    },\n    set: function set(smoothing) {\n      this._smoothing = smoothing;\n      this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        smoothing: 0.05\n      });\n    }\n  }]);\n\n  return Follower;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/analysis/Follower.ts"],"names":[],"mappings":";;;;;;AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,aAAT,QAA8B,yBAA9B;AACA,SAAS,GAAT,QAAoB,kBAApB;AAMA;;;;;;;;;AASG;;AACH,WAAa,QAAb;AAAA;;AAAA;;AA2BC,sBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAA1B;AA1BQ,UAAA,IAAA,GAAe,UAAf;AA2BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAApC;AAEA,UAAK,IAAL,GAAY,MAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAR,CAAzB;AACA,UAAK,QAAL,GAAgB,MAAK,MAAL,GAAc,IAAI,aAAJ,CAAkB;AAC/C,MAAA,OAAO,EAAE,MAAK,OADiC;AAE/C,MAAA,SAAS,EAAE,IAAI,MAAK,SAAL,CAAe,OAAO,CAAC,SAAvB,CAFgC;AAG/C,MAAA,IAAI,EAAE;AAHyC,KAAlB,CAA9B;;AAKA,UAAK,IAAL,CAAU,OAAV,CAAkB,MAAK,QAAvB;;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,SAA1B;AAXD;AAYC;;AAvCF;AAAA;AAAA,8BA0DQ;AACN;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,QAAL,CAAc,OAAd;;AACA,aAAO,IAAP;AACA;AA/DF;AAAA;;AA+CC;;AAEG;AAjDJ,wBAkDc;AACZ,aAAO,KAAK,UAAZ;AACA,KApDF;AAAA,sBAqDe,SArDf,EAqDwB;AACtB,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,QAAL,CAAc,SAAd,GAA0B,IAAI,KAAK,SAAL,CAAe,KAAK,SAApB,CAA9B;AACA;AAxDF;AAAA;AAAA,kCAyCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,SAAS,EAAE;AADsC,OAA3C,CAAP;AAGA;AA7CF;;AAAA;AAAA,EAA8B,aAA9B","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n        this.name = \"Follower\";\n        const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n        this._abs = this.input = new Abs({ context: this.context });\n        this._lowpass = this.output = new OnePoleFilter({\n            context: this.context,\n            frequency: 1 / this.toSeconds(options.smoothing),\n            type: \"lowpass\"\n        });\n        this._abs.connect(this._lowpass);\n        this._smoothing = options.smoothing;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.05\n        });\n    }\n    /**\n     * The amount of time it takes a value change to arrive at the updated value.\n     */\n    get smoothing() {\n        return this._smoothing;\n    }\n    set smoothing(smoothing) {\n        this._smoothing = smoothing;\n        this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n    }\n    dispose() {\n        super.dispose();\n        this._abs.dispose();\n        this._lowpass.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Follower.js.map"]},"metadata":{},"sourceType":"module"}