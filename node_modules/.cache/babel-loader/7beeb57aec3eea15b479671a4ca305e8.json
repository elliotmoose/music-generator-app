{"ast":null,"code":"import * as Tone from 'tone';\nimport { Midi } from '@tonejs/midi';\nexport default class Player {\n  async setup() {\n    return new Promise((resolve, reject) => {\n      Tone.start();\n      this.sampler = new Tone.Sampler({\n        urls: {\n          \"C1\": \"C1.mp3\",\n          \"C2\": \"C2.mp3\",\n          \"C3\": \"C3.mp3\",\n          \"C4\": \"C4.mp3\",\n          \"D#4\": \"Ds4.mp3\",\n          \"F#4\": \"Fs4.mp3\",\n          \"A4\": \"A4.mp3\",\n          \"C5\": \"C5.mp3\",\n          \"C6\": \"C6.mp3\"\n        },\n        baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n        onload: () => {\n          console.log('Sampler Loaded!');\n          resolve();\n        }\n      }).toDestination();\n      this.sampler.sync();\n    });\n  }\n\n  async notesFromMidiFile(fileName) {\n    const midi = await Midi.fromUrl(\"/\" + fileName);\n    console.log(midi);\n    let notes = [];\n\n    for (let track of midi.tracks) {\n      for (let note of track.notes) {\n        //console.log('add note: ' + note.name)\n        notes.push(note);\n      }\n    }\n\n    return notes;\n  }\n\n  async playMidiFile(fileName) {\n    if (Tone.context.state == 'suspended') {\n      Tone.start();\n    }\n\n    let notes = await this.notesFromMidiFile(fileName);\n    console.log(notes[0].name);\n    console.log(notes[1].name);\n    console.log(notes[2].name);\n\n    for (let note of notes) {\n      this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity); // console.log('play note: ' + note.name)\n    }\n\n    Tone.Transport.start();\n  }\n\n  async stopMidiFile() {\n    console.log(\"cut music\");\n    Tone.Transport.stop(); // await this.sampler.dispose();\n  }\n\n  async pausePlayback() {\n    Tone.Transport.pause();\n  }\n\n  async playChord(notes) {\n    // console.log(notes); \n    this.sampler.triggerAttackRelease(notes, 2);\n  }\n\n}","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/src/Player.js"],"names":["Tone","Midi","Player","setup","Promise","resolve","reject","start","sampler","Sampler","urls","baseUrl","onload","console","log","toDestination","sync","notesFromMidiFile","fileName","midi","fromUrl","notes","track","tracks","note","push","playMidiFile","context","state","name","triggerAttackRelease","duration","time","velocity","Transport","stopMidiFile","stop","pausePlayback","pause","playChord"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,eAAe,MAAMC,MAAN,CAAa;AACxB,QAAMC,KAAN,GAAc;AACV,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCN,MAAAA,IAAI,CAACO,KAAL;AACA,WAAKC,OAAL,GAAe,IAAIR,IAAI,CAACS,OAAT,CAAiB;AAC5BC,QAAAA,IAAI,EAAE;AACF,gBAAM,QADJ;AAEF,gBAAM,QAFJ;AAGF,gBAAM,QAHJ;AAIF,gBAAM,QAJJ;AAKF,iBAAO,SALL;AAMF,iBAAO,SANL;AAOF,gBAAM,QAPJ;AAQF,gBAAM,QARJ;AASF,gBAAM;AATJ,SADsB;AAY5BC,QAAAA,OAAO,EAAE,4CAZmB;AAa5BC,QAAAA,MAAM,EAAE,MAAM;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAT,UAAAA,OAAO;AACV;AAhB2B,OAAjB,EAiBZU,aAjBY,EAAf;AAmBA,WAAKP,OAAL,CAAaQ,IAAb;AACH,KAtBM,CAAP;AAuBH;;AAED,QAAMC,iBAAN,CAAwBC,QAAxB,EAAkC;AAC9B,UAAMC,IAAI,GAAG,MAAMlB,IAAI,CAACmB,OAAL,CAAa,MAAMF,QAAnB,CAAnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACA,QAAIE,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,KAAT,IAAkBH,IAAI,CAACI,MAAvB,EAA+B;AAC3B,WAAK,IAAIC,IAAT,IAAiBF,KAAK,CAACD,KAAvB,EAA8B;AAC1B;AACAA,QAAAA,KAAK,CAACI,IAAN,CAAWD,IAAX;AACH;AACJ;;AAGD,WAAOH,KAAP;AACH;;AACD,QAAMK,YAAN,CAAmBR,QAAnB,EAA6B;AACzB,QAAGlB,IAAI,CAAC2B,OAAL,CAAaC,KAAb,IAAsB,WAAzB,EAAsC;AAClC5B,MAAAA,IAAI,CAACO,KAAL;AACH;;AAED,QAAIc,KAAK,GAAG,MAAM,KAAKJ,iBAAL,CAAuBC,QAAvB,CAAlB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,CAAD,CAAL,CAASQ,IAArB;;AACA,SAAK,IAAIL,IAAT,IAAiBH,KAAjB,EAAwB;AACpB,WAAKb,OAAL,CAAasB,oBAAb,CAAkC,CAACN,IAAI,CAACK,IAAN,CAAlC,EAA+CL,IAAI,CAACO,QAApD,EAA8DP,IAAI,CAACQ,IAAnE,EAAyER,IAAI,CAACS,QAA9E,EADoB,CAEpB;AACH;;AAEDjC,IAAAA,IAAI,CAACkC,SAAL,CAAe3B,KAAf;AACH;;AAED,QAAM4B,YAAN,GAAqB;AACjBtB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAd,IAAAA,IAAI,CAACkC,SAAL,CAAeE,IAAf,GAFiB,CAGjB;AACH;;AAED,QAAMC,aAAN,GAAsB;AAClBrC,IAAAA,IAAI,CAACkC,SAAL,CAAeI,KAAf;AACH;;AACD,QAAMC,SAAN,CAAgBlB,KAAhB,EAAsB;AAClB;AACA,SAAKb,OAAL,CAAasB,oBAAb,CAAkCT,KAAlC,EAAwC,CAAxC;AACH;;AAtEuB","sourcesContent":["import * as Tone from 'tone'\nimport { Midi } from '@tonejs/midi'\n\nexport default class Player {\n    async setup() {\n        return new Promise((resolve, reject) => {\n            Tone.start()\n            this.sampler = new Tone.Sampler({\n                urls: {\n                    \"C1\": \"C1.mp3\",\n                    \"C2\": \"C2.mp3\",\n                    \"C3\": \"C3.mp3\",\n                    \"C4\": \"C4.mp3\",\n                    \"D#4\": \"Ds4.mp3\",\n                    \"F#4\": \"Fs4.mp3\",\n                    \"A4\": \"A4.mp3\",\n                    \"C5\": \"C5.mp3\",\n                    \"C6\": \"C6.mp3\",\n                },\n                baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n                onload: () => {\n                    console.log('Sampler Loaded!');\n                    resolve();\n                }\n            }).toDestination();\n            \n            this.sampler.sync();\n        })\n    }\n\n    async notesFromMidiFile(fileName) {\n        const midi = await Midi.fromUrl(\"/\" + fileName);\n        console.log(midi)\n        let notes = []\n        for (let track of midi.tracks) {\n            for (let note of track.notes) {\n                //console.log('add note: ' + note.name)\n                notes.push(note);\n            }\n        }\n\n        \n        return notes\n    }\n    async playMidiFile(fileName) {\n        if(Tone.context.state == 'suspended') {\n            Tone.start()\n        }\n\n        let notes = await this.notesFromMidiFile(fileName)\n        console.log(notes[0].name)\n        console.log(notes[1].name)\n        console.log(notes[2].name)\n        for (let note of notes) {\n            this.sampler.triggerAttackRelease([note.name], note.duration, note.time, note.velocity);\n            // console.log('play note: ' + note.name)\n        }\n\n        Tone.Transport.start()\n    }\n\n    async stopMidiFile() {\n        console.log(\"cut music\")\n        Tone.Transport.stop()\n        // await this.sampler.dispose();\n    }\n    \n    async pausePlayback() {\n        Tone.Transport.pause()\n    }\n    async playChord(notes){\n        // console.log(notes); \n        this.sampler.triggerAttackRelease(notes,2);\n    }\n}"]},"metadata":{},"sourceType":"module"}