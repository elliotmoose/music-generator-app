{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction RGBSplitFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/rgbSplit.frag', 'utf8'), // custom uniforms\n  {\n    red: {\n      type: 'v2',\n      value: {\n        x: 20,\n        y: 20\n      }\n    },\n    green: {\n      type: 'v2',\n      value: {\n        x: -20,\n        y: 20\n      }\n    },\n    blue: {\n      type: 'v2',\n      value: {\n        x: 20,\n        y: -20\n      }\n    },\n    dimensions: {\n      type: '4fv',\n      value: [0, 0, 0, 0]\n    }\n  });\n}\n\nRGBSplitFilter.prototype = Object.create(core.AbstractFilter.prototype);\nRGBSplitFilter.prototype.constructor = RGBSplitFilter;\nmodule.exports = RGBSplitFilter;\nObject.defineProperties(RGBSplitFilter.prototype, {\n  /**\n   * Red channel offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  red: {\n    get: function () {\n      return this.uniforms.red.value;\n    },\n    set: function (value) {\n      this.uniforms.red.value = value;\n    }\n  },\n\n  /**\n   * Green channel offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  green: {\n    get: function () {\n      return this.uniforms.green.value;\n    },\n    set: function (value) {\n      this.uniforms.green.value = value;\n    }\n  },\n\n  /**\n   * Blue offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  blue: {\n    get: function () {\n      return this.uniforms.blue.value;\n    },\n    set: function (value) {\n      this.uniforms.blue.value = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/rgb/RGBSplitFilter.js"],"names":["core","require","fs","RGBSplitFilter","AbstractFilter","call","readFileSync","__dirname","red","type","value","x","y","green","blue","dimensions","prototype","Object","create","constructor","module","exports","defineProperties","get","uniforms","set"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,GACA;AACIH,EAAAA,IAAI,CAACI,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EACI;AACA,MAFJ,EAGI;AACAH,EAAAA,EAAE,CAACI,YAAH,CAAgBC,SAAS,GAAG,gBAA5B,EAA8C,MAA9C,CAJJ,EAKI;AACA;AACIC,IAAAA,GAAG,EAAS;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE;AAAZ;AAArB,KADhB;AAEIC,IAAAA,KAAK,EAAO;AAAEJ,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAC,EAAN;AAAUC,QAAAA,CAAC,EAAE;AAAb;AAArB,KAFhB;AAGIE,IAAAA,IAAI,EAAQ;AAAEL,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,CAAC;AAAb;AAArB,KAHhB;AAIIG,IAAAA,UAAU,EAAE;AAAEN,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAtB;AAJhB,GANJ;AAaH;;AAEDP,cAAc,CAACa,SAAf,GAA2BC,MAAM,CAACC,MAAP,CAAclB,IAAI,CAACI,cAAL,CAAoBY,SAAlC,CAA3B;AACAb,cAAc,CAACa,SAAf,CAAyBG,WAAzB,GAAuChB,cAAvC;AACAiB,MAAM,CAACC,OAAP,GAAiBlB,cAAjB;AAEAc,MAAM,CAACK,gBAAP,CAAwBnB,cAAc,CAACa,SAAvC,EAAkD;AAC9C;AACJ;AACA;AACA;AACA;AACA;AACIR,EAAAA,GAAG,EAAE;AACDe,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAchB,GAAd,CAAkBE,KAAzB;AACH,KAJA;AAKDe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAchB,GAAd,CAAkBE,KAAlB,GAA0BA,KAA1B;AACH;AARA,GAPyC;;AAkB9C;AACJ;AACA;AACA;AACA;AACA;AACIG,EAAAA,KAAK,EAAE;AACHU,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAcX,KAAd,CAAoBH,KAA3B;AACH,KAJE;AAKHe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAcX,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACH;AARE,GAxBuC;;AAmC9C;AACJ;AACA;AACA;AACA;AACA;AACII,EAAAA,IAAI,EAAE;AACFS,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAcV,IAAd,CAAmBJ,KAA1B;AACH,KAJC;AAKFe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAcV,IAAd,CAAmBJ,KAAnB,GAA2BA,KAA3B;AACH;AARC;AAzCwC,CAAlD","sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction RGBSplitFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/rgbSplit.frag', 'utf8'),\n        // custom uniforms\n        {\n            red:        { type: 'v2', value: { x: 20, y: 20 } },\n            green:      { type: 'v2', value: { x: -20, y: 20 } },\n            blue:       { type: 'v2', value: { x: 20, y: -20 } },\n            dimensions: { type: '4fv', value: [0, 0, 0, 0] }\n        }\n    );\n}\n\nRGBSplitFilter.prototype = Object.create(core.AbstractFilter.prototype);\nRGBSplitFilter.prototype.constructor = RGBSplitFilter;\nmodule.exports = RGBSplitFilter;\n\nObject.defineProperties(RGBSplitFilter.prototype, {\n    /**\n     * Red channel offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    red: {\n        get: function ()\n        {\n            return this.uniforms.red.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.red.value = value;\n        }\n    },\n\n    /**\n     * Green channel offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    green: {\n        get: function ()\n        {\n            return this.uniforms.green.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.green.value = value;\n        }\n    },\n\n    /**\n     * Blue offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    blue: {\n        get: function ()\n        {\n            return this.uniforms.blue.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.blue.value = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}