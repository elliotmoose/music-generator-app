{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nexport var ToneEvent = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(ToneEvent, _ToneWithContext);\n\n  var _super = _createSuper(ToneEvent);\n\n  function ToneEvent() {\n    var _this;\n\n    _classCallCheck(this, ToneEvent);\n\n    _this = _super.call(this, optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    _this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    _this._startOffset = 0;\n    var options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    _this._loop = options.loop;\n    _this.callback = options.callback;\n    _this.value = options.value;\n    _this._loopStart = _this.toTicks(options.loopStart);\n    _this._loopEnd = _this.toTicks(options.loopEnd);\n    _this._playbackRate = options.playbackRate;\n    _this._probability = options.probability;\n    _this._humanize = options.humanize;\n    _this.mute = options.mute;\n    _this._playbackRate = options.playbackRate;\n    _this._state.increasing = true; // schedule the events for the first time\n\n    _this._rescheduleEvents();\n\n    return _this;\n  }\n\n  _createClass(ToneEvent, [{\n    key: \"_rescheduleEvents\",\n\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    value: function _rescheduleEvents() {\n      var _this2 = this;\n\n      var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n      // if no argument is given, schedules all of the events\n      this._state.forEachFrom(after, function (event) {\n        var duration;\n\n        if (event.state === \"started\") {\n          if (event.id !== -1) {\n            _this2.context.transport.clear(event.id);\n          }\n\n          var startTick = event.time + Math.round(_this2.startOffset / _this2._playbackRate);\n\n          if (_this2._loop === true || isNumber(_this2._loop) && _this2._loop > 1) {\n            duration = Infinity;\n\n            if (isNumber(_this2._loop)) {\n              duration = _this2._loop * _this2._getLoopDuration();\n            }\n\n            var nextEvent = _this2._state.getAfter(startTick);\n\n            if (nextEvent !== null) {\n              duration = Math.min(duration, nextEvent.time - startTick);\n            }\n\n            if (duration !== Infinity) {\n              // schedule a stop since it's finite duration\n              _this2._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n                id: -1\n              });\n\n              duration = new TicksClass(_this2.context, duration);\n            }\n\n            var interval = new TicksClass(_this2.context, _this2._getLoopDuration());\n            event.id = _this2.context.transport.scheduleRepeat(_this2._tick.bind(_this2), interval, new TicksClass(_this2.context, startTick), duration);\n          } else {\n            event.id = _this2.context.transport.schedule(_this2._tick.bind(_this2), new TicksClass(_this2.context, startTick));\n          }\n        }\n      });\n    }\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n\n  }, {\n    key: \"start\",\n\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n    value: function start(time) {\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) === \"stopped\") {\n        this._state.add({\n          id: -1,\n          state: \"started\",\n          time: ticks\n        });\n\n        this._rescheduleEvents(ticks);\n      }\n\n      return this;\n    }\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.cancel(time);\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) === \"started\") {\n        this._state.setStateAtTime(\"stopped\", ticks, {\n          id: -1\n        });\n\n        var previousEvent = this._state.getBefore(ticks);\n\n        var reschedulTime = ticks;\n\n        if (previousEvent !== null) {\n          reschedulTime = previousEvent.time;\n        }\n\n        this._rescheduleEvents(reschedulTime);\n      }\n\n      return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(time) {\n      var _this3 = this;\n\n      time = defaultArg(time, -Infinity);\n      var ticks = this.toTicks(time);\n\n      this._state.forEachFrom(ticks, function (event) {\n        _this3.context.transport.clear(event.id);\n      });\n\n      this._state.cancel(ticks);\n\n      return this;\n    }\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var ticks = this.context.transport.getTicksAtTime(time);\n\n      if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n        if (this.probability < 1 && Math.random() > this.probability) {\n          return;\n        }\n\n        if (this.humanize) {\n          var variation = 0.02;\n\n          if (!isBoolean(this.humanize)) {\n            variation = this.toSeconds(this.humanize);\n          }\n\n          time += (Math.random() * 2 - 1) * variation;\n        }\n\n        this.callback(time, this.value);\n      }\n    }\n    /**\n     * Get the duration of the loop.\n     */\n\n  }, {\n    key: \"_getLoopDuration\",\n    value: function _getLoopDuration() {\n      return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    }\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneEvent.prototype), \"dispose\", this).call(this);\n\n      this.cancel();\n\n      this._state.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state.getValueAtTime(this.context.transport.ticks);\n    }\n    /**\n     * The start from the scheduled start time.\n     */\n\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._startOffset;\n    },\n    set: function set(offset) {\n      this._startOffset = offset;\n    }\n    /**\n     * The probability of the notes being triggered.\n     */\n\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._probability;\n    },\n    set: function set(prob) {\n      this._probability = prob;\n    }\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * const event = new Tone.ToneEvent();\n     * event.humanize = true;\n     */\n\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._humanize;\n    },\n    set: function set(variation) {\n      this._humanize = variation;\n    }\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      this._loop = loop;\n\n      this._rescheduleEvents();\n    }\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * const note = new Tone.ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n\n      this._rescheduleEvents();\n    }\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = this.toTicks(loopEnd);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The time when the loop should start.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function set(loopStart) {\n      this._loopStart = this.toTicks(loopStart);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n\n  }, {\n    key: \"progress\",\n    get: function get() {\n      if (this._loop) {\n        var ticks = this.context.transport.ticks;\n\n        var lastEvent = this._state.get(ticks);\n\n        if (lastEvent !== null && lastEvent.state === \"started\") {\n          var loopDuration = this._getLoopDuration();\n\n          var progress = (ticks - lastEvent.time) % loopDuration;\n          return progress / loopDuration;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneWithContext.getDefaults(), {\n        callback: noOp,\n        humanize: false,\n        loop: false,\n        loopEnd: \"1m\",\n        loopStart: 0,\n        mute: false,\n        playbackRate: 1,\n        probability: 1,\n        value: null\n      });\n    }\n  }]);\n\n  return ToneEvent;\n}(ToneWithContext);","map":{"version":3,"sources":["../../../Tone/event/ToneEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent extends ToneWithContext {\n    constructor() {\n        super(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n        this.name = \"ToneEvent\";\n        /**\n         * Tracks the scheduled events\n         */\n        this._state = new StateTimeline(\"stopped\");\n        /**\n         * A delay time from when the event is scheduled to start\n         */\n        this._startOffset = 0;\n        const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n        this._loop = options.loop;\n        this.callback = options.callback;\n        this.value = options.value;\n        this._loopStart = this.toTicks(options.loopStart);\n        this._loopEnd = this.toTicks(options.loopEnd);\n        this._playbackRate = options.playbackRate;\n        this._probability = options.probability;\n        this._humanize = options.humanize;\n        this.mute = options.mute;\n        this._playbackRate = options.playbackRate;\n        this._state.increasing = true;\n        // schedule the events for the first time\n        this._rescheduleEvents();\n    }\n    static getDefaults() {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            callback: noOp,\n            humanize: false,\n            loop: false,\n            loopEnd: \"1m\",\n            loopStart: 0,\n            mute: false,\n            playbackRate: 1,\n            probability: 1,\n            value: null,\n        });\n    }\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    _rescheduleEvents(after = -1) {\n        // if no argument is given, schedules all of the events\n        this._state.forEachFrom(after, event => {\n            let duration;\n            if (event.state === \"started\") {\n                if (event.id !== -1) {\n                    this.context.transport.clear(event.id);\n                }\n                const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n                if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n                    duration = Infinity;\n                    if (isNumber(this._loop)) {\n                        duration = (this._loop) * this._getLoopDuration();\n                    }\n                    const nextEvent = this._state.getAfter(startTick);\n                    if (nextEvent !== null) {\n                        duration = Math.min(duration, nextEvent.time - startTick);\n                    }\n                    if (duration !== Infinity) {\n                        // schedule a stop since it's finite duration\n                        this._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n                        duration = new TicksClass(this.context, duration);\n                    }\n                    const interval = new TicksClass(this.context, this._getLoopDuration());\n                    event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n                }\n                else {\n                    event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n                }\n            }\n        });\n    }\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n    get state() {\n        return this._state.getValueAtTime(this.context.transport.ticks);\n    }\n    /**\n     * The start from the scheduled start time.\n     */\n    get startOffset() {\n        return this._startOffset;\n    }\n    set startOffset(offset) {\n        this._startOffset = offset;\n    }\n    /**\n     * The probability of the notes being triggered.\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(prob) {\n        this._probability = prob;\n    }\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * const event = new Tone.ToneEvent();\n     * event.humanize = true;\n     */\n    get humanize() {\n        return this._humanize;\n    }\n    set humanize(variation) {\n        this._humanize = variation;\n    }\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n    start(time) {\n        const ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"stopped\") {\n            this._state.add({\n                id: -1,\n                state: \"started\",\n                time: ticks,\n            });\n            this._rescheduleEvents(ticks);\n        }\n        return this;\n    }\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n    stop(time) {\n        this.cancel(time);\n        const ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"started\") {\n            this._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n            const previousEvent = this._state.getBefore(ticks);\n            let reschedulTime = ticks;\n            if (previousEvent !== null) {\n                reschedulTime = previousEvent.time;\n            }\n            this._rescheduleEvents(reschedulTime);\n        }\n        return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n    cancel(time) {\n        time = defaultArg(time, -Infinity);\n        const ticks = this.toTicks(time);\n        this._state.forEachFrom(ticks, event => {\n            this.context.transport.clear(event.id);\n        });\n        this._state.cancel(ticks);\n        return this;\n    }\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n    _tick(time) {\n        const ticks = this.context.transport.getTicksAtTime(time);\n        if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n            if (this.probability < 1 && Math.random() > this.probability) {\n                return;\n            }\n            if (this.humanize) {\n                let variation = 0.02;\n                if (!isBoolean(this.humanize)) {\n                    variation = this.toSeconds(this.humanize);\n                }\n                time += (Math.random() * 2 - 1) * variation;\n            }\n            this.callback(time, this.value);\n        }\n    }\n    /**\n     * Get the duration of the loop.\n     */\n    _getLoopDuration() {\n        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    }\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        this._loop = loop;\n        this._rescheduleEvents();\n    }\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * const note = new Tone.ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        this._rescheduleEvents();\n    }\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n    get loopEnd() {\n        return new TicksClass(this.context, this._loopEnd).toSeconds();\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = this.toTicks(loopEnd);\n        if (this._loop) {\n            this._rescheduleEvents();\n        }\n    }\n    /**\n     * The time when the loop should start.\n     */\n    get loopStart() {\n        return new TicksClass(this.context, this._loopStart).toSeconds();\n    }\n    set loopStart(loopStart) {\n        this._loopStart = this.toTicks(loopStart);\n        if (this._loop) {\n            this._rescheduleEvents();\n        }\n    }\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n    get progress() {\n        if (this._loop) {\n            const ticks = this.context.transport.ticks;\n            const lastEvent = this._state.get(ticks);\n            if (lastEvent !== null && lastEvent.state === \"started\") {\n                const loopDuration = this._getLoopDuration();\n                const progress = (ticks - lastEvent.time) % loopDuration;\n                return progress / loopDuration;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    dispose() {\n        super.dispose();\n        this.cancel();\n        this._state.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneEvent.js.map"]},"metadata":{},"sourceType":"module"}