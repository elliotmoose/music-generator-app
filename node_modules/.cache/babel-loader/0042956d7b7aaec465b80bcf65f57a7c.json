{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nexport var StereoEffect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(StereoEffect, _ToneAudioNode);\n\n  var _super = _createSuper(StereoEffect);\n\n  function StereoEffect(options) {\n    var _this;\n\n    _classCallCheck(this, StereoEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"StereoEffect\";\n    _this.input = new Gain({\n      context: _this.context\n    }); // force mono sources to be stereo\n\n    _this.input.channelCount = 2;\n    _this.input.channelCountMode = \"explicit\";\n    _this._dryWet = _this.output = new CrossFade({\n      context: _this.context,\n      fade: options.wet\n    });\n    _this.wet = _this._dryWet.fade;\n    _this._split = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._merge = new Merge({\n      context: _this.context,\n      channels: 2\n    }); // connections\n\n    _this.input.connect(_this._split); // dry wet connections\n\n\n    _this.input.connect(_this._dryWet.a);\n\n    _this._merge.connect(_this._dryWet.b);\n\n    readOnly(_assertThisInitialized(_this), [\"wet\"]);\n    return _this;\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  _createClass(StereoEffect, [{\n    key: \"connectEffectLeft\",\n    value: function connectEffectLeft() {\n      var _ref;\n\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 0, 0);\n\n      connectSeries.apply(void 0, arguments);\n      connect((_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]), this._merge, 0, 0);\n    }\n    /**\n     * Connect the right part of the effect\n     */\n\n  }, {\n    key: \"connectEffectRight\",\n    value: function connectEffectRight() {\n      var _ref2;\n\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 1, 0);\n\n      connectSeries.apply(void 0, arguments);\n      connect((_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]), this._merge, 0, 1);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoEffect.prototype), \"dispose\", this).call(this);\n\n      this._dryWet.dispose();\n\n      this._split.dispose();\n\n      this._merge.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n\n  return StereoEffect;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../Tone/effect/StereoEffect.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,OAAT,EAAkB,aAAlB,EAA6C,aAA7C,QAAkE,+BAAlE;AACA,SAAS,SAAT,QAA0B,gCAA1B;AAEA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAIA;;AAEG;;AACH,WAAa,YAAb;AAAA;;AAAA;;AA4BC,wBAAY,OAAZ,EAAwC;AAAA;;AAAA;;AAEvC,8BAAM,OAAN;AA5BQ,UAAA,IAAA,GAAe,cAAf;AA8BR,UAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAb,CAJuC,CAKvC;;AACA,UAAK,KAAL,CAAW,YAAX,GAA0B,CAA1B;AACA,UAAK,KAAL,CAAW,gBAAX,GAA8B,UAA9B;AAEA,UAAK,OAAL,GAAe,MAAK,MAAL,GAAc,IAAI,SAAJ,CAAc;AAC1C,MAAA,OAAO,EAAE,MAAK,OAD4B;AAE1C,MAAA,IAAI,EAAE,OAAO,CAAC;AAF4B,KAAd,CAA7B;AAIA,UAAK,GAAL,GAAW,MAAK,OAAL,CAAa,IAAxB;AACA,UAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,MAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAd;AACA,UAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,MAAK,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAd,CAfuC,CAiBvC;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,MAAxB,EAlBuC,CAmBvC;;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,OAAL,CAAa,CAAhC;;AACA,UAAK,MAAL,CAAY,OAAZ,CAAoB,MAAK,OAAL,CAAa,CAAjC;;AACA,IAAA,QAAQ,gCAAO,CAAC,KAAD,CAAP,CAAR;AAtBuC;AAuBvC;AAED;;AAEG;;;AAvDJ;AAAA;AAAA,wCAwDmD;AAAA;;AACjD,WAAK,MAAL,CAAY,OAAZ,mDAA8B,CAA9B,EAAiC,CAAjC;;AACA,MAAA,aAAa,MAAb;AACA,MAAA,OAAO,SAAO,UAAM,MAAN,GAAa,CAApB,uEAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;AAED;;AAEG;;AAhEJ;AAAA;AAAA,yCAiEoD;AAAA;;AAClD,WAAK,MAAL,CAAY,OAAZ,mDAA8B,CAA9B,EAAiC,CAAjC;;AACA,MAAA,aAAa,MAAb;AACA,MAAA,OAAO,UAAO,UAAM,MAAN,GAAa,CAApB,0EAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;AArEF;AAAA;AAAA,8BA6EQ;AACN;;AACA,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,aAAO,IAAP;AACA;AAnFF;AAAA;AAAA,kCAuEmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,GAAG,EAAE;AAD4C,OAA3C,CAAP;AAGA;AA3EF;;AAAA;AAAA,EAAuE,aAAvE","sourceRoot":"","sourcesContent":["import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = \"StereoEffect\";\n        this.input = new Gain({ context: this.context });\n        // force mono sources to be stereo\n        this.input.channelCount = 2;\n        this.input.channelCountMode = \"explicit\";\n        this._dryWet = this.output = new CrossFade({\n            context: this.context,\n            fade: options.wet\n        });\n        this.wet = this._dryWet.fade;\n        this._split = new Split({ context: this.context, channels: 2 });\n        this._merge = new Merge({ context: this.context, channels: 2 });\n        // connections\n        this.input.connect(this._split);\n        // dry wet connections\n        this.input.connect(this._dryWet.a);\n        this._merge.connect(this._dryWet.b);\n        readOnly(this, [\"wet\"]);\n    }\n    /**\n     * Connect the left part of the effect\n     */\n    connectEffectLeft(...nodes) {\n        this._split.connect(nodes[0], 0, 0);\n        connectSeries(...nodes);\n        connect(nodes[nodes.length - 1], this._merge, 0, 0);\n    }\n    /**\n     * Connect the right part of the effect\n     */\n    connectEffectRight(...nodes) {\n        this._split.connect(nodes[0], 1, 0);\n        connectSeries(...nodes);\n        connect(nodes[nodes.length - 1], this._merge, 0, 1);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            wet: 1,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._dryWet.dispose();\n        this._split.dispose();\n        this._merge.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=StereoEffect.js.map"]},"metadata":{},"sourceType":"module"}