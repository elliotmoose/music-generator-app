{"ast":null,"code":"/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nvar workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\n\nexport function addToWorklet(classOrFunction) {\n  workletContext.add(classOrFunction);\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\n\nexport function registerProcessor(name, classDesc) {\n  var processor =\n  /* javascript */\n  \"registerProcessor(\\\"\".concat(name, \"\\\", \").concat(classDesc, \")\");\n  workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\n\nexport function getWorkletGlobalScope() {\n  return Array.from(workletContext).join(\"\\n\");\n}","map":{"version":3,"sources":["../../../../Tone/core/worklet/WorkletGlobalScope.ts"],"names":[],"mappings":"AAAA;;AAEG;AACH,IAAM,cAAc,GAAgB,IAAI,GAAJ,EAApC;AAEA;;AAEG;;AACH,OAAM,SAAU,YAAV,CAAuB,eAAvB,EAA8C;AACnD,EAAA,cAAc,CAAC,GAAf,CAAmB,eAAnB;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAA0C,SAA1C,EAA2D;AAChE,MAAM,SAAS;AAAG;AAAH,gCAAyC,IAAzC,iBAAmD,SAAnD,MAAf;AACA,EAAA,cAAc,CAAC,GAAf,CAAmB,SAAnB;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,qBAAV,GAA+B;AACpC,SAAO,KAAK,CAAC,IAAN,CAAW,cAAX,EAA2B,IAA3B,CAAgC,IAAhC,CAAP;AACA","sourceRoot":"","sourcesContent":["/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction) {\n    workletContext.add(classOrFunction);\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name, classDesc) {\n    const processor = /* javascript */ `registerProcessor(\"${name}\", ${classDesc})`;\n    workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope() {\n    return Array.from(workletContext).join(\"\\n\");\n}\n//# sourceMappingURL=WorkletGlobalScope.js.map"]},"metadata":{},"sourceType":"module"}