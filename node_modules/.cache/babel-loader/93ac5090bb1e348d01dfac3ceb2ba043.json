{"ast":null,"code":"/**\n * @file        Main export of the PIXI core library\n * @author      Mat Groves <mat@goodboydigital.com>\n * @copyright   2013-2015 GoodBoyDigital\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @namespace PIXI\n */\n// export core and const. We assign core to const so that the non-reference types in const remain in-tact\nvar core = module.exports = Object.assign(require('./const'), require('./math'), {\n  // utils\n  utils: require('./utils'),\n  ticker: require('./ticker'),\n  // display\n  DisplayObject: require('./display/DisplayObject'),\n  Container: require('./display/Container'),\n  // sprites\n  Sprite: require('./sprites/Sprite'),\n  ParticleContainer: require('./particles/ParticleContainer'),\n  SpriteRenderer: require('./sprites/webgl/SpriteRenderer'),\n  ParticleRenderer: require('./particles/webgl/ParticleRenderer'),\n  // text\n  Text: require('./text/Text'),\n  // primitives\n  Graphics: require('./graphics/Graphics'),\n  GraphicsData: require('./graphics/GraphicsData'),\n  GraphicsRenderer: require('./graphics/webgl/GraphicsRenderer'),\n  // textures\n  Texture: require('./textures/Texture'),\n  BaseTexture: require('./textures/BaseTexture'),\n  RenderTexture: require('./textures/RenderTexture'),\n  VideoBaseTexture: require('./textures/VideoBaseTexture'),\n  TextureUvs: require('./textures/TextureUvs'),\n  // renderers - canvas\n  CanvasRenderer: require('./renderers/canvas/CanvasRenderer'),\n  CanvasGraphics: require('./renderers/canvas/utils/CanvasGraphics'),\n  CanvasBuffer: require('./renderers/canvas/utils/CanvasBuffer'),\n  // renderers - webgl\n  WebGLRenderer: require('./renderers/webgl/WebGLRenderer'),\n  ShaderManager: require('./renderers/webgl/managers/ShaderManager'),\n  Shader: require('./renderers/webgl/shaders/Shader'),\n  ObjectRenderer: require('./renderers/webgl/utils/ObjectRenderer'),\n  RenderTarget: require('./renderers/webgl/utils/RenderTarget'),\n  // filters - webgl\n  AbstractFilter: require('./renderers/webgl/filters/AbstractFilter'),\n  FXAAFilter: require('./renderers/webgl/filters/FXAAFilter'),\n  SpriteMaskFilter: require('./renderers/webgl/filters/SpriteMaskFilter'),\n\n  /**\n   * This helper function will automatically detect which renderer you should be using.\n   * WebGL is the preferred renderer as it is a lot faster. If webGL is not supported by\n   * the browser then this function will return a canvas renderer\n   *\n   * @memberof PIXI\n   * @param width=800 {number} the width of the renderers view\n   * @param height=600 {number} the height of the renderers view\n   * @param [options] {object} The optional renderer parameters\n   * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n   * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n   * @param [options.antialias=false] {boolean} sets antialias (only applicable in chrome at the moment)\n   * @param [options.preserveDrawingBuffer=false] {boolean} enables drawing buffer preservation, enable this if you\n   *      need to call toDataUrl on the webgl context\n   * @param [options.resolution=1] {number} the resolution of the renderer, retina would be 2\n   * @param [noWebGL=false] {boolean} prevents selection of WebGL renderer, even if such is present\n   *\n   * @return {WebGLRenderer|CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n   */\n  autoDetectRenderer: function (width, height, options, noWebGL) {\n    width = width || 800;\n    height = height || 600;\n\n    if (!noWebGL && core.utils.isWebGLSupported()) {\n      return new core.WebGLRenderer(width, height, options);\n    }\n\n    return new core.CanvasRenderer(width, height, options);\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/index.js"],"names":["core","module","exports","Object","assign","require","utils","ticker","DisplayObject","Container","Sprite","ParticleContainer","SpriteRenderer","ParticleRenderer","Text","Graphics","GraphicsData","GraphicsRenderer","Texture","BaseTexture","RenderTexture","VideoBaseTexture","TextureUvs","CanvasRenderer","CanvasGraphics","CanvasBuffer","WebGLRenderer","ShaderManager","Shader","ObjectRenderer","RenderTarget","AbstractFilter","FXAAFilter","SpriteMaskFilter","autoDetectRenderer","width","height","options","noWebGL","isWebGLSupported"],"mappings":"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","sourcesContent":["/**\n * @file        Main export of the PIXI core library\n * @author      Mat Groves <mat@goodboydigital.com>\n * @copyright   2013-2015 GoodBoyDigital\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @namespace PIXI\n */\n// export core and const. We assign core to const so that the non-reference types in const remain in-tact\nvar core = module.exports = Object.assign(require('./const'), require('./math'), {\n    // utils\n    utils: require('./utils'),\n    ticker: require('./ticker'),\n\n    // display\n    DisplayObject:          require('./display/DisplayObject'),\n    Container:              require('./display/Container'),\n\n    // sprites\n    Sprite:                 require('./sprites/Sprite'),\n    ParticleContainer:      require('./particles/ParticleContainer'),\n    SpriteRenderer:         require('./sprites/webgl/SpriteRenderer'),\n    ParticleRenderer:       require('./particles/webgl/ParticleRenderer'),\n\n    // text\n    Text:                   require('./text/Text'),\n\n    // primitives\n    Graphics:               require('./graphics/Graphics'),\n    GraphicsData:           require('./graphics/GraphicsData'),\n    GraphicsRenderer:       require('./graphics/webgl/GraphicsRenderer'),\n\n    // textures\n    Texture:                require('./textures/Texture'),\n    BaseTexture:            require('./textures/BaseTexture'),\n    RenderTexture:          require('./textures/RenderTexture'),\n    VideoBaseTexture:       require('./textures/VideoBaseTexture'),\n    TextureUvs:             require('./textures/TextureUvs'),\n\n    // renderers - canvas\n    CanvasRenderer:         require('./renderers/canvas/CanvasRenderer'),\n    CanvasGraphics:         require('./renderers/canvas/utils/CanvasGraphics'),\n    CanvasBuffer:           require('./renderers/canvas/utils/CanvasBuffer'),\n\n    // renderers - webgl\n    WebGLRenderer:          require('./renderers/webgl/WebGLRenderer'),\n    ShaderManager:          require('./renderers/webgl/managers/ShaderManager'),\n    Shader:                 require('./renderers/webgl/shaders/Shader'),\n    ObjectRenderer:         require('./renderers/webgl/utils/ObjectRenderer'),\n    RenderTarget:           require('./renderers/webgl/utils/RenderTarget'),\n\n    // filters - webgl\n    AbstractFilter:         require('./renderers/webgl/filters/AbstractFilter'),\n    FXAAFilter:             require('./renderers/webgl/filters/FXAAFilter'),\n    SpriteMaskFilter:       require('./renderers/webgl/filters/SpriteMaskFilter'),\n\n    /**\n     * This helper function will automatically detect which renderer you should be using.\n     * WebGL is the preferred renderer as it is a lot faster. If webGL is not supported by\n     * the browser then this function will return a canvas renderer\n     *\n     * @memberof PIXI\n     * @param width=800 {number} the width of the renderers view\n     * @param height=600 {number} the height of the renderers view\n     * @param [options] {object} The optional renderer parameters\n     * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional\n     * @param [options.transparent=false] {boolean} If the render view is transparent, default false\n     * @param [options.antialias=false] {boolean} sets antialias (only applicable in chrome at the moment)\n     * @param [options.preserveDrawingBuffer=false] {boolean} enables drawing buffer preservation, enable this if you\n     *      need to call toDataUrl on the webgl context\n     * @param [options.resolution=1] {number} the resolution of the renderer, retina would be 2\n     * @param [noWebGL=false] {boolean} prevents selection of WebGL renderer, even if such is present\n     *\n     * @return {WebGLRenderer|CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n     */\n    autoDetectRenderer: function (width, height, options, noWebGL)\n    {\n        width = width || 800;\n        height = height || 600;\n\n        if (!noWebGL && core.utils.isWebGLSupported())\n        {\n            return new core.WebGLRenderer(width, height, options);\n        }\n\n        return new core.CanvasRenderer(width, height, options);\n    }\n});\n"]},"metadata":{},"sourceType":"script"}