{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/thebe/Desktop/music-generator-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Player from './Player';\nimport * as Tone from 'tone';\nimport PlayBar from './components/Playbar';\nimport data from './public/data';\nlet interval;\n\nfunction App() {\n  _s();\n\n  let SampleChords = data.sampleChords;\n  const [play, setPlay] = useState(false);\n  const [player, setPlayer] = useState(new Player());\n  const [playerTwo, setPlayerTwo] = useState(new Player());\n  const [notes, setNotes] = useState([]);\n  const [playheadTime, setPlayheadTime] = useState(0);\n  const [presentChords, setPresetChords] = useState([]);\n  useEffect(() => {\n    (async () => {\n      await player.setup();\n      setPlayer(player);\n      await playerTwo.setup();\n      setPlayerTwo(playerTwo);\n      setPresetChords(SampleChords); // console.log(\"set up\")\n\n      if (!interval) {\n        setInterval(() => {\n          setPlayheadTime(Tone.context.currentTime * DURATION_FACTOR);\n        }, 10);\n      }\n    })();\n  }, []); //on component mount\n\n  useEffect(() => {\n    if (play) {\n      (async () => {\n        // await player.setup();\n        // setPlayer(player);\n        setNotes(await player.notesFromMidiFile('ABeautifulFriendship.mid'));\n        await player.playMidiFile('ABeautifulFriendship.mid');\n      })();\n\n      setPlay(false);\n    }\n  }, [play, player]);\n  const MAX_MIDI = 88;\n  const NOTE_HEIGHT = 8;\n  const DURATION_FACTOR = 100;\n\n  async function onChordButton(chord) {\n    // console.log(chord)\n    await playerTwo.playChord(chord.array);\n  }\n\n  async function onChordKey(e, chord) {\n    console.log(e.key);\n\n    if (e.key === e.target.id) {\n      console.log(e.target.name);\n      await playerTwo.playChord(chord.array);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"20%\",\n          textTransform: \"uppercase\"\n        },\n        children: [\"2.5K only\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 73\n        }, this), \" music generation \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 100\n        }, this), \" project\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PlayBar, {\n        onClickPlay: () => setPlay(true),\n        onClickPause: () => player.pausePlayback(),\n        onClickStop: async () => {\n          await player.stopMidiFile();\n          setNotes([]);\n          setPlay(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"20%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-piano\",\n      children: notes.map((note, i) => {\n        // const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n        const noteDescription = `${note.name}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            left: note.time * DURATION_FACTOR - playheadTime,\n            top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT,\n            width: note.duration * DURATION_FACTOR,\n            height: NOTE_HEIGHT,\n            backgroundColor: '#7Ec291'\n          }\n        }, `${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-preset-container\",\n      children: presentChords.map(chord => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"App-preset\",\n          onClick: e => onChordButton(chord),\n          id: `${chord.key}`,\n          name: `${chord.name}`,\n          onKeyDown: e => {\n            onChordKey(e, chord);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingTop: \"2.5vw\",\n              fontSize: \"1.25vw\"\n            },\n            children: chord.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingTop: \"1.25vw\",\n              fontSize: \"1vw\",\n              color: \"#E37B7B\"\n            },\n            children: chord.key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, `${chord.key}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"q6lL/xy9v7w8OFmPrTFLfVkntAA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/src/App.js"],"names":["useEffect","useState","Player","Tone","PlayBar","data","interval","App","SampleChords","sampleChords","play","setPlay","player","setPlayer","playerTwo","setPlayerTwo","notes","setNotes","playheadTime","setPlayheadTime","presentChords","setPresetChords","setup","setInterval","context","currentTime","DURATION_FACTOR","notesFromMidiFile","playMidiFile","MAX_MIDI","NOTE_HEIGHT","onChordButton","chord","playChord","array","onChordKey","e","console","log","key","target","id","name","width","textTransform","pausePlayback","stopMidiFile","map","note","i","noteDescription","position","left","time","top","midi","duration","height","backgroundColor","paddingTop","fontSize","color"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react'\nimport Player from './Player';\nimport * as Tone from 'tone'\nimport PlayBar from './components/Playbar'\nimport data from './public/data'\n\n\nlet interval;\nfunction App() {\n  let SampleChords = data.sampleChords\n  const [play, setPlay] = useState(false)\n  const [player, setPlayer] = useState(new Player());\n  const [playerTwo, setPlayerTwo] = useState(new Player());\n  const [notes, setNotes] = useState([]);\n  const [playheadTime, setPlayheadTime] = useState(0);\n  const [presentChords, setPresetChords] = useState([])\n\n  useEffect(() => {\n    (async ()=>{\n      await player.setup();\n      setPlayer(player);\n      await playerTwo.setup();\n      setPlayerTwo(playerTwo);\n      \n      setPresetChords(SampleChords)\n      // console.log(\"set up\")\n      if (!interval) {\n        setInterval(() => {\n          setPlayheadTime(Tone.context.currentTime * DURATION_FACTOR)\n        }, 10);\n      }\n    })()\n  }, []); //on component mount\n\n  useEffect(() => {\n    if (play) {\n      (async () => {\n        // await player.setup();\n        // setPlayer(player);\n        setNotes(await player.notesFromMidiFile('ABeautifulFriendship.mid'));\n        await player.playMidiFile('ABeautifulFriendship.mid');\n      })()\n\n      setPlay(false);\n    }\n  }, [play,player])\n\n  const MAX_MIDI = 88\n  const NOTE_HEIGHT = 8\n  const DURATION_FACTOR = 100\n\n  async function onChordButton(chord){\n    // console.log(chord)\n    await playerTwo.playChord(chord.array);\n  }\n\n  async function onChordKey(e,chord){\n    console.log(e.key);\n    if(e.key === e.target.id){\n      console.log(e.target.name)\n      await playerTwo.playChord(chord.array);\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n          <div style={{width:\"20%\",textTransform:\"uppercase\"}}>2.5K only<br></br> music generation <br></br> project</div>\n          <PlayBar onClickPlay={() => setPlay(true)} onClickPause={() => player.pausePlayback()} onClickStop={async ()=>{\n            await player.stopMidiFile();\n            setNotes([]);\n            setPlay(false);\n          }}></PlayBar>\n          <div style={{width:\"20%\"}}></div>\n\n      </div>\n      {/* <button onClick={() => setPlay(true)}>begin</button>    */}\n\n      {/* <div style={{height: '100%', width: 4, position: 'absolute', left: playheadTime, top: 0, backgroundColor: 'black', transition: '0.2s', zIndex: 999}}/> */}\n      {/* {notes.map((note, i) => {\n        // const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n        const noteDescription = `${note.name}`\n        return <div\n          key={`${i}`}\n          style={{ position: 'absolute', left: note.time * DURATION_FACTOR - playheadTime, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: 'tomato' }}\n        >{noteDescription}</div>\n      }\n      )} */}\n      <div className=\"App-piano\">\n        {notes.map((note, i) => {\n          // const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n          const noteDescription = `${note.name}`\n          return <div\n            key={`${i}`}\n            style={{position:\"absolute\",left: note.time * DURATION_FACTOR - playheadTime, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: '#7Ec291' }}\n          ></div>\n        }\n        )}\n      </div>\n      {/* <div style={{backgroundColor:\"yellow\",position:\"relative\"}}> HELLO</div> */}\n      <div className=\"App-preset-container\">\n        {presentChords.map((chord)=> {\n          return <button className=\"App-preset\" onClick={(e)=>onChordButton(chord)} id={`${chord.key}`} key={`${chord.key}`} name={`${chord.name}`} onKeyDown={(e)=>{onChordKey(e,chord)}} >\n            <div style={{paddingTop:\"2.5vw\",fontSize:\"1.25vw\"}}>{chord.name}</div>\n            <div style={{paddingTop:\"1.25vw\",fontSize:\"1vw\",color:\"#E37B7B\"}}>{chord.key}</div>\n          </button>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}