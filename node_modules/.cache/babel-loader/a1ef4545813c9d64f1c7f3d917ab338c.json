{"ast":null,"code":"import _slicedToArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\n\nexport var Players = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Players, _ToneAudioNode);\n\n  var _super = _createSuper(Players);\n\n  function Players() {\n    var _this;\n\n    _classCallCheck(this, Players);\n\n    _this = _super.call(this, optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n    _this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n\n    _this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n\n    _this._players = new Map();\n    var options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    _this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    }); // mute initially\n\n    _this.mute = options.mute;\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  _createClass(Players, [{\n    key: \"has\",\n\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param name  The key or index of the buffer.\n     */\n    value: function has(name) {\n      return this._buffers.has(name);\n    }\n    /**\n     * Get a player by name.\n     * @param  name  The players name as defined in the constructor object or `add` method.\n     */\n\n  }, {\n    key: \"player\",\n    value: function player(name) {\n      assert(this.has(name), \"No Player with the name \".concat(name, \" exists on this object\"));\n\n      if (!this._players.has(name)) {\n        var player = new Player({\n          context: this.context,\n          fadeIn: this._fadeIn,\n          fadeOut: this._fadeOut,\n          url: this._buffers.get(name)\n        }).connect(this.output);\n\n        this._players.set(name, player);\n      }\n\n      return this._players.get(name);\n    }\n    /**\n     * If all the buffers are loaded or not\n     */\n\n  }, {\n    key: \"add\",\n\n    /**\n     * Add a player by name and url to the Players\n     * @param  name A unique name to give the player\n     * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n     * @param callback  The callback to invoke when the url is loaded.\n     */\n    value: function add(name, url, callback) {\n      assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\n      this._buffers.add(name, url, callback);\n\n      return this;\n    }\n    /**\n     * Stop all of the players at the given time\n     * @param time The time to stop all of the players.\n     */\n\n  }, {\n    key: \"stopAll\",\n    value: function stopAll(time) {\n      this._players.forEach(function (player) {\n        return player.stop(time);\n      });\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Players.prototype), \"dispose\", this).call(this);\n\n      this._volume.dispose();\n\n      this.volume.dispose();\n\n      this._players.forEach(function (player) {\n        return player.dispose();\n      });\n\n      this._buffers.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"mute\",\n\n    /**\n     * Mute the output.\n     */\n    get: function get() {\n      return this._volume.mute;\n    },\n    set: function set(mute) {\n      this._volume.mute = mute;\n    }\n    /**\n     * The fadeIn time of the envelope applied to the source.\n     */\n\n  }, {\n    key: \"fadeIn\",\n    get: function get() {\n      return this._fadeIn;\n    },\n    set: function set(fadeIn) {\n      this._fadeIn = fadeIn;\n\n      this._players.forEach(function (player) {\n        player.fadeIn = fadeIn;\n      });\n    }\n    /**\n     * The fadeOut time of the each of the sources.\n     */\n\n  }, {\n    key: \"fadeOut\",\n    get: function get() {\n      return this._fadeOut;\n    },\n    set: function set(fadeOut) {\n      this._fadeOut = fadeOut;\n\n      this._players.forEach(function (player) {\n        player.fadeOut = fadeOut;\n      });\n    }\n    /**\n     * The state of the players object. Returns \"started\" if any of the players are playing.\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      var playing = Array.from(this._players).some(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            player = _ref2[1];\n\n        return player.state === \"started\";\n      });\n      return playing ? \"started\" : \"stopped\";\n    }\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffers.loaded;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        baseUrl: \"\",\n        fadeIn: 0,\n        fadeOut: 0,\n        mute: false,\n        onload: noOp,\n        onerror: noOp,\n        urls: {},\n        volume: 0\n      });\n    }\n  }]);\n\n  return Players;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/source/buffer/Players.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n        this.name = \"Players\";\n        /**\n         * Players has no input.\n         */\n        this.input = undefined;\n        /**\n         * The container of all of the players\n         */\n        this._players = new Map();\n        const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n        /**\n         * The output volume node\n         */\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n        this._buffers = new ToneAudioBuffers({\n            urls: options.urls,\n            onload: options.onload,\n            baseUrl: options.baseUrl,\n            onerror: options.onerror\n        });\n        // mute initially\n        this.mute = options.mute;\n        this._fadeIn = options.fadeIn;\n        this._fadeOut = options.fadeOut;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            baseUrl: \"\",\n            fadeIn: 0,\n            fadeOut: 0,\n            mute: false,\n            onload: noOp,\n            onerror: noOp,\n            urls: {},\n            volume: 0,\n        });\n    }\n    /**\n     * Mute the output.\n     */\n    get mute() {\n        return this._volume.mute;\n    }\n    set mute(mute) {\n        this._volume.mute = mute;\n    }\n    /**\n     * The fadeIn time of the envelope applied to the source.\n     */\n    get fadeIn() {\n        return this._fadeIn;\n    }\n    set fadeIn(fadeIn) {\n        this._fadeIn = fadeIn;\n        this._players.forEach(player => {\n            player.fadeIn = fadeIn;\n        });\n    }\n    /**\n     * The fadeOut time of the each of the sources.\n     */\n    get fadeOut() {\n        return this._fadeOut;\n    }\n    set fadeOut(fadeOut) {\n        this._fadeOut = fadeOut;\n        this._players.forEach(player => {\n            player.fadeOut = fadeOut;\n        });\n    }\n    /**\n     * The state of the players object. Returns \"started\" if any of the players are playing.\n     */\n    get state() {\n        const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n        return playing ? \"started\" : \"stopped\";\n    }\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param name  The key or index of the buffer.\n     */\n    has(name) {\n        return this._buffers.has(name);\n    }\n    /**\n     * Get a player by name.\n     * @param  name  The players name as defined in the constructor object or `add` method.\n     */\n    player(name) {\n        assert(this.has(name), `No Player with the name ${name} exists on this object`);\n        if (!this._players.has(name)) {\n            const player = new Player({\n                context: this.context,\n                fadeIn: this._fadeIn,\n                fadeOut: this._fadeOut,\n                url: this._buffers.get(name),\n            }).connect(this.output);\n            this._players.set(name, player);\n        }\n        return this._players.get(name);\n    }\n    /**\n     * If all the buffers are loaded or not\n     */\n    get loaded() {\n        return this._buffers.loaded;\n    }\n    /**\n     * Add a player by name and url to the Players\n     * @param  name A unique name to give the player\n     * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n     * @param callback  The callback to invoke when the url is loaded.\n     */\n    add(name, url, callback) {\n        assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n        this._buffers.add(name, url, callback);\n        return this;\n    }\n    /**\n     * Stop all of the players at the given time\n     * @param time The time to stop all of the players.\n     */\n    stopAll(time) {\n        this._players.forEach(player => player.stop(time));\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n        this.volume.dispose();\n        this._players.forEach(player => player.dispose());\n        this._buffers.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Players.js.map"]},"metadata":{},"sourceType":"module"}