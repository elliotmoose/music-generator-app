{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nexport var Negate = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Negate, _SignalOperator);\n\n  var _super = _createSuper(Negate);\n\n  function Negate() {\n    var _this;\n\n    _classCallCheck(this, Negate);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    _this._multiply = new Multiply({\n      context: _this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    _this.input = _this._multiply;\n    _this.output = _this._multiply;\n    return _this;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  _createClass(Negate, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Negate.prototype), \"dispose\", this).call(this);\n\n      this._multiply.dispose();\n\n      return this;\n    }\n  }]);\n\n  return Negate;\n}(SignalOperator);","map":{"version":3,"sources":["../../../Tone/signal/Negate.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;;;;;;;AAQG;;AACH,WAAa,MAAb;AAAA;;AAAA;;AAAA,oBAAA;AAAA;;AAAA;;;AAEU,UAAA,IAAA,GAAe,QAAf;AAET;;AAEG;;AACK,UAAA,SAAA,GAAsB,IAAI,QAAJ,CAAa;AAC1C,MAAA,OAAO,EAAE,MAAK,OAD4B;AAE1C,MAAA,KAAK,EAAE,CAAC;AAFkC,KAAb,CAAtB;AAKR;;AAEG;;AACH,UAAA,KAAA,GAAQ,MAAK,SAAb;AACA,UAAA,MAAA,GAAS,MAAK,SAAd;AAhBD;AA2BC;AATA;;;AAGG;;;AArBJ;AAAA;AAAA,8BAsBQ;AACN;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,aAAO,IAAP;AACA;AA1BF;;AAAA;AAAA,EAA4B,cAA5B","sourceRoot":"","sourcesContent":["import { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator {\n    constructor() {\n        super(...arguments);\n        this.name = \"Negate\";\n        /**\n         * negation is done by multiplying by -1\n         */\n        this._multiply = new Multiply({\n            context: this.context,\n            value: -1,\n        });\n        /**\n         * The input and output are equal to the multiply node\n         */\n        this.input = this._multiply;\n        this.output = this._multiply;\n    }\n    /**\n     * clean up\n     * @returns {Negate} this\n     */\n    dispose() {\n        super.dispose();\n        this._multiply.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Negate.js.map"]},"metadata":{},"sourceType":"module"}