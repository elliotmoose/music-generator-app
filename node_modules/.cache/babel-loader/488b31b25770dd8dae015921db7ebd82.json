{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect } from \"./Effect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\n\nexport var BitCrusher = /*#__PURE__*/function (_Effect) {\n  _inherits(BitCrusher, _Effect);\n\n  var _super = _createSuper(BitCrusher);\n\n  function BitCrusher() {\n    var _this;\n\n    _classCallCheck(this, BitCrusher);\n\n    _this = _super.call(this, optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n    _this.name = \"BitCrusher\";\n    var options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    _this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: _this.context,\n      bits: options.bits\n    }); // connect it up\n\n    _this.connectEffect(_this._bitCrusherWorklet);\n\n    _this.bits = _this._bitCrusherWorklet.bits;\n    return _this;\n  }\n\n  _createClass(BitCrusher, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusher.prototype), \"dispose\", this).call(this);\n\n      this._bitCrusherWorklet.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        bits: 4\n      });\n    }\n  }]);\n\n  return BitCrusher;\n}(Effect);\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\n\nvar BitCrusherWorklet = /*#__PURE__*/function (_ToneAudioWorklet) {\n  _inherits(BitCrusherWorklet, _ToneAudioWorklet);\n\n  var _super2 = _createSuper(BitCrusherWorklet);\n\n  function BitCrusherWorklet() {\n    var _this2;\n\n    _classCallCheck(this, BitCrusherWorklet);\n\n    _this2 = _super2.call(this, optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n    _this2.name = \"BitCrusherWorklet\";\n    var options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    _this2.input = new Gain({\n      context: _this2.context\n    });\n    _this2.output = new Gain({\n      context: _this2.context\n    });\n    _this2.bits = new Param({\n      context: _this2.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: _this2._dummyParam,\n      swappable: true\n    });\n    return _this2;\n  }\n\n  _createClass(BitCrusherWorklet, [{\n    key: \"_audioWorkletName\",\n    value: function _audioWorkletName() {\n      return workletName;\n    }\n  }, {\n    key: \"onReady\",\n    value: function onReady(node) {\n      connectSeries(this.input, node, this.output);\n      var bits = node.parameters.get(\"bits\");\n      this.bits.setParam(bits);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusherWorklet.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n      this.bits.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioWorklet.getDefaults(), {\n        bits: 12\n      });\n    }\n  }]);\n\n  return BitCrusherWorklet;\n}(ToneAudioWorklet);","map":{"version":3,"sources":["../../../Tone/effect/BitCrusher.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,gBAAT,QAA0D,kCAA1D;AACA,SAAS,MAAT,QAAsC,UAAtC;AAEA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,SAAS,WAAT,QAA4B,sBAA5B;AAMA;;;;;;;;;;;AAWG;;AACH,WAAa,UAAb;AAAA;;AAAA;;AAkBC,wBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,MAAD,CAAtC,CAA1B;AAjBQ,UAAA,IAAA,GAAe,YAAf;AAkBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,MAAD,CAAtC,CAApC;AAEA,UAAK,kBAAL,GAA0B,IAAI,iBAAJ,CAAsB;AAC/C,MAAA,OAAO,EAAE,MAAK,OADiC;AAE/C,MAAA,IAAI,EAAE,OAAO,CAAC;AAFiC,KAAtB,CAA1B,CAJD,CAQC;;AACA,UAAK,aAAL,CAAmB,MAAK,kBAAxB;;AAEA,UAAK,IAAL,GAAY,MAAK,kBAAL,CAAwB,IAApC;AAXD;AAYC;;AA9BF;AAAA;AAAA,8BAsCQ;AACN;;AACA,WAAK,kBAAL,CAAwB,OAAxB;;AACA,aAAO,IAAP;AACA;AA1CF;AAAA;AAAA,kCAgCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,IAAI,EAAE;AADoC,OAApC,CAAP;AAGA;AApCF;;AAAA;AAAA,EAAgC,MAAhC;AAiDA;;AAEG;;IACG,iB;;;;;AAUL,+BAAA;AAAA;;AAAA;;AACC,gCAAM,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,CAA1B;AATQ,WAAA,IAAA,GAAe,mBAAf;AAUR,QAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,CAApC;AAEA,WAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,OAAK;AAAhB,KAAT,CAAb;AACA,WAAK,MAAL,GAAc,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,OAAK;AAAhB,KAAT,CAAd;AAEA,WAAK,IAAL,GAAY,IAAI,KAAJ,CAAsB;AACjC,MAAA,OAAO,EAAE,OAAK,OADmB;AAEjC,MAAA,KAAK,EAAE,OAAO,CAAC,IAFkB;AAGjC,MAAA,KAAK,EAAE,UAH0B;AAIjC,MAAA,QAAQ,EAAE,CAJuB;AAKjC,MAAA,QAAQ,EAAE,EALuB;AAMjC,MAAA,KAAK,EAAE,OAAK,WANqB;AAOjC,MAAA,SAAS,EAAE;AAPsB,KAAtB,CAAZ;AAPD;AAgBC;;;;wCAQ0B;AAC1B,aAAO,WAAP;AACA;;;4BAEO,I,EAAsB;AAC7B,MAAA,aAAa,CAAC,KAAK,KAAN,EAAa,IAAb,EAAmB,KAAK,MAAxB,CAAb;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,MAApB,CAAb;AACA,WAAK,IAAL,CAAU,QAAV,CAAmB,IAAnB;AACA;;;8BAEM;AACN;;AACA,WAAK,KAAL,CAAW,OAAX;AACA,WAAK,MAAL,CAAY,OAAZ;AACA,WAAK,IAAL,CAAU,OAAV;AACA,aAAO,IAAP;AACA;;;kCAtBiB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,gBAAgB,CAAC,WAAjB,EAAd,EAA8C;AACpD,QAAA,IAAI,EAAE;AAD8C,OAA9C,CAAP;AAGA;;;;EAhC8B,gB","sourceRoot":"","sourcesContent":["import { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect } from \"./Effect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\nexport class BitCrusher extends Effect {\n    constructor() {\n        super(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n        this.name = \"BitCrusher\";\n        const options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n        this._bitCrusherWorklet = new BitCrusherWorklet({\n            context: this.context,\n            bits: options.bits,\n        });\n        // connect it up\n        this.connectEffect(this._bitCrusherWorklet);\n        this.bits = this._bitCrusherWorklet.bits;\n    }\n    static getDefaults() {\n        return Object.assign(Effect.getDefaults(), {\n            bits: 4,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._bitCrusherWorklet.dispose();\n        return this;\n    }\n}\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet {\n    constructor() {\n        super(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n        this.name = \"BitCrusherWorklet\";\n        const options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        this.bits = new Param({\n            context: this.context,\n            value: options.bits,\n            units: \"positive\",\n            minValue: 1,\n            maxValue: 16,\n            param: this._dummyParam,\n            swappable: true,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioWorklet.getDefaults(), {\n            bits: 12,\n        });\n    }\n    _audioWorkletName() {\n        return workletName;\n    }\n    onReady(node) {\n        connectSeries(this.input, node, this.output);\n        const bits = node.parameters.get(\"bits\");\n        this.bits.setParam(bits);\n    }\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this.output.dispose();\n        this.bits.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=BitCrusher.js.map"]},"metadata":{},"sourceType":"module"}