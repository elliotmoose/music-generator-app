{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport var EQ3 = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(EQ3, _ToneAudioNode);\n\n  var _super = _createSuper(EQ3);\n\n  function EQ3() {\n    var _this;\n\n    _classCallCheck(this, EQ3);\n\n    _this = _super.call(this, optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    _this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [];\n    var options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    _this.input = _this._multibandSplit = new MultibandSplit({\n      context: _this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    _this._lowGain = new Gain({\n      context: _this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    _this._midGain = new Gain({\n      context: _this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    _this._highGain = new Gain({\n      context: _this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    _this.low = _this._lowGain.gain;\n    _this.mid = _this._midGain.gain;\n    _this.high = _this._highGain.gain;\n    _this.Q = _this._multibandSplit.Q;\n    _this.lowFrequency = _this._multibandSplit.lowFrequency;\n    _this.highFrequency = _this._multibandSplit.highFrequency; // the frequency bands\n\n    _this._multibandSplit.low.chain(_this._lowGain, _this.output);\n\n    _this._multibandSplit.mid.chain(_this._midGain, _this.output);\n\n    _this._multibandSplit.high.chain(_this._highGain, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    _this._internalChannels = [_this._multibandSplit];\n    return _this;\n  }\n\n  _createClass(EQ3, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(EQ3.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n      this._multibandSplit.dispose();\n\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n\n      this._lowGain.dispose();\n\n      this._midGain.dispose();\n\n      this._highGain.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        high: 0,\n        highFrequency: 2500,\n        low: 0,\n        lowFrequency: 400,\n        mid: 0\n      });\n    }\n  }]);\n\n  return EQ3;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/filter/EQ3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport class EQ3 extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n        this.name = \"EQ3\";\n        /**\n         * the output\n         */\n        this.output = new Gain({ context: this.context });\n        this._internalChannels = [];\n        const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n        this.input = this._multibandSplit = new MultibandSplit({\n            context: this.context,\n            highFrequency: options.highFrequency,\n            lowFrequency: options.lowFrequency,\n        });\n        this._lowGain = new Gain({\n            context: this.context,\n            gain: options.low,\n            units: \"decibels\",\n        });\n        this._midGain = new Gain({\n            context: this.context,\n            gain: options.mid,\n            units: \"decibels\",\n        });\n        this._highGain = new Gain({\n            context: this.context,\n            gain: options.high,\n            units: \"decibels\",\n        });\n        this.low = this._lowGain.gain;\n        this.mid = this._midGain.gain;\n        this.high = this._highGain.gain;\n        this.Q = this._multibandSplit.Q;\n        this.lowFrequency = this._multibandSplit.lowFrequency;\n        this.highFrequency = this._multibandSplit.highFrequency;\n        // the frequency bands\n        this._multibandSplit.low.chain(this._lowGain, this.output);\n        this._multibandSplit.mid.chain(this._midGain, this.output);\n        this._multibandSplit.high.chain(this._highGain, this.output);\n        readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n        this._internalChannels = [this._multibandSplit];\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            high: 0,\n            highFrequency: 2500,\n            low: 0,\n            lowFrequency: 400,\n            mid: 0,\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n        this._multibandSplit.dispose();\n        this.lowFrequency.dispose();\n        this.highFrequency.dispose();\n        this._lowGain.dispose();\n        this._midGain.dispose();\n        this._highGain.dispose();\n        this.low.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.Q.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=EQ3.js.map"]},"metadata":{},"sourceType":"module"}