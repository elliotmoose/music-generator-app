{"ast":null,"code":"var WebGLManager = require('./WebGLManager'),\n    AlphaMaskFilter = require('../filters/SpriteMaskFilter');\n/**\n * @class\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\n\n\nfunction MaskManager(renderer) {\n  WebGLManager.call(this, renderer);\n  this.stencilStack = [];\n  this.reverse = true;\n  this.count = 0;\n  this.alphaMaskPool = [];\n}\n\nMaskManager.prototype = Object.create(WebGLManager.prototype);\nMaskManager.prototype.constructor = MaskManager;\nmodule.exports = MaskManager;\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param graphics {Graphics}\n * @param webGLData {any[]}\n */\n\nMaskManager.prototype.pushMask = function (target, maskData) {\n  if (maskData.texture) {\n    this.pushSpriteMask(target, maskData);\n  } else {\n    this.pushStencilMask(target, maskData);\n  }\n};\n/**\n * Removes the last mask from the mask stack and doesn't return it.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\n\n\nMaskManager.prototype.popMask = function (target, maskData) {\n  if (maskData.texture) {\n    this.popSpriteMask(target, maskData);\n  } else {\n    this.popStencilMask(target, maskData);\n  }\n};\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\n\n\nMaskManager.prototype.pushSpriteMask = function (target, maskData) {\n  var alphaMaskFilter = this.alphaMaskPool.pop();\n\n  if (!alphaMaskFilter) {\n    alphaMaskFilter = [new AlphaMaskFilter(maskData)];\n  }\n\n  alphaMaskFilter[0].maskSprite = maskData;\n  this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n};\n/**\n * Removes the last filter from the filter stack and doesn't return it.\n *\n */\n\n\nMaskManager.prototype.popSpriteMask = function () {\n  var filters = this.renderer.filterManager.popFilter();\n  this.alphaMaskPool.push(filters);\n};\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\n\n\nMaskManager.prototype.pushStencilMask = function (target, maskData) {\n  this.renderer.stencilManager.pushMask(maskData);\n};\n/**\n * Removes the last filter from the filter stack and doesn't return it.\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\n\n\nMaskManager.prototype.popStencilMask = function (target, maskData) {\n  this.renderer.stencilManager.popMask(maskData);\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/renderers/webgl/managers/MaskManager.js"],"names":["WebGLManager","require","AlphaMaskFilter","MaskManager","renderer","call","stencilStack","reverse","count","alphaMaskPool","prototype","Object","create","constructor","module","exports","pushMask","target","maskData","texture","pushSpriteMask","pushStencilMask","popMask","popSpriteMask","popStencilMask","alphaMaskFilter","pop","maskSprite","filterManager","pushFilter","filters","popFilter","push","stencilManager"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;AAAA,IACIC,eAAe,GAAGD,OAAO,CAAC,6BAAD,CAD7B;AAGA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,QAArB,EACA;AACIJ,EAAAA,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBD,QAAxB;AAEA,OAAKE,YAAL,GAAoB,EAApB;AACA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,KAAL,GAAa,CAAb;AAEA,OAAKC,aAAL,GAAqB,EAArB;AACH;;AAEDN,WAAW,CAACO,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcZ,YAAY,CAACU,SAA3B,CAAxB;AACAP,WAAW,CAACO,SAAZ,CAAsBG,WAAtB,GAAoCV,WAApC;AACAW,MAAM,CAACC,OAAP,GAAiBZ,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,WAAW,CAACO,SAAZ,CAAsBM,QAAtB,GAAiC,UAAUC,MAAV,EAAkBC,QAAlB,EACjC;AACI,MAAIA,QAAQ,CAACC,OAAb,EACA;AACI,SAAKC,cAAL,CAAoBH,MAApB,EAA4BC,QAA5B;AACH,GAHD,MAKA;AACI,SAAKG,eAAL,CAAqBJ,MAArB,EAA6BC,QAA7B;AACH;AAEJ,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACAf,WAAW,CAACO,SAAZ,CAAsBY,OAAtB,GAAgC,UAAUL,MAAV,EAAkBC,QAAlB,EAChC;AACI,MAAIA,QAAQ,CAACC,OAAb,EACA;AACI,SAAKI,aAAL,CAAmBN,MAAnB,EAA2BC,QAA3B;AACH,GAHD,MAKA;AACI,SAAKM,cAAL,CAAoBP,MAApB,EAA4BC,QAA5B;AACH;AACJ,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACAf,WAAW,CAACO,SAAZ,CAAsBU,cAAtB,GAAuC,UAAUH,MAAV,EAAkBC,QAAlB,EACvC;AACI,MAAIO,eAAe,GAAG,KAAKhB,aAAL,CAAmBiB,GAAnB,EAAtB;;AAEA,MAAI,CAACD,eAAL,EACA;AACIA,IAAAA,eAAe,GAAG,CAAC,IAAIvB,eAAJ,CAAoBgB,QAApB,CAAD,CAAlB;AACH;;AAEDO,EAAAA,eAAe,CAAC,CAAD,CAAf,CAAmBE,UAAnB,GAAgCT,QAAhC;AACA,OAAKd,QAAL,CAAcwB,aAAd,CAA4BC,UAA5B,CAAuCZ,MAAvC,EAA+CQ,eAA/C;AACH,CAXD;AAaA;AACA;AACA;AACA;;;AACAtB,WAAW,CAACO,SAAZ,CAAsBa,aAAtB,GAAsC,YACtC;AACI,MAAIO,OAAO,GAAG,KAAK1B,QAAL,CAAcwB,aAAd,CAA4BG,SAA5B,EAAd;AAEA,OAAKtB,aAAL,CAAmBuB,IAAnB,CAAwBF,OAAxB;AACH,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA3B,WAAW,CAACO,SAAZ,CAAsBW,eAAtB,GAAwC,UAAUJ,MAAV,EAAkBC,QAAlB,EACxC;AACI,OAAKd,QAAL,CAAc6B,cAAd,CAA6BjB,QAA7B,CAAsCE,QAAtC;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACAf,WAAW,CAACO,SAAZ,CAAsBc,cAAtB,GAAuC,UAAUP,MAAV,EAAkBC,QAAlB,EACvC;AACI,OAAKd,QAAL,CAAc6B,cAAd,CAA6BX,OAA7B,CAAqCJ,QAArC;AACH,CAHD","sourcesContent":["var WebGLManager = require('./WebGLManager'),\n    AlphaMaskFilter = require('../filters/SpriteMaskFilter');\n\n/**\n * @class\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\nfunction MaskManager(renderer)\n{\n    WebGLManager.call(this, renderer);\n\n    this.stencilStack = [];\n    this.reverse = true;\n    this.count = 0;\n\n    this.alphaMaskPool = [];\n}\n\nMaskManager.prototype = Object.create(WebGLManager.prototype);\nMaskManager.prototype.constructor = MaskManager;\nmodule.exports = MaskManager;\n\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param graphics {Graphics}\n * @param webGLData {any[]}\n */\nMaskManager.prototype.pushMask = function (target, maskData)\n{\n    if (maskData.texture)\n    {\n        this.pushSpriteMask(target, maskData);\n    }\n    else\n    {\n        this.pushStencilMask(target, maskData);\n    }\n\n};\n\n/**\n * Removes the last mask from the mask stack and doesn't return it.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\nMaskManager.prototype.popMask = function (target, maskData)\n{\n    if (maskData.texture)\n    {\n        this.popSpriteMask(target, maskData);\n    }\n    else\n    {\n        this.popStencilMask(target, maskData);\n    }\n};\n\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\nMaskManager.prototype.pushSpriteMask = function (target, maskData)\n{\n    var alphaMaskFilter = this.alphaMaskPool.pop();\n\n    if (!alphaMaskFilter)\n    {\n        alphaMaskFilter = [new AlphaMaskFilter(maskData)];\n    }\n\n    alphaMaskFilter[0].maskSprite = maskData;\n    this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n};\n\n/**\n * Removes the last filter from the filter stack and doesn't return it.\n *\n */\nMaskManager.prototype.popSpriteMask = function ()\n{\n    var filters = this.renderer.filterManager.popFilter();\n\n    this.alphaMaskPool.push(filters);\n};\n\n\n/**\n * Applies the Mask and adds it to the current filter stack.\n *\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\nMaskManager.prototype.pushStencilMask = function (target, maskData)\n{\n    this.renderer.stencilManager.pushMask(maskData);\n};\n\n/**\n * Removes the last filter from the filter stack and doesn't return it.\n * @param target {RenderTarget}\n * @param maskData {any[]}\n */\nMaskManager.prototype.popStencilMask = function (target, maskData)\n{\n    this.renderer.stencilManager.popMask(maskData);\n};\n\n"]},"metadata":{},"sourceType":"script"}