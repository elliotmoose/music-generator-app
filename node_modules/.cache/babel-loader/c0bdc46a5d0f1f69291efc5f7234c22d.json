{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\n\nexport var MidSideCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideCompressor, _ToneAudioNode);\n\n  var _super = _createSuper(MidSideCompressor);\n\n  function MidSideCompressor() {\n    var _this;\n\n    _classCallCheck(this, MidSideCompressor);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    _this.name = \"MidSideCompressor\";\n    var options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    _this._midSideSplit = _this.input = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSideMerge = _this.output = new MidSideMerge({\n      context: _this.context\n    });\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.side = new Compressor(Object.assign(options.side, {\n      context: _this.context\n    }));\n\n    _this._midSideSplit.mid.chain(_this.mid, _this._midSideMerge.mid);\n\n    _this._midSideSplit.side.chain(_this.side, _this._midSideMerge.side);\n\n    readOnly(_assertThisInitialized(_this), [\"mid\", \"side\"]);\n    return _this;\n  }\n\n  _createClass(MidSideCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideCompressor.prototype), \"dispose\", this).call(this);\n\n      this.mid.dispose();\n      this.side.dispose();\n\n      this._midSideSplit.dispose();\n\n      this._midSideMerge.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        side: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        }\n      });\n    }\n  }]);\n\n  return MidSideCompressor;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/dynamics/MidSideCompressor.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAgC,aAAhC,QAA2E,kCAA3E;AACA,SAAS,UAAT,QAA8C,cAA9C;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,QAAT,QAA2C,2BAA3C;AAOA;;;;AAIG;;AACH,WAAa,iBAAb;AAAA;;AAAA;;AA4BC,+BAAA;AAAA;;AAAA;;AACC,8BAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,CAAlC,CAAN;AA3BQ,UAAA,IAAA,GAAe,mBAAf;AA4BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,CAApC;AAEA,UAAK,aAAL,GAAqB,MAAK,KAAL,GAAa,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAjB,CAAlC;AACA,UAAK,aAAL,GAAqB,MAAK,MAAL,GAAc,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAjB,CAAnC;AACA,UAAK,GAAL,GAAW,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,GAAtB,EAA2B;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAA3B,CAAf,CAAX;AACA,UAAK,IAAL,GAAY,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,IAAtB,EAA4B;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAA5B,CAAf,CAAZ;;AAEA,UAAK,aAAL,CAAmB,GAAnB,CAAuB,KAAvB,CAA6B,MAAK,GAAlC,EAAuC,MAAK,aAAL,CAAmB,GAA1D;;AACA,UAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,MAAK,IAAnC,EAAyC,MAAK,aAAL,CAAmB,IAA5D;;AACA,IAAA,QAAQ,gCAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,CAAR;AAXD;AAYC;;AAxCF;AAAA;AAAA,8BA6DQ;AACN;;AACA,WAAK,GAAL,CAAS,OAAT;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,aAAL,CAAmB,OAAnB;;AACA,WAAK,aAAL,CAAmB,OAAnB;;AACA,aAAO,IAAP;AACA;AApEF;AAAA;AAAA,kCA0CmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,GAAG,EAAE;AACJ,UAAA,KAAK,EAAE,CADH;AAEJ,UAAA,SAAS,EAAE,CAAC,EAFR;AAGJ,UAAA,OAAO,EAAE,IAHL;AAIJ,UAAA,MAAM,EAAE,IAJJ;AAKJ,UAAA,IAAI,EAAE;AALF,SAD4C;AAQjD,QAAA,IAAI,EAAE;AACL,UAAA,KAAK,EAAE,CADF;AAEL,UAAA,SAAS,EAAE,CAAC,EAFP;AAGL,UAAA,OAAO,EAAE,IAHJ;AAIL,UAAA,MAAM,EAAE,IAJH;AAKL,UAAA,IAAI,EAAE;AALD;AAR2C,OAA3C,CAAP;AAgBA;AA3DF;;AAAA;AAAA,EAAuC,aAAvC","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\nexport class MidSideCompressor extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n        this.name = \"MidSideCompressor\";\n        const options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n        this._midSideSplit = this.input = new MidSideSplit({ context: this.context });\n        this._midSideMerge = this.output = new MidSideMerge({ context: this.context });\n        this.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n        this.side = new Compressor(Object.assign(options.side, { context: this.context }));\n        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n        readOnly(this, [\"mid\", \"side\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mid: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n            side: {\n                ratio: 6,\n                threshold: -30,\n                release: 0.25,\n                attack: 0.03,\n                knee: 10\n            }\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.mid.dispose();\n        this.side.dispose();\n        this._midSideSplit.dispose();\n        this._midSideMerge.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MidSideCompressor.js.map"]},"metadata":{},"sourceType":"module"}