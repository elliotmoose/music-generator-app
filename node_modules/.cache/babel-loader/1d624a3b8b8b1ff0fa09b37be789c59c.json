{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The ColorMatrixFilter class lets you apply a 4x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction ShockwaveFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/shockwave.frag', 'utf8'), // custom uniforms\n  {\n    center: {\n      type: 'v2',\n      value: {\n        x: 0.5,\n        y: 0.5\n      }\n    },\n    params: {\n      type: 'v3',\n      value: {\n        x: 10,\n        y: 0.8,\n        z: 0.1\n      }\n    },\n    time: {\n      type: '1f',\n      value: 0\n    }\n  });\n}\n\nShockwaveFilter.prototype = Object.create(core.AbstractFilter.prototype);\nShockwaveFilter.prototype.constructor = ShockwaveFilter;\nmodule.exports = ShockwaveFilter;\nObject.defineProperties(ShockwaveFilter.prototype, {\n  /**\n   * Sets the center of the shockwave in normalized screen coords. That is\n   * (0,0) is the top-left and (1,1) is the bottom right.\n   *\n   * @member {object<string, number>}\n   * @memberof ShockwaveFilter#\n   */\n  center: {\n    get: function () {\n      return this.uniforms.center.value;\n    },\n    set: function (value) {\n      this.uniforms.center.value = value;\n    }\n  },\n\n  /**\n   * Sets the params of the shockwave. These modify the look and behavior of\n   * the shockwave as it ripples out.\n   *\n   * @member {object<string, number>}\n   * @memberof ShockwaveFilter#\n   */\n  params: {\n    get: function () {\n      return this.uniforms.params.value;\n    },\n    set: function (value) {\n      this.uniforms.params.value = value;\n    }\n  },\n\n  /**\n   * Sets the elapsed time of the shockwave. This controls the speed at which\n   * the shockwave ripples out.\n   *\n   * @member {number}\n   * @memberof ShockwaveFilter#\n   */\n  time: {\n    get: function () {\n      return this.uniforms.time.value;\n    },\n    set: function (value) {\n      this.uniforms.time.value = value;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/filters/shockwave/ShockwaveFilter.js"],"names":["core","require","fs","ShockwaveFilter","AbstractFilter","call","readFileSync","__dirname","center","type","value","x","y","params","z","time","prototype","Object","create","constructor","module","exports","defineProperties","get","uniforms","set"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,GACA;AACIH,EAAAA,IAAI,CAACI,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EACI;AACA,MAFJ,EAGI;AACAH,EAAAA,EAAE,CAACI,YAAH,CAAgBC,SAAS,GAAG,iBAA5B,EAA+C,MAA/C,CAJJ,EAKI;AACA;AACIC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb;AAArB,KADZ;AAEIC,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAE,GAAZ;AAAiBE,QAAAA,CAAC,EAAE;AAApB;AAArB,KAFZ;AAGIC,IAAAA,IAAI,EAAE;AAAEN,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB;AAHV,GANJ;AAYH;;AAEDP,eAAe,CAACa,SAAhB,GAA4BC,MAAM,CAACC,MAAP,CAAclB,IAAI,CAACI,cAAL,CAAoBY,SAAlC,CAA5B;AACAb,eAAe,CAACa,SAAhB,CAA0BG,WAA1B,GAAwChB,eAAxC;AACAiB,MAAM,CAACC,OAAP,GAAiBlB,eAAjB;AAEAc,MAAM,CAACK,gBAAP,CAAwBnB,eAAe,CAACa,SAAxC,EAAmD;AAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIR,EAAAA,MAAM,EAAE;AACJe,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAchB,MAAd,CAAqBE,KAA5B;AACH,KAJG;AAKJe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAchB,MAAd,CAAqBE,KAArB,GAA6BA,KAA7B;AACH;AARG,GARuC;;AAkB/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIG,EAAAA,MAAM,EAAE;AACJU,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAcX,MAAd,CAAqBH,KAA5B;AACH,KAJG;AAKJe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAcX,MAAd,CAAqBH,KAArB,GAA6BA,KAA7B;AACH;AARG,GAzBuC;;AAmC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIK,EAAAA,IAAI,EAAE;AACFQ,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKC,QAAL,CAAcT,IAAd,CAAmBL,KAA1B;AACH,KAJC;AAKFe,IAAAA,GAAG,EAAE,UAAUf,KAAV,EACL;AACI,WAAKc,QAAL,CAAcT,IAAd,CAAmBL,KAAnB,GAA2BA,KAA3B;AACH;AARC;AA1CyC,CAAnD","sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The ColorMatrixFilter class lets you apply a 4x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction ShockwaveFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/shockwave.frag', 'utf8'),\n        // custom uniforms\n        {\n            center: { type: 'v2', value: { x: 0.5, y: 0.5 } },\n            params: { type: 'v3', value: { x: 10, y: 0.8, z: 0.1 } },\n            time: { type: '1f', value: 0 }\n        }\n    );\n}\n\nShockwaveFilter.prototype = Object.create(core.AbstractFilter.prototype);\nShockwaveFilter.prototype.constructor = ShockwaveFilter;\nmodule.exports = ShockwaveFilter;\n\nObject.defineProperties(ShockwaveFilter.prototype, {\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {object<string, number>}\n     * @memberof ShockwaveFilter#\n     */\n    center: {\n        get: function ()\n        {\n            return this.uniforms.center.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.center.value = value;\n        }\n    },\n    /**\n     * Sets the params of the shockwave. These modify the look and behavior of\n     * the shockwave as it ripples out.\n     *\n     * @member {object<string, number>}\n     * @memberof ShockwaveFilter#\n     */\n    params: {\n        get: function ()\n        {\n            return this.uniforms.params.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.params.value = value;\n        }\n    },\n    /**\n     * Sets the elapsed time of the shockwave. This controls the speed at which\n     * the shockwave ripples out.\n     *\n     * @member {number}\n     * @memberof ShockwaveFilter#\n     */\n    time: {\n        get: function ()\n        {\n            return this.uniforms.time.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.time.value = value;\n        }\n    }\n});\n"]},"metadata":{},"sourceType":"script"}