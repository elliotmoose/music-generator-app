{"ast":null,"code":"var Rectangle = require('./Rectangle'),\n    CONST = require('../../const');\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the center of the ellipse\n * @param y {number} The Y coordinate of the center of the ellipse\n * @param width {number} The half width of this ellipse\n * @param height {number} The half height of this ellipse\n */\n\n\nfunction Ellipse(x, y, width, height) {\n  /**\n   * @member {number}\n   * @default 0\n   */\n  this.x = x || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.y = y || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.width = width || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.height = height || 0;\n  /**\n   * The type of the object, mainly used to avoid `instanceof` checks\n   *\n   * @member {number}\n   */\n\n  this.type = CONST.SHAPES.ELIP;\n}\n\nEllipse.prototype.constructor = Ellipse;\nmodule.exports = Ellipse;\n/**\n * Creates a clone of this Ellipse instance\n *\n * @return {Ellipse} a copy of the ellipse\n */\n\nEllipse.prototype.clone = function () {\n  return new Ellipse(this.x, this.y, this.width, this.height);\n};\n/**\n * Checks whether the x and y coordinates given are contained within this ellipse\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coords are within this ellipse\n */\n\n\nEllipse.prototype.contains = function (x, y) {\n  if (this.width <= 0 || this.height <= 0) {\n    return false;\n  } //normalize the coords to an ellipse with center 0,0\n\n\n  var normx = (x - this.x) / this.width,\n      normy = (y - this.y) / this.height;\n  normx *= normx;\n  normy *= normy;\n  return normx + normy <= 1;\n};\n/**\n * Returns the framing rectangle of the ellipse as a Rectangle object\n *\n * @return {Rectangle} the framing rectangle\n */\n\n\nEllipse.prototype.getBounds = function () {\n  return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/math/shapes/Ellipse.js"],"names":["Rectangle","require","CONST","Ellipse","x","y","width","height","type","SHAPES","ELIP","prototype","constructor","module","exports","clone","contains","normx","normy","getBounds"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,MAA9B,EACA;AACI;AACJ;AACA;AACA;AACI,OAAKH,CAAL,GAASA,CAAC,IAAI,CAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,CAAL,GAASA,CAAC,IAAI,CAAd;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,KAAL,GAAaA,KAAK,IAAI,CAAtB;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,MAAL,GAAcA,MAAM,IAAI,CAAxB;AAEA;AACJ;AACA;AACA;AACA;;AACI,OAAKC,IAAL,GAAYN,KAAK,CAACO,MAAN,CAAaC,IAAzB;AACH;;AAEDP,OAAO,CAACQ,SAAR,CAAkBC,WAAlB,GAAgCT,OAAhC;AACAU,MAAM,CAACC,OAAP,GAAiBX,OAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACQ,SAAR,CAAkBI,KAAlB,GAA0B,YAC1B;AACI,SAAO,IAAIZ,OAAJ,CAAY,KAAKC,CAAjB,EAAoB,KAAKC,CAAzB,EAA4B,KAAKC,KAAjC,EAAwC,KAAKC,MAA7C,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACQ,SAAR,CAAkBK,QAAlB,GAA6B,UAAUZ,CAAV,EAAaC,CAAb,EAC7B;AACI,MAAI,KAAKC,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EACA;AACI,WAAO,KAAP;AACH,GAJL,CAMI;;;AACA,MAAIU,KAAK,GAAI,CAACb,CAAC,GAAG,KAAKA,CAAV,IAAe,KAAKE,KAAjC;AAAA,MACIY,KAAK,GAAI,CAACb,CAAC,GAAG,KAAKA,CAAV,IAAe,KAAKE,MADjC;AAGAU,EAAAA,KAAK,IAAIA,KAAT;AACAC,EAAAA,KAAK,IAAIA,KAAT;AAEA,SAAQD,KAAK,GAAGC,KAAR,IAAiB,CAAzB;AACH,CAfD;AAiBA;AACA;AACA;AACA;AACA;;;AACAf,OAAO,CAACQ,SAAR,CAAkBQ,SAAlB,GAA8B,YAC9B;AACI,SAAO,IAAInB,SAAJ,CAAc,KAAKI,CAAL,GAAS,KAAKE,KAA5B,EAAmC,KAAKD,CAAL,GAAS,KAAKE,MAAjD,EAAyD,KAAKD,KAA9D,EAAqE,KAAKC,MAA1E,CAAP;AACH,CAHD","sourcesContent":["var Rectangle = require('./Rectangle'),\n    CONST = require('../../const');\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the center of the ellipse\n * @param y {number} The Y coordinate of the center of the ellipse\n * @param width {number} The half width of this ellipse\n * @param height {number} The half height of this ellipse\n */\nfunction Ellipse(x, y, width, height)\n{\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = width || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = height || 0;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     */\n    this.type = CONST.SHAPES.ELIP;\n}\n\nEllipse.prototype.constructor = Ellipse;\nmodule.exports = Ellipse;\n\n/**\n * Creates a clone of this Ellipse instance\n *\n * @return {Ellipse} a copy of the ellipse\n */\nEllipse.prototype.clone = function ()\n{\n    return new Ellipse(this.x, this.y, this.width, this.height);\n};\n\n/**\n * Checks whether the x and y coordinates given are contained within this ellipse\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coords are within this ellipse\n */\nEllipse.prototype.contains = function (x, y)\n{\n    if (this.width <= 0 || this.height <= 0)\n    {\n        return false;\n    }\n\n    //normalize the coords to an ellipse with center 0,0\n    var normx = ((x - this.x) / this.width),\n        normy = ((y - this.y) / this.height);\n\n    normx *= normx;\n    normy *= normy;\n\n    return (normx + normy <= 1);\n};\n\n/**\n * Returns the framing rectangle of the ellipse as a Rectangle object\n *\n * @return {Rectangle} the framing rectangle\n */\nEllipse.prototype.getBounds = function ()\n{\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n};\n"]},"metadata":{},"sourceType":"script"}