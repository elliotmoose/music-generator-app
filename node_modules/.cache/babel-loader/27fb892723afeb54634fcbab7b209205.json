{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nexport var Panner3D = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Panner3D, _ToneAudioNode);\n\n  var _super = _createSuper(Panner3D);\n\n  function Panner3D() {\n    var _this;\n\n    _classCallCheck(this, Panner3D);\n\n    _this = _super.call(this, optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    _this.name = \"Panner3D\";\n    var options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    _this._panner = _this.input = _this.output = _this.context.createPanner(); // set some values\n\n    _this.panningModel = options.panningModel;\n    _this.maxDistance = options.maxDistance;\n    _this.distanceModel = options.distanceModel;\n    _this.coneOuterGain = options.coneOuterGain;\n    _this.coneOuterAngle = options.coneOuterAngle;\n    _this.coneInnerAngle = options.coneInnerAngle;\n    _this.refDistance = options.refDistance;\n    _this.rolloffFactor = options.rolloffFactor;\n    _this.positionX = new Param({\n      context: _this.context,\n      param: _this._panner.positionX,\n      value: options.positionX\n    });\n    _this.positionY = new Param({\n      context: _this.context,\n      param: _this._panner.positionY,\n      value: options.positionY\n    });\n    _this.positionZ = new Param({\n      context: _this.context,\n      param: _this._panner.positionZ,\n      value: options.positionZ\n    });\n    _this.orientationX = new Param({\n      context: _this.context,\n      param: _this._panner.orientationX,\n      value: options.orientationX\n    });\n    _this.orientationY = new Param({\n      context: _this.context,\n      param: _this._panner.orientationY,\n      value: options.orientationY\n    });\n    _this.orientationZ = new Param({\n      context: _this.context,\n      param: _this._panner.orientationZ,\n      value: options.orientationZ\n    });\n    return _this;\n  }\n\n  _createClass(Panner3D, [{\n    key: \"setPosition\",\n\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    value: function setPosition(x, y, z) {\n      this.positionX.value = x;\n      this.positionY.value = y;\n      this.positionZ.value = z;\n      return this;\n    }\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n\n  }, {\n    key: \"setOrientation\",\n    value: function setOrientation(x, y, z) {\n      this.orientationX.value = x;\n      this.orientationY.value = y;\n      this.orientationZ.value = z;\n      return this;\n    }\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Panner3D.prototype), \"dispose\", this).call(this);\n\n      this._panner.disconnect();\n\n      this.orientationX.dispose();\n      this.orientationY.dispose();\n      this.orientationZ.dispose();\n      this.positionX.dispose();\n      this.positionY.dispose();\n      this.positionZ.dispose();\n      return this;\n    }\n  }, {\n    key: \"panningModel\",\n    get: function get() {\n      return this._panner.panningModel;\n    },\n    set: function set(val) {\n      this._panner.panningModel = val;\n    }\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n\n  }, {\n    key: \"refDistance\",\n    get: function get() {\n      return this._panner.refDistance;\n    },\n    set: function set(val) {\n      this._panner.refDistance = val;\n    }\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n\n  }, {\n    key: \"rolloffFactor\",\n    get: function get() {\n      return this._panner.rolloffFactor;\n    },\n    set: function set(val) {\n      this._panner.rolloffFactor = val;\n    }\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n\n  }, {\n    key: \"distanceModel\",\n    get: function get() {\n      return this._panner.distanceModel;\n    },\n    set: function set(val) {\n      this._panner.distanceModel = val;\n    }\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n\n  }, {\n    key: \"coneInnerAngle\",\n    get: function get() {\n      return this._panner.coneInnerAngle;\n    },\n    set: function set(val) {\n      this._panner.coneInnerAngle = val;\n    }\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n\n  }, {\n    key: \"coneOuterAngle\",\n    get: function get() {\n      return this._panner.coneOuterAngle;\n    },\n    set: function set(val) {\n      this._panner.coneOuterAngle = val;\n    }\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n\n  }, {\n    key: \"coneOuterGain\",\n    get: function get() {\n      return this._panner.coneOuterGain;\n    },\n    set: function set(val) {\n      this._panner.coneOuterGain = val;\n    }\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n\n  }, {\n    key: \"maxDistance\",\n    get: function get() {\n      return this._panner.maxDistance;\n    },\n    set: function set(val) {\n      this._panner.maxDistance = val;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        coneInnerAngle: 360,\n        coneOuterAngle: 360,\n        coneOuterGain: 0,\n        distanceModel: \"inverse\",\n        maxDistance: 10000,\n        orientationX: 0,\n        orientationY: 0,\n        orientationZ: 0,\n        panningModel: \"equalpower\",\n        positionX: 0,\n        positionY: 0,\n        positionZ: 0,\n        refDistance: 1,\n        rolloffFactor: 1\n      });\n    }\n  }]);\n\n  return Panner3D;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/Panner3D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n        this.name = \"Panner3D\";\n        const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n        this._panner = this.input = this.output = this.context.createPanner();\n        // set some values\n        this.panningModel = options.panningModel;\n        this.maxDistance = options.maxDistance;\n        this.distanceModel = options.distanceModel;\n        this.coneOuterGain = options.coneOuterGain;\n        this.coneOuterAngle = options.coneOuterAngle;\n        this.coneInnerAngle = options.coneInnerAngle;\n        this.refDistance = options.refDistance;\n        this.rolloffFactor = options.rolloffFactor;\n        this.positionX = new Param({\n            context: this.context,\n            param: this._panner.positionX,\n            value: options.positionX,\n        });\n        this.positionY = new Param({\n            context: this.context,\n            param: this._panner.positionY,\n            value: options.positionY,\n        });\n        this.positionZ = new Param({\n            context: this.context,\n            param: this._panner.positionZ,\n            value: options.positionZ,\n        });\n        this.orientationX = new Param({\n            context: this.context,\n            param: this._panner.orientationX,\n            value: options.orientationX,\n        });\n        this.orientationY = new Param({\n            context: this.context,\n            param: this._panner.orientationY,\n            value: options.orientationY,\n        });\n        this.orientationZ = new Param({\n            context: this.context,\n            param: this._panner.orientationZ,\n            value: options.orientationZ,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            coneInnerAngle: 360,\n            coneOuterAngle: 360,\n            coneOuterGain: 0,\n            distanceModel: \"inverse\",\n            maxDistance: 10000,\n            orientationX: 0,\n            orientationY: 0,\n            orientationZ: 0,\n            panningModel: \"equalpower\",\n            positionX: 0,\n            positionY: 0,\n            positionZ: 0,\n            refDistance: 1,\n            rolloffFactor: 1,\n        });\n    }\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    setPosition(x, y, z) {\n        this.positionX.value = x;\n        this.positionY.value = y;\n        this.positionZ.value = z;\n        return this;\n    }\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n    setOrientation(x, y, z) {\n        this.orientationX.value = x;\n        this.orientationY.value = y;\n        this.orientationZ.value = z;\n        return this;\n    }\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n    get panningModel() {\n        return this._panner.panningModel;\n    }\n    set panningModel(val) {\n        this._panner.panningModel = val;\n    }\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n    get refDistance() {\n        return this._panner.refDistance;\n    }\n    set refDistance(val) {\n        this._panner.refDistance = val;\n    }\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n    get rolloffFactor() {\n        return this._panner.rolloffFactor;\n    }\n    set rolloffFactor(val) {\n        this._panner.rolloffFactor = val;\n    }\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n    get distanceModel() {\n        return this._panner.distanceModel;\n    }\n    set distanceModel(val) {\n        this._panner.distanceModel = val;\n    }\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n    get coneInnerAngle() {\n        return this._panner.coneInnerAngle;\n    }\n    set coneInnerAngle(val) {\n        this._panner.coneInnerAngle = val;\n    }\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n    get coneOuterAngle() {\n        return this._panner.coneOuterAngle;\n    }\n    set coneOuterAngle(val) {\n        this._panner.coneOuterAngle = val;\n    }\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n    get coneOuterGain() {\n        return this._panner.coneOuterGain;\n    }\n    set coneOuterGain(val) {\n        this._panner.coneOuterGain = val;\n    }\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n    get maxDistance() {\n        return this._panner.maxDistance;\n    }\n    set maxDistance(val) {\n        this._panner.maxDistance = val;\n    }\n    dispose() {\n        super.dispose();\n        this._panner.disconnect();\n        this.orientationX.dispose();\n        this.orientationY.dispose();\n        this.orientationZ.dispose();\n        this.positionX.dispose();\n        this.positionY.dispose();\n        this.positionZ.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Panner3D.js.map"]},"metadata":{},"sourceType":"module"}