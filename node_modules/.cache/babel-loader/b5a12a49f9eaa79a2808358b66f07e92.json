{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\n\nexport var Gain = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Gain, _ToneAudioNode);\n\n  var _super = _createSuper(Gain);\n\n  function Gain() {\n    var _this;\n\n    _classCallCheck(this, Gain);\n\n    _this = _super.call(this, optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    _this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n\n    _this._gainNode = _this.context.createGain(); // input = output\n\n    _this.input = _this._gainNode;\n    _this.output = _this._gainNode;\n    var options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    _this.gain = new Param({\n      context: _this.context,\n      convert: options.convert,\n      param: _this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(_assertThisInitialized(_this), \"gain\");\n    return _this;\n  }\n\n  _createClass(Gain, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(Gain.prototype), \"dispose\", this).call(this);\n\n      this._gainNode.disconnect();\n\n      this.gain.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        convert: true,\n        gain: 1,\n        units: \"gain\"\n      });\n    }\n  }]);\n\n  return Gain;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/core/context/Gain.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,KAAT,QAAsB,kBAAtB;AAEA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,aAAT,QAAoD,iBAApD;AAUA;;;;;;;;;;;;AAYG;;AACH,WAAa,IAAb;AAAA;;AAAA;;AA6BC,kBAAA;AAAA;;AAAA;;AACC,8BAAM,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAA1B;AA5BQ,UAAA,IAAA,GAAe,MAAf;AAYT;;AAEG;;AACK,UAAA,SAAA,GAAsB,MAAK,OAAL,CAAa,UAAb,EAAtB,CAYR,CAVA;;AACS,UAAA,KAAA,GAAkB,MAAK,SAAvB;AACA,UAAA,MAAA,GAAmB,MAAK,SAAxB;AAUR,QAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAApC;AAEA,UAAK,IAAL,GAAY,IAAI,KAAJ,CAAU;AACrB,MAAA,OAAO,EAAE,MAAK,OADO;AAErB,MAAA,OAAO,EAAE,OAAO,CAAC,OAFI;AAGrB,MAAA,KAAK,EAAE,MAAK,SAAL,CAAe,IAHD;AAIrB,MAAA,KAAK,EAAE,OAAO,CAAC,KAJM;AAKrB,MAAA,KAAK,EAAE,OAAO,CAAC,IALM;AAMrB,MAAA,QAAQ,EAAE,OAAO,CAAC,QANG;AAOrB,MAAA,QAAQ,EAAE,OAAO,CAAC;AAPG,KAAV,CAAZ;AASA,IAAA,QAAQ,gCAAO,MAAP,CAAR;AAbD;AAcC;;AA3CF;AAAA;;AAqDC;;AAEG;AAvDJ,8BAwDQ;AACN;;AACA,WAAK,SAAL,CAAe,UAAf;;AACA,WAAK,IAAL,CAAU,OAAV;AACA,aAAO,IAAP;AACA;AA7DF;AAAA;AAAA,kCA6CmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,OAAO,EAAE,IADwC;AAEjD,QAAA,IAAI,EAAE,CAF2C;AAGjD,QAAA,KAAK,EAAE;AAH0C,OAA3C,CAAP;AAKA;AAnDF;;AAAA;AAAA,EAAyF,aAAzF","sourceRoot":"","sourcesContent":["import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n        this.name = \"Gain\";\n        /**\n         * The wrapped GainNode.\n         */\n        this._gainNode = this.context.createGain();\n        // input = output\n        this.input = this._gainNode;\n        this.output = this._gainNode;\n        const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n        this.gain = new Param({\n            context: this.context,\n            convert: options.convert,\n            param: this._gainNode.gain,\n            units: options.units,\n            value: options.gain,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        readOnly(this, \"gain\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            gain: 1,\n            units: \"gain\",\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._gainNode.disconnect();\n        this.gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Gain.js.map"]},"metadata":{},"sourceType":"module"}