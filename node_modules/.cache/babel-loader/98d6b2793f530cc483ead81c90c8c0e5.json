{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\n\nexport var Instrument = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Instrument, _ToneAudioNode);\n\n  var _super = _createSuper(Instrument);\n\n  function Instrument() {\n    var _this;\n\n    _classCallCheck(this, Instrument);\n\n    _this = _super.call(this, optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n\n    _this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n\n    _this._synced = false;\n    _this._original_triggerAttack = _this.triggerAttack;\n    _this._original_triggerRelease = _this.triggerRelease;\n    var options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    return _this;\n  }\n\n  _createClass(Instrument, [{\n    key: \"sync\",\n\n    /**\n     * Sync the instrument to the Transport. All subsequent calls of\n     * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n     * @example\n     * const fmSynth = new Tone.FMSynth().toDestination();\n     * fmSynth.volume.value = -6;\n     * fmSynth.sync();\n     * // schedule 3 notes when the transport first starts\n     * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n     * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n     * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n     * // start the transport to hear the notes\n     * Tone.Transport.start();\n     */\n    value: function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 1);\n\n        this._syncMethod(\"triggerRelease\", 0);\n      }\n\n      return this;\n    }\n    /**\n     * set _sync\n     */\n\n  }, {\n    key: \"_syncState\",\n    value: function _syncState() {\n      var changed = false;\n\n      if (!this._synced) {\n        this._synced = true;\n        changed = true;\n      }\n\n      return changed;\n    }\n    /**\n     * Wrap the given method so that it can be synchronized\n     * @param method Which method to wrap and sync\n     * @param  timePosition What position the time argument appears in\n     */\n\n  }, {\n    key: \"_syncMethod\",\n    value: function _syncMethod(method, timePosition) {\n      var _this2 = this;\n\n      var originalMethod = this[\"_original_\" + method] = this[method];\n\n      this[method] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var time = args[timePosition];\n\n        var id = _this2.context.transport.schedule(function (t) {\n          args[timePosition] = t;\n          originalMethod.apply(_this2, args);\n        }, time);\n\n        _this2._scheduledEvents.push(id);\n      };\n    }\n    /**\n     * Unsync the instrument from the Transport\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      var _this3 = this;\n\n      this._scheduledEvents.forEach(function (id) {\n        return _this3.context.transport.clear(id);\n      });\n\n      this._scheduledEvents = [];\n\n      if (this._synced) {\n        this._synced = false;\n        this.triggerAttack = this._original_triggerAttack;\n        this.triggerRelease = this._original_triggerRelease;\n      }\n\n      return this;\n    }\n    /**\n     * Trigger the attack and then the release after the duration.\n     * @param  note     The note to trigger.\n     * @param  duration How long the note should be held for before\n     *                         triggering the release. This value must be greater than 0.\n     * @param time  When the note should be triggered.\n     * @param  velocity The velocity the note should be triggered at.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger \"C4\" for the duration of an 8th note\n     * synth.triggerAttackRelease(\"C4\", \"8n\");\n     */\n\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(note, duration, time, velocity) {\n      var computedTime = this.toSeconds(time);\n      var computedDuration = this.toSeconds(duration);\n      this.triggerAttack(note, computedTime, velocity);\n      this.triggerRelease(computedTime + computedDuration);\n      return this;\n    }\n    /**\n     * clean up\n     * @returns {Instrument} this\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Instrument.prototype), \"dispose\", this).call(this);\n\n      this._volume.dispose();\n\n      this.unsync();\n      this._scheduledEvents = [];\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        volume: 0\n      });\n    }\n  }]);\n\n  return Instrument;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../Tone/instrument/Instrument.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\nexport class Instrument extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Instrument.getDefaults(), arguments));\n        /**\n         * Keep track of all events scheduled to the transport\n         * when the instrument is 'synced'\n         */\n        this._scheduledEvents = [];\n        /**\n         * If the instrument is currently synced\n         */\n        this._synced = false;\n        this._original_triggerAttack = this.triggerAttack;\n        this._original_triggerRelease = this.triggerRelease;\n        const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            volume: 0,\n        });\n    }\n    /**\n     * Sync the instrument to the Transport. All subsequent calls of\n     * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n     * @example\n     * const fmSynth = new Tone.FMSynth().toDestination();\n     * fmSynth.volume.value = -6;\n     * fmSynth.sync();\n     * // schedule 3 notes when the transport first starts\n     * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n     * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n     * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n     * // start the transport to hear the notes\n     * Tone.Transport.start();\n     */\n    sync() {\n        if (this._syncState()) {\n            this._syncMethod(\"triggerAttack\", 1);\n            this._syncMethod(\"triggerRelease\", 0);\n        }\n        return this;\n    }\n    /**\n     * set _sync\n     */\n    _syncState() {\n        let changed = false;\n        if (!this._synced) {\n            this._synced = true;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Wrap the given method so that it can be synchronized\n     * @param method Which method to wrap and sync\n     * @param  timePosition What position the time argument appears in\n     */\n    _syncMethod(method, timePosition) {\n        const originalMethod = this[\"_original_\" + method] = this[method];\n        this[method] = (...args) => {\n            const time = args[timePosition];\n            const id = this.context.transport.schedule((t) => {\n                args[timePosition] = t;\n                originalMethod.apply(this, args);\n            }, time);\n            this._scheduledEvents.push(id);\n        };\n    }\n    /**\n     * Unsync the instrument from the Transport\n     */\n    unsync() {\n        this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n        this._scheduledEvents = [];\n        if (this._synced) {\n            this._synced = false;\n            this.triggerAttack = this._original_triggerAttack;\n            this.triggerRelease = this._original_triggerRelease;\n        }\n        return this;\n    }\n    /**\n     * Trigger the attack and then the release after the duration.\n     * @param  note     The note to trigger.\n     * @param  duration How long the note should be held for before\n     *                         triggering the release. This value must be greater than 0.\n     * @param time  When the note should be triggered.\n     * @param  velocity The velocity the note should be triggered at.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger \"C4\" for the duration of an 8th note\n     * synth.triggerAttackRelease(\"C4\", \"8n\");\n     */\n    triggerAttackRelease(note, duration, time, velocity) {\n        const computedTime = this.toSeconds(time);\n        const computedDuration = this.toSeconds(duration);\n        this.triggerAttack(note, computedTime, velocity);\n        this.triggerRelease(computedTime + computedDuration);\n        return this;\n    }\n    /**\n     * clean up\n     * @returns {Instrument} this\n     */\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n        this.unsync();\n        this._scheduledEvents = [];\n        return this;\n    }\n}\n//# sourceMappingURL=Instrument.js.map"]},"metadata":{},"sourceType":"module"}