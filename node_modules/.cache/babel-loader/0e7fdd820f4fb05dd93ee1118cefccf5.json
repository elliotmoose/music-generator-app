{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nexport var ToneConstantSource = /*#__PURE__*/function (_OneShotSource) {\n  _inherits(ToneConstantSource, _OneShotSource);\n\n  var _super = _createSuper(ToneConstantSource);\n\n  function ToneConstantSource() {\n    var _this;\n\n    _classCallCheck(this, ToneConstantSource);\n\n    _this = _super.call(this, optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    _this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    _this._source = _this.context.createConstantSource();\n    var options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(_this._source, _this._gainNode);\n    _this.offset = new Param({\n      context: _this.context,\n      convert: options.convert,\n      param: _this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    return _this;\n  }\n\n  _createClass(ToneConstantSource, [{\n    key: \"start\",\n\n    /**\n     * Start the source node at the given time\n     * @param  time When to start the source\n     */\n    value: function start(time) {\n      var computedTime = this.toSeconds(time);\n      this.log(\"start\", computedTime);\n\n      this._startGain(computedTime);\n\n      this._source.start(computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"_stopSource\",\n    value: function _stopSource(time) {\n      this._source.stop(time);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneConstantSource.prototype), \"dispose\", this).call(this);\n\n      if (this.state === \"started\") {\n        this.stop();\n      }\n\n      this._source.disconnect();\n\n      this.offset.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(OneShotSource.getDefaults(), {\n        convert: true,\n        offset: 1,\n        units: \"number\"\n      });\n    }\n  }]);\n\n  return ToneConstantSource;\n}(OneShotSource);","map":{"version":3,"sources":["../../../Tone/signal/ToneConstantSource.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,KAAT,QAAsB,uBAAtB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,aAAT,QAAoD,yBAApD;AAUA;;;;AAIG;;AACH,WAAa,kBAAb;AAAA;;AAAA;;AAmBC,gCAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAA1B;AAnBQ,UAAA,IAAA,GAAe,oBAAf;AAET;;AAEG;;AACK,UAAA,OAAA,GAAU,MAAK,OAAL,CAAa,oBAAb,EAAV;AAeP,QAAM,OAAO,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAApC;AAEA,IAAA,OAAO,CAAC,MAAK,OAAN,EAAe,MAAK,SAApB,CAAP;AAEA,UAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AACvB,MAAA,OAAO,EAAE,MAAK,OADS;AAEvB,MAAA,OAAO,EAAE,OAAO,CAAC,OAFM;AAGvB,MAAA,KAAK,EAAE,MAAK,OAAL,CAAa,MAHG;AAIvB,MAAA,KAAK,EAAE,OAAO,CAAC,KAJQ;AAKvB,MAAA,KAAK,EAAE,OAAO,CAAC,MALQ;AAMvB,MAAA,QAAQ,EAAE,OAAO,CAAC,QANK;AAOvB,MAAA,QAAQ,EAAE,OAAO,CAAC;AAPK,KAAV,CAAd;AAPD;AAgBC;;AAnCF;AAAA;;AA6CC;;;AAGG;AAhDJ,0BAiDO,IAjDP,EAiDkB;AAChB,UAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;AACA,WAAK,GAAL,CAAS,OAAT,EAAkB,YAAlB;;AACA,WAAK,UAAL,CAAgB,YAAhB;;AACA,WAAK,OAAL,CAAa,KAAb,CAAmB,YAAnB;;AACA,aAAO,IAAP;AACA;AAvDF;AAAA;AAAA,gCAyDuB,IAzDvB,EAyDqC;AACnC,WAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACA;AA3DF;AAAA;AAAA,8BA6DQ;AACN;;AACA,UAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC7B,aAAK,IAAL;AACA;;AACD,WAAK,OAAL,CAAa,UAAb;;AACA,WAAK,MAAL,CAAY,OAAZ;AACA,aAAO,IAAP;AACA;AArEF;AAAA;AAAA,kCAqCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,OAAO,EAAE,IADwC;AAEjD,QAAA,MAAM,EAAE,CAFyC;AAGjD,QAAA,KAAK,EAAE;AAH0C,OAA3C,CAAP;AAKA;AA3CF;;AAAA;AAAA,EAA8E,aAA9E","sourceRoot":"","sourcesContent":["import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n    constructor() {\n        super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n        this.name = \"ToneConstantSource\";\n        /**\n         * The signal generator\n         */\n        this._source = this.context.createConstantSource();\n        const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n        connect(this._source, this._gainNode);\n        this.offset = new Param({\n            context: this.context,\n            convert: options.convert,\n            param: this._source.offset,\n            units: options.units,\n            value: options.offset,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            convert: true,\n            offset: 1,\n            units: \"number\",\n        });\n    }\n    /**\n     * Start the source node at the given time\n     * @param  time When to start the source\n     */\n    start(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._source.start(computedTime);\n        return this;\n    }\n    _stopSource(time) {\n        this._source.stop(time);\n    }\n    dispose() {\n        super.dispose();\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._source.disconnect();\n        this.offset.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneConstantSource.js.map"]},"metadata":{},"sourceType":"module"}