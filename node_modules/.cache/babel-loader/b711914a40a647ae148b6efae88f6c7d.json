{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar InstrumentMaps_1 = require(\"./InstrumentMaps\");\n/**\n * @hidden\n */\n\n\nvar privateTrackMap = new WeakMap();\n/**\n * Describes the midi instrument of a track\n */\n\nvar Instrument =\n/** @class */\nfunction () {\n  /**\n   * @param trackData\n   * @param track\n   */\n  function Instrument(trackData, track) {\n    /**\n     * The instrument number\n     */\n    this.number = 0;\n    privateTrackMap.set(this, track);\n    this.number = 0;\n\n    if (trackData) {\n      var programChange = trackData.find(function (e) {\n        return e.type === \"programChange\";\n      });\n\n      if (programChange) {\n        this.number = programChange.programNumber;\n      }\n    }\n  }\n\n  Object.defineProperty(Instrument.prototype, \"name\", {\n    /**\n     * The common name of the instrument\n     */\n    get: function get() {\n      if (this.percussion) {\n        return InstrumentMaps_1.DrumKitByPatchID[this.number];\n      } else {\n        return InstrumentMaps_1.instrumentByPatchID[this.number];\n      }\n    },\n    set: function set(n) {\n      var patchNumber = InstrumentMaps_1.instrumentByPatchID.indexOf(n);\n\n      if (patchNumber !== -1) {\n        this.number = patchNumber;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"family\", {\n    /**\n     * The instrument family, e.g. \"piano\".\n     */\n    get: function get() {\n      if (this.percussion) {\n        return \"drums\";\n      } else {\n        return InstrumentMaps_1.InstrumentFamilyByID[Math.floor(this.number / 8)];\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"percussion\", {\n    /**\n     * If the instrument is a percussion instrument\n     */\n    get: function get() {\n      var track = privateTrackMap.get(this);\n      return track.channel === 9;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Convert it to JSON form\n   */\n\n  Instrument.prototype.toJSON = function () {\n    return {\n      family: this.family,\n      name: this.name,\n      number: this.number\n    };\n  };\n  /**\n   * Convert from JSON form\n   */\n\n\n  Instrument.prototype.fromJSON = function (json) {\n    this.number = json.number;\n  };\n\n  return Instrument;\n}();\n\nexports.Instrument = Instrument;","map":{"version":3,"sources":["../src/Instrument.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAGA;;AAEG;;;AACH,IAAM,eAAe,GAAG,IAAI,OAAJ,EAAxB;AAEA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAOC;;;AAGG;AACH,WAAA,UAAA,CAAY,SAAZ,EAAsC,KAAtC,EAAkD;AATlD;;AAEG;AACH,SAAA,MAAA,GAAS,CAAT;AAQC,IAAA,eAAe,CAAC,GAAhB,CAAoB,IAApB,EAA0B,KAA1B;AACA,SAAK,MAAL,GAAc,CAAd;;AACA,QAAI,SAAJ,EAAe;AACd,UAAM,aAAa,GAAG,SAAS,CAAC,IAAV,CAAe,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,IAAF,KAAA,eAAA;AAA0B,OAA9C,CAAtB;;AACA,UAAI,aAAJ,EAAmB;AAClB,aAAK,MAAL,GAAc,aAAa,CAAC,aAA5B;AACA;AACD;AACD;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAHR;;AAEG;SACH,eAAA;AACC,UAAI,KAAK,UAAT,EAAqB;AACpB,eAAO,gBAAA,CAAA,gBAAA,CAAiB,KAAK,MAAtB,CAAP;AACA,OAFD,MAEO;AACN,eAAO,gBAAA,CAAA,mBAAA,CAAoB,KAAK,MAAzB,CAAP;AACA;AACD,KANO;SAQR,aAAS,CAAT,EAAkB;AACjB,UAAM,WAAW,GAAG,gBAAA,CAAA,mBAAA,CAAoB,OAApB,CAA4B,CAA5B,CAApB;;AACA,UAAI,WAAW,KAAK,CAAC,CAArB,EAAwB;AACvB,aAAK,MAAL,GAAc,WAAd;AACA;AACD,KAbO;oBAAA;;AAAA,GAAR;AAkBA,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AAHV;;AAEG;SACH,eAAA;AACC,UAAI,KAAK,UAAT,EAAqB;AACpB,eAAO,OAAP;AACA,OAFD,MAEO;AACN,eAAO,gBAAA,CAAA,oBAAA,CAAqB,IAAI,CAAC,KAAL,CAAW,KAAK,MAAL,GAAc,CAAzB,CAArB,CAAP;AACA;AACD,KANS;oBAAA;;AAAA,GAAV;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;AAEG;SACH,eAAA;AACC,UAAM,KAAK,GAAG,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAd;AACA,aAAO,KAAK,CAAC,OAAN,KAAkB,CAAzB;AACA,KAHa;oBAAA;;AAAA,GAAd;AAKA;;AAEG;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACC,WAAO;AACN,MAAA,MAAM,EAAE,KAAK,MADP;AAEN,MAAA,IAAI,EAAE,KAAK,IAFL;AAGN,MAAA,MAAM,EAAE,KAAK;AAHP,KAAP;AAKA,GAND;AAQA;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAA6B;AAC5B,SAAK,MAAL,GAAc,IAAI,CAAC,MAAnB;AACA,GAFD;;AAGD,SAAA,UAAA;AAAC,CA7ED,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstrumentMaps_1 = require(\"./InstrumentMaps\");\n/**\n * @hidden\n */\nvar privateTrackMap = new WeakMap();\n/**\n * Describes the midi instrument of a track\n */\nvar Instrument = /** @class */ (function () {\n    /**\n     * @param trackData\n     * @param track\n     */\n    function Instrument(trackData, track) {\n        /**\n         * The instrument number\n         */\n        this.number = 0;\n        privateTrackMap.set(this, track);\n        this.number = 0;\n        if (trackData) {\n            var programChange = trackData.find(function (e) { return e.type === \"programChange\"; });\n            if (programChange) {\n                this.number = programChange.programNumber;\n            }\n        }\n    }\n    Object.defineProperty(Instrument.prototype, \"name\", {\n        /**\n         * The common name of the instrument\n         */\n        get: function () {\n            if (this.percussion) {\n                return InstrumentMaps_1.DrumKitByPatchID[this.number];\n            }\n            else {\n                return InstrumentMaps_1.instrumentByPatchID[this.number];\n            }\n        },\n        set: function (n) {\n            var patchNumber = InstrumentMaps_1.instrumentByPatchID.indexOf(n);\n            if (patchNumber !== -1) {\n                this.number = patchNumber;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instrument.prototype, \"family\", {\n        /**\n         * The instrument family, e.g. \"piano\".\n         */\n        get: function () {\n            if (this.percussion) {\n                return \"drums\";\n            }\n            else {\n                return InstrumentMaps_1.InstrumentFamilyByID[Math.floor(this.number / 8)];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instrument.prototype, \"percussion\", {\n        /**\n         * If the instrument is a percussion instrument\n         */\n        get: function () {\n            var track = privateTrackMap.get(this);\n            return track.channel === 9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Convert it to JSON form\n     */\n    Instrument.prototype.toJSON = function () {\n        return {\n            family: this.family,\n            name: this.name,\n            number: this.number,\n        };\n    };\n    /**\n     * Convert from JSON form\n     */\n    Instrument.prototype.fromJSON = function (json) {\n        this.number = json.number;\n    };\n    return Instrument;\n}());\nexports.Instrument = Instrument;\n//# sourceMappingURL=Instrument.js.map"]},"metadata":{},"sourceType":"script"}