{"ast":null,"code":"import _slicedToArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\n\nexport var ToneAudioBuffers = /*#__PURE__*/function (_Tone) {\n  _inherits(ToneAudioBuffers, _Tone);\n\n  var _super = _createSuper(ToneAudioBuffers);\n\n  function ToneAudioBuffers() {\n    var _this;\n\n    _classCallCheck(this, ToneAudioBuffers);\n\n    _this = _super.call(this);\n    _this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    _this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    _this._loadingCount = 0;\n    var options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    _this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(function (name) {\n      _this._loadingCount++;\n      var url = options.urls[name];\n\n      _this.add(name, url, _this._bufferLoaded.bind(_assertThisInitialized(_this), options.onload), options.onerror);\n    });\n    return _this;\n  }\n\n  _createClass(ToneAudioBuffers, [{\n    key: \"has\",\n\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param  name  The key or index of the buffer.\n     */\n    value: function has(name) {\n      return this._buffers.has(name.toString());\n    }\n    /**\n     * Get a buffer by name. If an array was loaded,\n     * then use the array index.\n     * @param  name  The key or index of the buffer.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      assert(this.has(name), \"ToneAudioBuffers has no buffer named: \".concat(name));\n      return this._buffers.get(name.toString());\n    }\n    /**\n     * A buffer was loaded. decrement the counter.\n     */\n\n  }, {\n    key: \"_bufferLoaded\",\n    value: function _bufferLoaded(callback) {\n      this._loadingCount--;\n\n      if (this._loadingCount === 0 && callback) {\n        callback();\n      }\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n\n  }, {\n    key: \"add\",\n\n    /**\n     * Add a buffer by name and url to the Buffers\n     * @param  name      A unique name to give the buffer\n     * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     * @param  onerror  Invoked if the buffer can't be loaded\n     */\n    value: function add(name, url) {\n      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noOp;\n      var onerror = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noOp;\n\n      if (isString(url)) {\n        this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n      } else {\n        this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneAudioBuffers.prototype), \"dispose\", this).call(this);\n\n      this._buffers.forEach(function (buffer) {\n        return buffer.dispose();\n      });\n\n      this._buffers.clear();\n\n      return this;\n    }\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return Array.from(this._buffers).every(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            buffer = _ref2[1];\n\n        return buffer.loaded;\n      });\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        baseUrl: \"\",\n        onerror: noOp,\n        onload: noOp,\n        urls: {}\n      };\n    }\n  }]);\n\n  return ToneAudioBuffers;\n}(Tone);","map":{"version":3,"sources":["../../../../Tone/core/context/ToneAudioBuffers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n    constructor() {\n        super();\n        this.name = \"ToneAudioBuffers\";\n        /**\n         * All of the buffers\n         */\n        this._buffers = new Map();\n        /**\n         * Keep track of the number of loaded buffers\n         */\n        this._loadingCount = 0;\n        const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n        this.baseUrl = options.baseUrl;\n        // add each one\n        Object.keys(options.urls).forEach(name => {\n            this._loadingCount++;\n            const url = options.urls[name];\n            this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n        });\n    }\n    static getDefaults() {\n        return {\n            baseUrl: \"\",\n            onerror: noOp,\n            onload: noOp,\n            urls: {},\n        };\n    }\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param  name  The key or index of the buffer.\n     */\n    has(name) {\n        return this._buffers.has(name.toString());\n    }\n    /**\n     * Get a buffer by name. If an array was loaded,\n     * then use the array index.\n     * @param  name  The key or index of the buffer.\n     */\n    get(name) {\n        assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n        return this._buffers.get(name.toString());\n    }\n    /**\n     * A buffer was loaded. decrement the counter.\n     */\n    _bufferLoaded(callback) {\n        this._loadingCount--;\n        if (this._loadingCount === 0 && callback) {\n            callback();\n        }\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n    get loaded() {\n        return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n    }\n    /**\n     * Add a buffer by name and url to the Buffers\n     * @param  name      A unique name to give the buffer\n     * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     * @param  onerror  Invoked if the buffer can't be loaded\n     */\n    add(name, url, callback = noOp, onerror = noOp) {\n        if (isString(url)) {\n            this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n        }\n        else {\n            this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n        }\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._buffers.forEach(buffer => buffer.dispose());\n        this._buffers.clear();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneAudioBuffers.js.map"]},"metadata":{},"sourceType":"module"}