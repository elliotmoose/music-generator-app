{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport var createNativeWaveShaperNodeFactory = function createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) {\n  return function (nativeContext, options) {\n    var nativeWaveShaperNode = nativeContext.createWaveShaper();\n    /*\n     * Bug #119: Safari does not correctly map the values.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here.\n     */\n\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    var curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve); // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    } // Only values of type Float32Array can be assigned to the curve property.\n\n\n    assignNativeAudioNodeOption(nativeWaveShaperNode, {\n      curve: curve\n    }, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    var disconnectNativeAudioBufferSourceNode = null;\n    var isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', function (get) {\n      return function () {\n        return get.call(nativeWaveShaperNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(nativeWaveShaperNode, value);\n\n        if (isConnected) {\n          if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n          } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n\n        return value;\n      };\n    });\n\n    var whenConnected = function whenConnected() {\n      isConnected = true;\n\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-wave-shaper-node-factory.ts"],"names":[],"mappings":"AAAA,SAAS,2BAAT,QAA4C,4CAA5C;AACA,SAAS,4BAAT,QAA6C,6CAA7C;AAGA,OAAO,IAAM,iCAAiC,GAAwC,SAAzE,iCAAyE,CAClF,0CADkF,EAElF,uBAFkF,EAGlF,+BAHkF,EAIlF,SAJkF,EAKlF,kBALkF,EAMlF,6BANkF,EAOlF,kBAPkF,EAQlF;AACA,SAAO,UAAC,aAAD,EAAgB,OAAhB,EAA2B;AAC9B,QAAM,oBAAoB,GAAG,aAAa,CAAC,gBAAd,EAA7B;AAEA;;;;AAIG;;AACH,QAAI,6BAA6B,KAAK,IAAlC,IAA0C,6BAA6B,CAAC,IAA9B,KAAuC,oBAArF,EAA2G;AACvG,aAAO,+BAA+B,CAAC,aAAD,EAAgB,OAAhB,CAAtC;AACH;;AAED,IAAA,4BAA4B,CAAC,oBAAD,EAAuB,OAAvB,CAA5B;AAEA,QAAM,KAAK,GAAG,OAAO,CAAC,KAAR,KAAkB,IAAlB,IAA0B,OAAO,CAAC,KAAR,YAAyB,YAAnD,GAAkE,OAAO,CAAC,KAA1E,GAAkF,IAAI,YAAJ,CAAiB,OAAO,CAAC,KAAzB,CAAhG,CAd8B,CAgB9B;;AACA,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,CAAC,MAAN,GAAe,CAArC,EAAwC;AACpC,YAAM,uBAAuB,EAA7B;AACH,KAnB6B,CAqB9B;;;AACA,IAAA,2BAA2B,CAAC,oBAAD,EAAuB;AAAE,MAAA,KAAK,EAAL;AAAF,KAAvB,EAAkC,OAAlC,CAA3B;AACA,IAAA,2BAA2B,CAAC,oBAAD,EAAuB,OAAvB,EAAgC,YAAhC,CAA3B;AAEA,QAAI,qCAAqC,GAAwB,IAAjE;AACA,QAAI,WAAW,GAAG,KAAlB;AAEA,IAAA,kBAAkB,CACd,oBADc,EAEd,OAFc,EAGd,UAAC,GAAD;AAAA,aAAS;AAAA,eAAM,GAAG,CAAC,IAAJ,CAAS,oBAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAAC,GAAD;AAAA,aAAS,UAAC,KAAD,EAAU;AACf,QAAA,GAAG,CAAC,IAAJ,CAAS,oBAAT,EAA+B,KAA/B;;AAEA,YAAI,WAAJ,EAAiB;AACb,cAAI,SAAS,CAAC,KAAD,CAAT,IAAoB,qCAAqC,KAAK,IAAlE,EAAwE;AACpE,YAAA,qCAAqC,GAAG,0CAA0C,CAC9E,aAD8E,EAE9E,oBAF8E,CAAlF;AAIH,WALD,MAKO,IAAI,CAAC,SAAS,CAAC,KAAD,CAAV,IAAqB,qCAAqC,KAAK,IAAnE,EAAyE;AAC5E,YAAA,qCAAqC;AACrC,YAAA,qCAAqC,GAAG,IAAxC;AACH;AACJ;;AAED,eAAO,KAAP;AACH,OAhBD;AAAA,KAJc,CAAlB;;AAuBA,QAAM,aAAa,GAAG,SAAhB,aAAgB,GAAK;AACvB,MAAA,WAAW,GAAG,IAAd;;AAEA,UAAI,SAAS,CAAC,oBAAoB,CAAC,KAAtB,CAAb,EAA2C;AACvC,QAAA,qCAAqC,GAAG,0CAA0C,CAAC,aAAD,EAAgB,oBAAhB,CAAlF;AACH;AACJ,KAND;;AAOA,QAAM,gBAAgB,GAAG,SAAnB,gBAAmB,GAAK;AAC1B,MAAA,WAAW,GAAG,KAAd;;AAEA,UAAI,qCAAqC,KAAK,IAA9C,EAAoD;AAChD,QAAA,qCAAqC;AACrC,QAAA,qCAAqC,GAAG,IAAxC;AACH;AACJ,KAPD;;AASA,WAAO,kBAAkB,CAAC,oBAAD,EAAuB,aAAvB,EAAsC,gBAAtC,CAAzB;AACH,GApED;AAqEH,CA9EM","sourceRoot":"","sourcesContent":["import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = nativeContext.createWaveShaper();\n        /*\n         * Bug #119: Safari does not correctly map the values.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n        // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        // Only values of type Float32Array can be assigned to the curve property.\n        assignNativeAudioNodeOption(nativeWaveShaperNode, { curve }, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n                }\n                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                    disconnectNativeAudioBufferSourceNode();\n                    disconnectNativeAudioBufferSourceNode = null;\n                }\n            }\n            return value;\n        });\n        const whenConnected = () => {\n            isConnected = true;\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-wave-shaper-node-factory.js.map"]},"metadata":{},"sourceType":"module"}