{"ast":null,"code":"var utils = require('../../utils'),\n    math = require('../../math'),\n    CONST = require('../../const'),\n    ObjectRenderer = require('../../renderers/webgl/utils/ObjectRenderer'),\n    WebGLRenderer = require('../../renderers/webgl/WebGLRenderer'),\n    WebGLGraphicsData = require('./WebGLGraphicsData'),\n    earcut = require('earcut');\n/**\n * Renders the graphics object.\n *\n * @class\n * @private\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n * @param renderer {WebGLRenderer} The renderer this object renderer works for.\n */\n\n\nfunction GraphicsRenderer(renderer) {\n  ObjectRenderer.call(this, renderer);\n  this.graphicsDataPool = [];\n  this.primitiveShader = null;\n  this.complexPrimitiveShader = null;\n  /**\n   * This is the maximum number of points a poly can contain before it is rendered as a complex polygon (using the stencil buffer)\n   * @type {Number}\n   */\n\n  this.maximumSimplePolySize = 200;\n}\n\nGraphicsRenderer.prototype = Object.create(ObjectRenderer.prototype);\nGraphicsRenderer.prototype.constructor = GraphicsRenderer;\nmodule.exports = GraphicsRenderer;\nWebGLRenderer.registerPlugin('graphics', GraphicsRenderer);\n/**\n * Called when there is a WebGL context change\n *\n * @private\n *\n */\n\nGraphicsRenderer.prototype.onContextChange = function () {};\n/**\n * Destroys this renderer.\n *\n */\n\n\nGraphicsRenderer.prototype.destroy = function () {\n  ObjectRenderer.prototype.destroy.call(this);\n\n  for (var i = 0; i < this.graphicsDataPool.length; ++i) {\n    this.graphicsDataPool[i].destroy();\n  }\n\n  this.graphicsDataPool = null;\n};\n/**\n * Renders a graphics object.\n *\n * @param graphics {Graphics} The graphics object to render.\n */\n\n\nGraphicsRenderer.prototype.render = function (graphics) {\n  var renderer = this.renderer;\n  var gl = renderer.gl;\n  var shader = renderer.shaderManager.plugins.primitiveShader,\n      webGLData;\n\n  if (graphics.dirty) {\n    this.updateGraphics(graphics, gl);\n  }\n\n  var webGL = graphics._webGL[gl.id]; // This  could be speeded up for sure!\n\n  renderer.blendModeManager.setBlendMode(graphics.blendMode); //    var matrix =  graphics.worldTransform.clone();\n  //    var matrix =  renderer.currentRenderTarget.projectionMatrix.clone();\n  //    matrix.append(graphics.worldTransform);\n\n  for (var i = 0; i < webGL.data.length; i++) {\n    if (webGL.data[i].mode === 1) {\n      webGLData = webGL.data[i];\n      renderer.stencilManager.pushStencil(graphics, webGLData, renderer);\n      gl.uniform1f(renderer.shaderManager.complexPrimitiveShader.uniforms.alpha._location, graphics.worldAlpha * webGLData.alpha); // render quad..\n\n      gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, (webGLData.indices.length - 4) * 2);\n      renderer.stencilManager.popStencil(graphics, webGLData, renderer);\n    } else {\n      webGLData = webGL.data[i];\n      shader = renderer.shaderManager.primitiveShader;\n      renderer.shaderManager.setShader(shader); //activatePrimitiveShader();\n\n      gl.uniformMatrix3fv(shader.uniforms.translationMatrix._location, false, graphics.worldTransform.toArray(true));\n      gl.uniformMatrix3fv(shader.uniforms.projectionMatrix._location, false, renderer.currentRenderTarget.projectionMatrix.toArray(true));\n      gl.uniform3fv(shader.uniforms.tint._location, utils.hex2rgb(graphics.tint));\n      gl.uniform1f(shader.uniforms.alpha._location, graphics.worldAlpha);\n      gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);\n      gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);\n      gl.vertexAttribPointer(shader.attributes.aColor, 4, gl.FLOAT, false, 4 * 6, 2 * 4); // set the index buffer!\n\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);\n      gl.drawElements(gl.TRIANGLE_STRIP, webGLData.indices.length, gl.UNSIGNED_SHORT, 0);\n    }\n  }\n};\n/**\n * Updates the graphics object\n *\n * @private\n * @param graphicsData {Graphics} The graphics object to update\n */\n\n\nGraphicsRenderer.prototype.updateGraphics = function (graphics) {\n  var gl = this.renderer.gl; // get the contexts graphics object\n\n  var webGL = graphics._webGL[gl.id]; // if the graphics object does not exist in the webGL context time to create it!\n\n  if (!webGL) {\n    webGL = graphics._webGL[gl.id] = {\n      lastIndex: 0,\n      data: [],\n      gl: gl\n    };\n  } // flag the graphics as not dirty as we are about to update it...\n\n\n  graphics.dirty = false;\n  var i; // if the user cleared the graphics object we will need to clear every object\n\n  if (graphics.clearDirty) {\n    graphics.clearDirty = false; // loop through and return all the webGLDatas to the object pool so than can be reused later on\n\n    for (i = 0; i < webGL.data.length; i++) {\n      var graphicsData = webGL.data[i];\n      graphicsData.reset();\n      this.graphicsDataPool.push(graphicsData);\n    } // clear the array and reset the index..\n\n\n    webGL.data = [];\n    webGL.lastIndex = 0;\n  }\n\n  var webGLData; // loop through the graphics datas and construct each one..\n  // if the object is a complex fill then the new stencil buffer technique will be used\n  // other wise graphics objects will be pushed into a batch..\n\n  for (i = webGL.lastIndex; i < graphics.graphicsData.length; i++) {\n    var data = graphics.graphicsData[i];\n\n    if (data.type === CONST.SHAPES.POLY) {\n      // need to add the points the the graphics object..\n      data.points = data.shape.points.slice();\n\n      if (data.shape.closed) {\n        // close the poly if the value is true!\n        if (data.points[0] !== data.points[data.points.length - 2] || data.points[1] !== data.points[data.points.length - 1]) {\n          data.points.push(data.points[0], data.points[1]);\n        }\n      } // MAKE SURE WE HAVE THE CORRECT TYPE..\n\n\n      if (data.fill) {\n        if (data.points.length >= 6) {\n          if (data.points.length < this.maximumSimplePolySize * 2) {\n            webGLData = this.switchMode(webGL, 0);\n            var canDrawUsingSimple = this.buildPoly(data, webGLData);\n\n            if (!canDrawUsingSimple) {\n              webGLData = this.switchMode(webGL, 1);\n              this.buildComplexPoly(data, webGLData);\n            }\n          } else {\n            webGLData = this.switchMode(webGL, 1);\n            this.buildComplexPoly(data, webGLData);\n          }\n        }\n      }\n\n      if (data.lineWidth > 0) {\n        webGLData = this.switchMode(webGL, 0);\n        this.buildLine(data, webGLData);\n      }\n    } else {\n      webGLData = this.switchMode(webGL, 0);\n\n      if (data.type === CONST.SHAPES.RECT) {\n        this.buildRectangle(data, webGLData);\n      } else if (data.type === CONST.SHAPES.CIRC || data.type === CONST.SHAPES.ELIP) {\n        this.buildCircle(data, webGLData);\n      } else if (data.type === CONST.SHAPES.RREC) {\n        this.buildRoundedRectangle(data, webGLData);\n      }\n    }\n\n    webGL.lastIndex++;\n  } // upload all the dirty data...\n\n\n  for (i = 0; i < webGL.data.length; i++) {\n    webGLData = webGL.data[i];\n\n    if (webGLData.dirty) {\n      webGLData.upload();\n    }\n  }\n};\n/**\n *\n *\n * @private\n * @param webGL {WebGLRenderingContext} the current WebGL drawing context\n * @param type {number} TODO @Alvin\n */\n\n\nGraphicsRenderer.prototype.switchMode = function (webGL, type) {\n  var webGLData;\n\n  if (!webGL.data.length) {\n    webGLData = this.graphicsDataPool.pop() || new WebGLGraphicsData(webGL.gl);\n    webGLData.mode = type;\n    webGL.data.push(webGLData);\n  } else {\n    webGLData = webGL.data[webGL.data.length - 1];\n\n    if (webGLData.points.length > 320000 || webGLData.mode !== type || type === 1) {\n      webGLData = this.graphicsDataPool.pop() || new WebGLGraphicsData(webGL.gl);\n      webGLData.mode = type;\n      webGL.data.push(webGLData);\n    }\n  }\n\n  webGLData.dirty = true;\n  return webGLData;\n};\n/**\n * Builds a rectangle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildRectangle = function (graphicsData, webGLData) {\n  // --- //\n  // need to convert points to a nice regular data\n  //\n  var rectData = graphicsData.shape;\n  var x = rectData.x;\n  var y = rectData.y;\n  var width = rectData.width;\n  var height = rectData.height;\n\n  if (graphicsData.fill) {\n    var color = utils.hex2rgb(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vertPos = verts.length / 6; // start\n\n    verts.push(x, y);\n    verts.push(r, g, b, alpha);\n    verts.push(x + width, y);\n    verts.push(r, g, b, alpha);\n    verts.push(x, y + height);\n    verts.push(r, g, b, alpha);\n    verts.push(x + width, y + height);\n    verts.push(r, g, b, alpha); // insert 2 dead triangles..\n\n    indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);\n  }\n\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];\n    this.buildLine(graphicsData, webGLData);\n    graphicsData.points = tempPoints;\n  }\n};\n/**\n * Builds a rounded rectangle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildRoundedRectangle = function (graphicsData, webGLData) {\n  var rrectData = graphicsData.shape;\n  var x = rrectData.x;\n  var y = rrectData.y;\n  var width = rrectData.width;\n  var height = rrectData.height;\n  var radius = rrectData.radius;\n  var recPoints = [];\n  recPoints.push(x, y + radius);\n  this.quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height, recPoints);\n  this.quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius, recPoints);\n  this.quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y, recPoints);\n  this.quadraticBezierCurve(x + radius, y, x, y, x, y + radius + 0.0000000001, recPoints); // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n  // TODO - fix this properly, this is not very elegant.. but it works for now.\n\n  if (graphicsData.fill) {\n    var color = utils.hex2rgb(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vecPos = verts.length / 6;\n    var triangles = earcut(recPoints, null, 2);\n    var i = 0;\n\n    for (i = 0; i < triangles.length; i += 3) {\n      indices.push(triangles[i] + vecPos);\n      indices.push(triangles[i] + vecPos);\n      indices.push(triangles[i + 1] + vecPos);\n      indices.push(triangles[i + 2] + vecPos);\n      indices.push(triangles[i + 2] + vecPos);\n    }\n\n    for (i = 0; i < recPoints.length; i++) {\n      verts.push(recPoints[i], recPoints[++i], r, g, b, alpha);\n    }\n  }\n\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = recPoints;\n    this.buildLine(graphicsData, webGLData);\n    graphicsData.points = tempPoints;\n  }\n};\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * @private\n * @param fromX {number} Origin point x\n * @param fromY {number} Origin point x\n * @param cpX {number} Control point x\n * @param cpY {number} Control point y\n * @param toX {number} Destination point x\n * @param toY {number} Destination point y\n * @param [out] {number[]} The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\n\n\nGraphicsRenderer.prototype.quadraticBezierCurve = function (fromX, fromY, cpX, cpY, toX, toY, out) {\n  var xa,\n      ya,\n      xb,\n      yb,\n      x,\n      y,\n      n = 20,\n      points = out || [];\n\n  function getPt(n1, n2, perc) {\n    var diff = n2 - n1;\n    return n1 + diff * perc;\n  }\n\n  var j = 0;\n\n  for (var i = 0; i <= n; i++) {\n    j = i / n; // The Green Line\n\n    xa = getPt(fromX, cpX, j);\n    ya = getPt(fromY, cpY, j);\n    xb = getPt(cpX, toX, j);\n    yb = getPt(cpY, toY, j); // The Black Dot\n\n    x = getPt(xa, xb, j);\n    y = getPt(ya, yb, j);\n    points.push(x, y);\n  }\n\n  return points;\n};\n/**\n * Builds a circle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object to draw\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildCircle = function (graphicsData, webGLData) {\n  // need to convert points to a nice regular data\n  var circleData = graphicsData.shape;\n  var x = circleData.x;\n  var y = circleData.y;\n  var width;\n  var height; // TODO - bit hacky??\n\n  if (graphicsData.type === CONST.SHAPES.CIRC) {\n    width = circleData.radius;\n    height = circleData.radius;\n  } else {\n    width = circleData.width;\n    height = circleData.height;\n  }\n\n  var totalSegs = 40;\n  var seg = Math.PI * 2 / totalSegs;\n  var i = 0;\n\n  if (graphicsData.fill) {\n    var color = utils.hex2rgb(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vecPos = verts.length / 6;\n    indices.push(vecPos);\n\n    for (i = 0; i < totalSegs + 1; i++) {\n      verts.push(x, y, r, g, b, alpha);\n      verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);\n      indices.push(vecPos++, vecPos++);\n    }\n\n    indices.push(vecPos - 1);\n  }\n\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = [];\n\n    for (i = 0; i < totalSegs + 1; i++) {\n      graphicsData.points.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height);\n    }\n\n    this.buildLine(graphicsData, webGLData);\n    graphicsData.points = tempPoints;\n  }\n};\n/**\n * Builds a line to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildLine = function (graphicsData, webGLData) {\n  // TODO OPTIMISE!\n  var i = 0;\n  var points = graphicsData.points;\n\n  if (points.length === 0) {\n    return;\n  } // if the line width is an odd number add 0.5 to align to a whole pixel\n\n\n  if (graphicsData.lineWidth % 2) {\n    for (i = 0; i < points.length; i++) {\n      points[i] += 0.5;\n    }\n  } // get first and last point.. figure out the middle!\n\n\n  var firstPoint = new math.Point(points[0], points[1]);\n  var lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]); // if the first point is the last point - gonna have issues :)\n\n  if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {\n    // need to clone as we are going to slightly modify the shape..\n    points = points.slice();\n    points.pop();\n    points.pop();\n    lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]);\n    var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;\n    var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n\n  var verts = webGLData.points;\n  var indices = webGLData.indices;\n  var length = points.length / 2;\n  var indexCount = points.length;\n  var indexStart = verts.length / 6; // DRAW the Line\n\n  var width = graphicsData.lineWidth / 2; // sort color\n\n  var color = utils.hex2rgb(graphicsData.lineColor);\n  var alpha = graphicsData.lineAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n  var px, py, p1x, p1y, p2x, p2y, p3x, p3y;\n  var perpx, perpy, perp2x, perp2y, perp3x, perp3y;\n  var a1, b1, c1, a2, b2, c2;\n  var denom, pdist, dist;\n  p1x = points[0];\n  p1y = points[1];\n  p2x = points[2];\n  p2y = points[3];\n  perpx = -(p1y - p2y);\n  perpy = p1x - p2x;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width; // start\n\n  verts.push(p1x - perpx, p1y - perpy, r, g, b, alpha);\n  verts.push(p1x + perpx, p1y + perpy, r, g, b, alpha);\n\n  for (i = 1; i < length - 1; i++) {\n    p1x = points[(i - 1) * 2];\n    p1y = points[(i - 1) * 2 + 1];\n    p2x = points[i * 2];\n    p2y = points[i * 2 + 1];\n    p3x = points[(i + 1) * 2];\n    p3y = points[(i + 1) * 2 + 1];\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n    dist = Math.sqrt(perpx * perpx + perpy * perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    perp2x = -(p2y - p3y);\n    perp2y = p2x - p3x;\n    dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);\n    perp2x /= dist;\n    perp2y /= dist;\n    perp2x *= width;\n    perp2y *= width;\n    a1 = -perpy + p1y - (-perpy + p2y);\n    b1 = -perpx + p2x - (-perpx + p1x);\n    c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);\n    a2 = -perp2y + p3y - (-perp2y + p2y);\n    b2 = -perp2x + p2x - (-perp2x + p3x);\n    c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);\n    denom = a1 * b2 - a2 * b1;\n\n    if (Math.abs(denom) < 0.1) {\n      denom += 10.1;\n      verts.push(p2x - perpx, p2y - perpy, r, g, b, alpha);\n      verts.push(p2x + perpx, p2y + perpy, r, g, b, alpha);\n      continue;\n    }\n\n    px = (b1 * c2 - b2 * c1) / denom;\n    py = (a2 * c1 - a1 * c2) / denom;\n    pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);\n\n    if (pdist > 140 * 140) {\n      perp3x = perpx - perp2x;\n      perp3y = perpy - perp2y;\n      dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);\n      perp3x /= dist;\n      perp3y /= dist;\n      perp3x *= width;\n      perp3y *= width;\n      verts.push(p2x - perp3x, p2y - perp3y);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x + perp3x, p2y + perp3y);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - perp3x, p2y - perp3y);\n      verts.push(r, g, b, alpha);\n      indexCount++;\n    } else {\n      verts.push(px, py);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - (px - p2x), p2y - (py - p2y));\n      verts.push(r, g, b, alpha);\n    }\n  }\n\n  p1x = points[(length - 2) * 2];\n  p1y = points[(length - 2) * 2 + 1];\n  p2x = points[(length - 1) * 2];\n  p2y = points[(length - 1) * 2 + 1];\n  perpx = -(p1y - p2y);\n  perpy = p1x - p2x;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  verts.push(p2x - perpx, p2y - perpy);\n  verts.push(r, g, b, alpha);\n  verts.push(p2x + perpx, p2y + perpy);\n  verts.push(r, g, b, alpha);\n  indices.push(indexStart);\n\n  for (i = 0; i < indexCount; i++) {\n    indices.push(indexStart++);\n  }\n\n  indices.push(indexStart - 1);\n};\n/**\n * Builds a complex polygon to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildComplexPoly = function (graphicsData, webGLData) {\n  //TODO - no need to copy this as it gets turned into a FLoat32Array anyways..\n  var points = graphicsData.points.slice();\n\n  if (points.length < 6) {\n    return;\n  } // get first and last point.. figure out the middle!\n\n\n  var indices = webGLData.indices;\n  webGLData.points = points;\n  webGLData.alpha = graphicsData.fillAlpha;\n  webGLData.color = utils.hex2rgb(graphicsData.fillColor); // calclate the bounds..\n\n  var minX = Infinity;\n  var maxX = -Infinity;\n  var minY = Infinity;\n  var maxY = -Infinity;\n  var x, y; // get size..\n\n  for (var i = 0; i < points.length; i += 2) {\n    x = points[i];\n    y = points[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  } // add a quad to the end cos there is no point making another buffer!\n\n\n  points.push(minX, minY, maxX, minY, maxX, maxY, minX, maxY); // push a quad onto the end..\n  //TODO - this aint needed!\n\n  var length = points.length / 2;\n\n  for (i = 0; i < length; i++) {\n    indices.push(i);\n  }\n};\n/**\n * Builds a polygon to draw\n *\n * @private\n * @param graphicsData {WebGLGraphicsData} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\n\n\nGraphicsRenderer.prototype.buildPoly = function (graphicsData, webGLData) {\n  var points = graphicsData.points;\n\n  if (points.length < 6) {\n    return;\n  } // get first and last point.. figure out the middle!\n\n\n  var verts = webGLData.points;\n  var indices = webGLData.indices;\n  var length = points.length / 2; // sort color\n\n  var color = utils.hex2rgb(graphicsData.fillColor);\n  var alpha = graphicsData.fillAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n  var triangles = earcut(points, null, 2);\n\n  if (!triangles) {\n    return false;\n  }\n\n  var vertPos = verts.length / 6;\n  var i = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    indices.push(triangles[i] + vertPos);\n    indices.push(triangles[i] + vertPos);\n    indices.push(triangles[i + 1] + vertPos);\n    indices.push(triangles[i + 2] + vertPos);\n    indices.push(triangles[i + 2] + vertPos);\n  }\n\n  for (i = 0; i < length; i++) {\n    verts.push(points[i * 2], points[i * 2 + 1], r, g, b, alpha);\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/core/graphics/webgl/GraphicsRenderer.js"],"names":["utils","require","math","CONST","ObjectRenderer","WebGLRenderer","WebGLGraphicsData","earcut","GraphicsRenderer","renderer","call","graphicsDataPool","primitiveShader","complexPrimitiveShader","maximumSimplePolySize","prototype","Object","create","constructor","module","exports","registerPlugin","onContextChange","destroy","i","length","render","graphics","gl","shader","shaderManager","plugins","webGLData","dirty","updateGraphics","webGL","_webGL","id","blendModeManager","setBlendMode","blendMode","data","mode","stencilManager","pushStencil","uniform1f","uniforms","alpha","_location","worldAlpha","drawElements","TRIANGLE_FAN","UNSIGNED_SHORT","indices","popStencil","setShader","uniformMatrix3fv","translationMatrix","worldTransform","toArray","projectionMatrix","currentRenderTarget","uniform3fv","tint","hex2rgb","bindBuffer","ARRAY_BUFFER","buffer","vertexAttribPointer","attributes","aVertexPosition","FLOAT","aColor","ELEMENT_ARRAY_BUFFER","indexBuffer","TRIANGLE_STRIP","lastIndex","clearDirty","graphicsData","reset","push","type","SHAPES","POLY","points","shape","slice","closed","fill","switchMode","canDrawUsingSimple","buildPoly","buildComplexPoly","lineWidth","buildLine","RECT","buildRectangle","CIRC","ELIP","buildCircle","RREC","buildRoundedRectangle","upload","pop","rectData","x","y","width","height","color","fillColor","fillAlpha","r","g","b","verts","vertPos","tempPoints","rrectData","radius","recPoints","quadraticBezierCurve","vecPos","triangles","fromX","fromY","cpX","cpY","toX","toY","out","xa","ya","xb","yb","n","getPt","n1","n2","perc","diff","j","circleData","totalSegs","seg","Math","PI","sin","cos","firstPoint","Point","lastPoint","midPointX","midPointY","unshift","indexCount","indexStart","lineColor","lineAlpha","px","py","p1x","p1y","p2x","p2y","p3x","p3y","perpx","perpy","perp2x","perp2y","perp3x","perp3y","a1","b1","c1","a2","b2","c2","denom","pdist","dist","sqrt","abs","minX","Infinity","maxX","minY","maxY"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,YAAD,CADlB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,aAAD,CAFnB;AAAA,IAGIG,cAAc,GAAGH,OAAO,CAAC,4CAAD,CAH5B;AAAA,IAIII,aAAa,GAAGJ,OAAO,CAAC,qCAAD,CAJ3B;AAAA,IAKIK,iBAAiB,GAAGL,OAAO,CAAC,qBAAD,CAL/B;AAAA,IAMIM,MAAM,GAAGN,OAAO,CAAC,QAAD,CANpB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,gBAAT,CAA0BC,QAA1B,EACA;AACIL,EAAAA,cAAc,CAACM,IAAf,CAAoB,IAApB,EAA0BD,QAA1B;AAEA,OAAKE,gBAAL,GAAwB,EAAxB;AAEA,OAAKC,eAAL,GAAuB,IAAvB;AACA,OAAKC,sBAAL,GAA8B,IAA9B;AAEA;AACJ;AACA;AACA;;AACI,OAAKC,qBAAL,GAA6B,GAA7B;AACH;;AAEDN,gBAAgB,CAACO,SAAjB,GAA6BC,MAAM,CAACC,MAAP,CAAcb,cAAc,CAACW,SAA7B,CAA7B;AACAP,gBAAgB,CAACO,SAAjB,CAA2BG,WAA3B,GAAyCV,gBAAzC;AACAW,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB;AAEAH,aAAa,CAACgB,cAAd,CAA6B,UAA7B,EAAyCb,gBAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,gBAAgB,CAACO,SAAjB,CAA2BO,eAA3B,GAA6C,YAC7C,CAEC,CAHD;AAKA;AACA;AACA;AACA;;;AACAd,gBAAgB,CAACO,SAAjB,CAA2BQ,OAA3B,GAAqC,YAAY;AAC7CnB,EAAAA,cAAc,CAACW,SAAf,CAAyBQ,OAAzB,CAAiCb,IAAjC,CAAsC,IAAtC;;AAEA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,gBAAL,CAAsBc,MAA1C,EAAkD,EAAED,CAApD,EAAuD;AACnD,SAAKb,gBAAL,CAAsBa,CAAtB,EAAyBD,OAAzB;AACH;;AAED,OAAKZ,gBAAL,GAAwB,IAAxB;AACH,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACAH,gBAAgB,CAACO,SAAjB,CAA2BW,MAA3B,GAAoC,UAASC,QAAT,EACpC;AACI,MAAIlB,QAAQ,GAAG,KAAKA,QAApB;AACA,MAAImB,EAAE,GAAGnB,QAAQ,CAACmB,EAAlB;AAEA,MAAIC,MAAM,GAAGpB,QAAQ,CAACqB,aAAT,CAAuBC,OAAvB,CAA+BnB,eAA5C;AAAA,MACIoB,SADJ;;AAGA,MAAIL,QAAQ,CAACM,KAAb,EACA;AACI,SAAKC,cAAL,CAAoBP,QAApB,EAA8BC,EAA9B;AACH;;AAED,MAAIO,KAAK,GAAGR,QAAQ,CAACS,MAAT,CAAgBR,EAAE,CAACS,EAAnB,CAAZ,CAZJ,CAcI;;AAEA5B,EAAAA,QAAQ,CAAC6B,gBAAT,CAA0BC,YAA1B,CAAwCZ,QAAQ,CAACa,SAAjD,EAhBJ,CAkBA;AACA;AACA;;AAEI,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,KAAK,CAACM,IAAN,CAAWhB,MAA/B,EAAuCD,CAAC,EAAxC,EACA;AACI,QAAIW,KAAK,CAACM,IAAN,CAAWjB,CAAX,EAAckB,IAAd,KAAuB,CAA3B,EACA;AACIV,MAAAA,SAAS,GAAGG,KAAK,CAACM,IAAN,CAAWjB,CAAX,CAAZ;AAEAf,MAAAA,QAAQ,CAACkC,cAAT,CAAwBC,WAAxB,CAAoCjB,QAApC,EAA8CK,SAA9C,EAAyDvB,QAAzD;AAEAmB,MAAAA,EAAE,CAACiB,SAAH,CAAapC,QAAQ,CAACqB,aAAT,CAAuBjB,sBAAvB,CAA8CiC,QAA9C,CAAuDC,KAAvD,CAA6DC,SAA1E,EAAqFrB,QAAQ,CAACsB,UAAT,GAAsBjB,SAAS,CAACe,KAArH,EALJ,CAOI;;AACAnB,MAAAA,EAAE,CAACsB,YAAH,CAAgBtB,EAAE,CAACuB,YAAnB,EAAiC,CAAjC,EAAoCvB,EAAE,CAACwB,cAAvC,EAAuD,CAAEpB,SAAS,CAACqB,OAAV,CAAkB5B,MAAlB,GAA2B,CAA7B,IAAmC,CAA1F;AAEAhB,MAAAA,QAAQ,CAACkC,cAAT,CAAwBW,UAAxB,CAAmC3B,QAAnC,EAA6CK,SAA7C,EAAwDvB,QAAxD;AACH,KAZD,MAcA;AACIuB,MAAAA,SAAS,GAAGG,KAAK,CAACM,IAAN,CAAWjB,CAAX,CAAZ;AAGAK,MAAAA,MAAM,GAAGpB,QAAQ,CAACqB,aAAT,CAAuBlB,eAAhC;AAEAH,MAAAA,QAAQ,CAACqB,aAAT,CAAuByB,SAAvB,CAAkC1B,MAAlC,EANJ,CAM+C;;AAE3CD,MAAAA,EAAE,CAAC4B,gBAAH,CAAoB3B,MAAM,CAACiB,QAAP,CAAgBW,iBAAhB,CAAkCT,SAAtD,EAAiE,KAAjE,EAAwErB,QAAQ,CAAC+B,cAAT,CAAwBC,OAAxB,CAAgC,IAAhC,CAAxE;AAEA/B,MAAAA,EAAE,CAAC4B,gBAAH,CAAoB3B,MAAM,CAACiB,QAAP,CAAgBc,gBAAhB,CAAiCZ,SAArD,EAAgE,KAAhE,EAAuEvC,QAAQ,CAACoD,mBAAT,CAA6BD,gBAA7B,CAA8CD,OAA9C,CAAsD,IAAtD,CAAvE;AAEA/B,MAAAA,EAAE,CAACkC,UAAH,CAAcjC,MAAM,CAACiB,QAAP,CAAgBiB,IAAhB,CAAqBf,SAAnC,EAA8ChD,KAAK,CAACgE,OAAN,CAAcrC,QAAQ,CAACoC,IAAvB,CAA9C;AAEAnC,MAAAA,EAAE,CAACiB,SAAH,CAAahB,MAAM,CAACiB,QAAP,CAAgBC,KAAhB,CAAsBC,SAAnC,EAA8CrB,QAAQ,CAACsB,UAAvD;AAGArB,MAAAA,EAAE,CAACqC,UAAH,CAAcrC,EAAE,CAACsC,YAAjB,EAA+BlC,SAAS,CAACmC,MAAzC;AAEAvC,MAAAA,EAAE,CAACwC,mBAAH,CAAuBvC,MAAM,CAACwC,UAAP,CAAkBC,eAAzC,EAA0D,CAA1D,EAA6D1C,EAAE,CAAC2C,KAAhE,EAAuE,KAAvE,EAA8E,IAAI,CAAlF,EAAqF,CAArF;AACA3C,MAAAA,EAAE,CAACwC,mBAAH,CAAuBvC,MAAM,CAACwC,UAAP,CAAkBG,MAAzC,EAAiD,CAAjD,EAAoD5C,EAAE,CAAC2C,KAAvD,EAA8D,KAA9D,EAAoE,IAAI,CAAxE,EAA2E,IAAI,CAA/E,EApBJ,CAsBI;;AACA3C,MAAAA,EAAE,CAACqC,UAAH,CAAcrC,EAAE,CAAC6C,oBAAjB,EAAuCzC,SAAS,CAAC0C,WAAjD;AACA9C,MAAAA,EAAE,CAACsB,YAAH,CAAgBtB,EAAE,CAAC+C,cAAnB,EAAoC3C,SAAS,CAACqB,OAAV,CAAkB5B,MAAtD,EAA8DG,EAAE,CAACwB,cAAjE,EAAiF,CAAjF;AACH;AACJ;AACJ,CAlED;AAoEA;AACA;AACA;AACA;AACA;AACA;;;AACA5C,gBAAgB,CAACO,SAAjB,CAA2BmB,cAA3B,GAA4C,UAASP,QAAT,EAC5C;AACI,MAAIC,EAAE,GAAG,KAAKnB,QAAL,CAAcmB,EAAvB,CADJ,CAGK;;AACD,MAAIO,KAAK,GAAGR,QAAQ,CAACS,MAAT,CAAgBR,EAAE,CAACS,EAAnB,CAAZ,CAJJ,CAMI;;AACA,MAAI,CAACF,KAAL,EACA;AACIA,IAAAA,KAAK,GAAGR,QAAQ,CAACS,MAAT,CAAgBR,EAAE,CAACS,EAAnB,IAAyB;AAACuC,MAAAA,SAAS,EAAC,CAAX;AAAcnC,MAAAA,IAAI,EAAC,EAAnB;AAAuBb,MAAAA,EAAE,EAACA;AAA1B,KAAjC;AACH,GAVL,CAYI;;;AACAD,EAAAA,QAAQ,CAACM,KAAT,GAAiB,KAAjB;AAEA,MAAIT,CAAJ,CAfJ,CAiBI;;AACA,MAAIG,QAAQ,CAACkD,UAAb,EACA;AACIlD,IAAAA,QAAQ,CAACkD,UAAT,GAAsB,KAAtB,CADJ,CAGI;;AACA,SAAKrD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGW,KAAK,CAACM,IAAN,CAAWhB,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACI,UAAIsD,YAAY,GAAG3C,KAAK,CAACM,IAAN,CAAWjB,CAAX,CAAnB;AACAsD,MAAAA,YAAY,CAACC,KAAb;AACA,WAAKpE,gBAAL,CAAsBqE,IAAtB,CAA4BF,YAA5B;AACH,KATL,CAWI;;;AACA3C,IAAAA,KAAK,CAACM,IAAN,GAAa,EAAb;AACAN,IAAAA,KAAK,CAACyC,SAAN,GAAkB,CAAlB;AACH;;AAED,MAAI5C,SAAJ,CAnCJ,CAqCI;AACA;AACA;;AACA,OAAKR,CAAC,GAAGW,KAAK,CAACyC,SAAf,EAA0BpD,CAAC,GAAGG,QAAQ,CAACmD,YAAT,CAAsBrD,MAApD,EAA4DD,CAAC,EAA7D,EACA;AACI,QAAIiB,IAAI,GAAGd,QAAQ,CAACmD,YAAT,CAAsBtD,CAAtB,CAAX;;AAEA,QAAIiB,IAAI,CAACwC,IAAL,KAAc9E,KAAK,CAAC+E,MAAN,CAAaC,IAA/B,EACA;AACI;AACA1C,MAAAA,IAAI,CAAC2C,MAAL,GAAc3C,IAAI,CAAC4C,KAAL,CAAWD,MAAX,CAAkBE,KAAlB,EAAd;;AACA,UAAI7C,IAAI,CAAC4C,KAAL,CAAWE,MAAf,EACA;AACI;AACA,YAAI9C,IAAI,CAAC2C,MAAL,CAAY,CAAZ,MAAmB3C,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAAC2C,MAAL,CAAY3D,MAAZ,GAAmB,CAA/B,CAAnB,IAAwDgB,IAAI,CAAC2C,MAAL,CAAY,CAAZ,MAAmB3C,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAAC2C,MAAL,CAAY3D,MAAZ,GAAmB,CAA/B,CAA/E,EACA;AACIgB,UAAAA,IAAI,CAAC2C,MAAL,CAAYJ,IAAZ,CAAiBvC,IAAI,CAAC2C,MAAL,CAAY,CAAZ,CAAjB,EAAiC3C,IAAI,CAAC2C,MAAL,CAAY,CAAZ,CAAjC;AACH;AACJ,OAVL,CAYI;;;AACA,UAAI3C,IAAI,CAAC+C,IAAT,EACA;AACI,YAAI/C,IAAI,CAAC2C,MAAL,CAAY3D,MAAZ,IAAsB,CAA1B,EACA;AACI,cAAIgB,IAAI,CAAC2C,MAAL,CAAY3D,MAAZ,GAAqB,KAAKX,qBAAL,GAA6B,CAAtD,EACA;AACIkB,YAAAA,SAAS,GAAG,KAAKyD,UAAL,CAAgBtD,KAAhB,EAAuB,CAAvB,CAAZ;AAEA,gBAAIuD,kBAAkB,GAAG,KAAKC,SAAL,CAAelD,IAAf,EAAqBT,SAArB,CAAzB;;AAEA,gBAAI,CAAC0D,kBAAL,EACA;AACI1D,cAAAA,SAAS,GAAG,KAAKyD,UAAL,CAAgBtD,KAAhB,EAAuB,CAAvB,CAAZ;AACA,mBAAKyD,gBAAL,CAAsBnD,IAAtB,EAA4BT,SAA5B;AACH;AAEJ,WAZD,MAcA;AACIA,YAAAA,SAAS,GAAG,KAAKyD,UAAL,CAAgBtD,KAAhB,EAAuB,CAAvB,CAAZ;AACA,iBAAKyD,gBAAL,CAAsBnD,IAAtB,EAA4BT,SAA5B;AACH;AACJ;AACJ;;AAED,UAAIS,IAAI,CAACoD,SAAL,GAAiB,CAArB,EACA;AACI7D,QAAAA,SAAS,GAAG,KAAKyD,UAAL,CAAgBtD,KAAhB,EAAuB,CAAvB,CAAZ;AACA,aAAK2D,SAAL,CAAerD,IAAf,EAAqBT,SAArB;AACH;AACJ,KA5CD,MA8CA;AACIA,MAAAA,SAAS,GAAG,KAAKyD,UAAL,CAAgBtD,KAAhB,EAAuB,CAAvB,CAAZ;;AAEA,UAAIM,IAAI,CAACwC,IAAL,KAAc9E,KAAK,CAAC+E,MAAN,CAAaa,IAA/B,EACA;AACI,aAAKC,cAAL,CAAoBvD,IAApB,EAA0BT,SAA1B;AACH,OAHD,MAIK,IAAIS,IAAI,CAACwC,IAAL,KAAc9E,KAAK,CAAC+E,MAAN,CAAae,IAA3B,IAAmCxD,IAAI,CAACwC,IAAL,KAAc9E,KAAK,CAAC+E,MAAN,CAAagB,IAAlE,EACL;AACI,aAAKC,WAAL,CAAiB1D,IAAjB,EAAuBT,SAAvB;AACH,OAHI,MAIA,IAAIS,IAAI,CAACwC,IAAL,KAAc9E,KAAK,CAAC+E,MAAN,CAAakB,IAA/B,EACL;AACI,aAAKC,qBAAL,CAA2B5D,IAA3B,EAAiCT,SAAjC;AACH;AACJ;;AAEDG,IAAAA,KAAK,CAACyC,SAAN;AACH,GA5GL,CA8GI;;;AACA,OAAKpD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGW,KAAK,CAACM,IAAN,CAAWhB,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACIQ,IAAAA,SAAS,GAAGG,KAAK,CAACM,IAAN,CAAWjB,CAAX,CAAZ;;AAEA,QAAIQ,SAAS,CAACC,KAAd,EACA;AACID,MAAAA,SAAS,CAACsE,MAAV;AACH;AACJ;AACJ,CAzHD;AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9F,gBAAgB,CAACO,SAAjB,CAA2B0E,UAA3B,GAAwC,UAAUtD,KAAV,EAAiB8C,IAAjB,EACxC;AACI,MAAIjD,SAAJ;;AAEA,MAAI,CAACG,KAAK,CAACM,IAAN,CAAWhB,MAAhB,EACA;AACIO,IAAAA,SAAS,GAAG,KAAKrB,gBAAL,CAAsB4F,GAAtB,MAA+B,IAAIjG,iBAAJ,CAAsB6B,KAAK,CAACP,EAA5B,CAA3C;AACAI,IAAAA,SAAS,CAACU,IAAV,GAAiBuC,IAAjB;AACA9C,IAAAA,KAAK,CAACM,IAAN,CAAWuC,IAAX,CAAgBhD,SAAhB;AACH,GALD,MAOA;AACIA,IAAAA,SAAS,GAAGG,KAAK,CAACM,IAAN,CAAWN,KAAK,CAACM,IAAN,CAAWhB,MAAX,GAAkB,CAA7B,CAAZ;;AAEA,QAAKO,SAAS,CAACoD,MAAV,CAAiB3D,MAAjB,GAA0B,MAA3B,IAAsCO,SAAS,CAACU,IAAV,KAAmBuC,IAAzD,IAAiEA,IAAI,KAAK,CAA9E,EACA;AACIjD,MAAAA,SAAS,GAAG,KAAKrB,gBAAL,CAAsB4F,GAAtB,MAA+B,IAAIjG,iBAAJ,CAAsB6B,KAAK,CAACP,EAA5B,CAA3C;AACAI,MAAAA,SAAS,CAACU,IAAV,GAAiBuC,IAAjB;AACA9C,MAAAA,KAAK,CAACM,IAAN,CAAWuC,IAAX,CAAgBhD,SAAhB;AACH;AACJ;;AAEDA,EAAAA,SAAS,CAACC,KAAV,GAAkB,IAAlB;AAEA,SAAOD,SAAP;AACH,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,gBAAgB,CAACO,SAAjB,CAA2BiF,cAA3B,GAA4C,UAAUlB,YAAV,EAAwB9C,SAAxB,EAC5C;AACI;AACA;AACA;AACA,MAAIwE,QAAQ,GAAG1B,YAAY,CAACO,KAA5B;AACA,MAAIoB,CAAC,GAAGD,QAAQ,CAACC,CAAjB;AACA,MAAIC,CAAC,GAAGF,QAAQ,CAACE,CAAjB;AACA,MAAIC,KAAK,GAAGH,QAAQ,CAACG,KAArB;AACA,MAAIC,MAAM,GAAGJ,QAAQ,CAACI,MAAtB;;AAEA,MAAI9B,YAAY,CAACU,IAAjB,EACA;AACI,QAAIqB,KAAK,GAAG7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAACgC,SAA3B,CAAZ;AACA,QAAI/D,KAAK,GAAG+B,YAAY,CAACiC,SAAzB;AAEA,QAAIC,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAIkE,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAImE,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AAEA,QAAIoE,KAAK,GAAGnF,SAAS,CAACoD,MAAtB;AACA,QAAI/B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AAEA,QAAI+D,OAAO,GAAGD,KAAK,CAAC1F,MAAN,GAAa,CAA3B,CAXJ,CAaI;;AACA0F,IAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAX,EAAcC,CAAd;AACAS,IAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,IAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAC,GAAGE,KAAf,EAAsBD,CAAtB;AACAS,IAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,IAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAX,EAAeC,CAAC,GAAGE,MAAnB;AACAO,IAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,IAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAC,GAAGE,KAAf,EAAsBD,CAAC,GAAGE,MAA1B;AACAO,IAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB,EAxBJ,CA0BI;;AACAM,IAAAA,OAAO,CAAC2B,IAAR,CAAaoC,OAAb,EAAsBA,OAAtB,EAA+BA,OAAO,GAAC,CAAvC,EAA0CA,OAAO,GAAC,CAAlD,EAAqDA,OAAO,GAAC,CAA7D,EAAgEA,OAAO,GAAC,CAAxE;AACH;;AAED,MAAItC,YAAY,CAACe,SAAjB,EACA;AACI,QAAIwB,UAAU,GAAGvC,YAAY,CAACM,MAA9B;AAEAN,IAAAA,YAAY,CAACM,MAAb,GAAsB,CAACqB,CAAD,EAAIC,CAAJ,EACZD,CAAC,GAAGE,KADQ,EACDD,CADC,EAEZD,CAAC,GAAGE,KAFQ,EAEDD,CAAC,GAAGE,MAFH,EAGZH,CAHY,EAGTC,CAAC,GAAGE,MAHK,EAIZH,CAJY,EAITC,CAJS,CAAtB;AAOA,SAAKZ,SAAL,CAAehB,YAAf,EAA6B9C,SAA7B;AAEA8C,IAAAA,YAAY,CAACM,MAAb,GAAsBiC,UAAtB;AACH;AACJ,CAzDD;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7G,gBAAgB,CAACO,SAAjB,CAA2BsF,qBAA3B,GAAmD,UAAUvB,YAAV,EAAwB9C,SAAxB,EACnD;AACI,MAAIsF,SAAS,GAAGxC,YAAY,CAACO,KAA7B;AACA,MAAIoB,CAAC,GAAGa,SAAS,CAACb,CAAlB;AACA,MAAIC,CAAC,GAAGY,SAAS,CAACZ,CAAlB;AACA,MAAIC,KAAK,GAAGW,SAAS,CAACX,KAAtB;AACA,MAAIC,MAAM,GAAGU,SAAS,CAACV,MAAvB;AAEA,MAAIW,MAAM,GAAGD,SAAS,CAACC,MAAvB;AAEA,MAAIC,SAAS,GAAG,EAAhB;AACAA,EAAAA,SAAS,CAACxC,IAAV,CAAeyB,CAAf,EAAkBC,CAAC,GAAGa,MAAtB;AACA,OAAKE,oBAAL,CAA0BhB,CAA1B,EAA6BC,CAAC,GAAGE,MAAJ,GAAaW,MAA1C,EAAkDd,CAAlD,EAAqDC,CAAC,GAAGE,MAAzD,EAAiEH,CAAC,GAAGc,MAArE,EAA6Eb,CAAC,GAAGE,MAAjF,EAAyFY,SAAzF;AACA,OAAKC,oBAAL,CAA0BhB,CAAC,GAAGE,KAAJ,GAAYY,MAAtC,EAA8Cb,CAAC,GAAGE,MAAlD,EAA0DH,CAAC,GAAGE,KAA9D,EAAqED,CAAC,GAAGE,MAAzE,EAAiFH,CAAC,GAAGE,KAArF,EAA4FD,CAAC,GAAGE,MAAJ,GAAaW,MAAzG,EAAiHC,SAAjH;AACA,OAAKC,oBAAL,CAA0BhB,CAAC,GAAGE,KAA9B,EAAqCD,CAAC,GAAGa,MAAzC,EAAiDd,CAAC,GAAGE,KAArD,EAA4DD,CAA5D,EAA+DD,CAAC,GAAGE,KAAJ,GAAYY,MAA3E,EAAmFb,CAAnF,EAAsFc,SAAtF;AACA,OAAKC,oBAAL,CAA0BhB,CAAC,GAAGc,MAA9B,EAAsCb,CAAtC,EAAyCD,CAAzC,EAA4CC,CAA5C,EAA+CD,CAA/C,EAAkDC,CAAC,GAAGa,MAAJ,GAAa,YAA/D,EAA6EC,SAA7E,EAdJ,CAgBI;AACA;;AAEA,MAAI1C,YAAY,CAACU,IAAjB,EACA;AACI,QAAIqB,KAAK,GAAG7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAACgC,SAA3B,CAAZ;AACA,QAAI/D,KAAK,GAAG+B,YAAY,CAACiC,SAAzB;AAEA,QAAIC,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAIkE,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAImE,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AAEA,QAAIoE,KAAK,GAAGnF,SAAS,CAACoD,MAAtB;AACA,QAAI/B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AAEA,QAAIqE,MAAM,GAAGP,KAAK,CAAC1F,MAAN,GAAa,CAA1B;AAEA,QAAIkG,SAAS,GAAGpH,MAAM,CAACiH,SAAD,EAAY,IAAZ,EAAkB,CAAlB,CAAtB;AAEA,QAAIhG,CAAC,GAAG,CAAR;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmG,SAAS,CAAClG,MAA1B,EAAkCD,CAAC,IAAE,CAArC,EACA;AACI6B,MAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAD,CAAT,GAAekG,MAA5B;AACArE,MAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAD,CAAT,GAAekG,MAA5B;AACArE,MAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAiBkG,MAA9B;AACArE,MAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAiBkG,MAA9B;AACArE,MAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAiBkG,MAA9B;AACH;;AAED,SAAKlG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgG,SAAS,CAAC/F,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI2F,MAAAA,KAAK,CAACnC,IAAN,CAAWwC,SAAS,CAAChG,CAAD,CAApB,EAAyBgG,SAAS,CAAC,EAAEhG,CAAH,CAAlC,EAAyCwF,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDnE,KAAlD;AACH;AACJ;;AAED,MAAI+B,YAAY,CAACe,SAAjB,EACA;AACI,QAAIwB,UAAU,GAAGvC,YAAY,CAACM,MAA9B;AAEAN,IAAAA,YAAY,CAACM,MAAb,GAAsBoC,SAAtB;AAEA,SAAK1B,SAAL,CAAehB,YAAf,EAA6B9C,SAA7B;AAEA8C,IAAAA,YAAY,CAACM,MAAb,GAAsBiC,UAAtB;AACH;AACJ,CA9DD;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7G,gBAAgB,CAACO,SAAjB,CAA2B0G,oBAA3B,GAAkD,UAAUG,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAClD;AACI,MAAIC,EAAJ;AAAA,MACIC,EADJ;AAAA,MAEIC,EAFJ;AAAA,MAGIC,EAHJ;AAAA,MAII7B,CAJJ;AAAA,MAKIC,CALJ;AAAA,MAMI6B,CAAC,GAAG,EANR;AAAA,MAOInD,MAAM,GAAG8C,GAAG,IAAI,EAPpB;;AASA,WAASM,KAAT,CAAeC,EAAf,EAAoBC,EAApB,EAAwBC,IAAxB,EAA8B;AAC1B,QAAIC,IAAI,GAAGF,EAAE,GAAGD,EAAhB;AAEA,WAAOA,EAAE,GAAKG,IAAI,GAAGD,IAArB;AACH;;AAED,MAAIE,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIrH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI+G,CAArB,EAAwB/G,CAAC,EAAzB,EAA8B;AAC1BqH,IAAAA,CAAC,GAAGrH,CAAC,GAAG+G,CAAR,CAD0B,CAG1B;;AACAJ,IAAAA,EAAE,GAAGK,KAAK,CAAEZ,KAAF,EAAUE,GAAV,EAAgBe,CAAhB,CAAV;AACAT,IAAAA,EAAE,GAAGI,KAAK,CAAEX,KAAF,EAAUE,GAAV,EAAgBc,CAAhB,CAAV;AACAR,IAAAA,EAAE,GAAGG,KAAK,CAAEV,GAAF,EAAQE,GAAR,EAAca,CAAd,CAAV;AACAP,IAAAA,EAAE,GAAGE,KAAK,CAAET,GAAF,EAAQE,GAAR,EAAcY,CAAd,CAAV,CAP0B,CAS1B;;AACApC,IAAAA,CAAC,GAAG+B,KAAK,CAAEL,EAAF,EAAOE,EAAP,EAAYQ,CAAZ,CAAT;AACAnC,IAAAA,CAAC,GAAG8B,KAAK,CAAEJ,EAAF,EAAOE,EAAP,EAAYO,CAAZ,CAAT;AAEAzD,IAAAA,MAAM,CAACJ,IAAP,CAAYyB,CAAZ,EAAeC,CAAf;AACH;;AAED,SAAOtB,MAAP;AACH,CAnCD;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5E,gBAAgB,CAACO,SAAjB,CAA2BoF,WAA3B,GAAyC,UAAUrB,YAAV,EAAwB9C,SAAxB,EACzC;AACI;AACA,MAAI8G,UAAU,GAAGhE,YAAY,CAACO,KAA9B;AACA,MAAIoB,CAAC,GAAGqC,UAAU,CAACrC,CAAnB;AACA,MAAIC,CAAC,GAAGoC,UAAU,CAACpC,CAAnB;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ,CANJ,CAQI;;AACA,MAAI9B,YAAY,CAACG,IAAb,KAAsB9E,KAAK,CAAC+E,MAAN,CAAae,IAAvC,EACA;AACIU,IAAAA,KAAK,GAAGmC,UAAU,CAACvB,MAAnB;AACAX,IAAAA,MAAM,GAAGkC,UAAU,CAACvB,MAApB;AACH,GAJD,MAMA;AACIZ,IAAAA,KAAK,GAAGmC,UAAU,CAACnC,KAAnB;AACAC,IAAAA,MAAM,GAAGkC,UAAU,CAAClC,MAApB;AACH;;AAED,MAAImC,SAAS,GAAG,EAAhB;AACA,MAAIC,GAAG,GAAIC,IAAI,CAACC,EAAL,GAAU,CAAX,GAAgBH,SAA1B;AAEA,MAAIvH,CAAC,GAAG,CAAR;;AAEA,MAAIsD,YAAY,CAACU,IAAjB,EACA;AACI,QAAIqB,KAAK,GAAG7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAACgC,SAA3B,CAAZ;AACA,QAAI/D,KAAK,GAAG+B,YAAY,CAACiC,SAAzB;AAEA,QAAIC,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAIkE,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,QAAImE,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AAEA,QAAIoE,KAAK,GAAGnF,SAAS,CAACoD,MAAtB;AACA,QAAI/B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AAEA,QAAIqE,MAAM,GAAGP,KAAK,CAAC1F,MAAN,GAAa,CAA1B;AAEA4B,IAAAA,OAAO,CAAC2B,IAAR,CAAa0C,MAAb;;AAEA,SAAKlG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuH,SAAS,GAAG,CAA5B,EAAgCvH,CAAC,EAAjC,EACA;AACI2F,MAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAX,EAAaC,CAAb,EAAgBM,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBnE,KAAzB;AAEAoE,MAAAA,KAAK,CAACnC,IAAN,CAAWyB,CAAC,GAAGwC,IAAI,CAACE,GAAL,CAASH,GAAG,GAAGxH,CAAf,IAAoBmF,KAAnC,EACWD,CAAC,GAAGuC,IAAI,CAACG,GAAL,CAASJ,GAAG,GAAGxH,CAAf,IAAoBoF,MADnC,EAEWI,CAFX,EAEcC,CAFd,EAEiBC,CAFjB,EAEoBnE,KAFpB;AAIAM,MAAAA,OAAO,CAAC2B,IAAR,CAAa0C,MAAM,EAAnB,EAAuBA,MAAM,EAA7B;AACH;;AAEDrE,IAAAA,OAAO,CAAC2B,IAAR,CAAa0C,MAAM,GAAC,CAApB;AACH;;AAED,MAAI5C,YAAY,CAACe,SAAjB,EACA;AACI,QAAIwB,UAAU,GAAGvC,YAAY,CAACM,MAA9B;AAEAN,IAAAA,YAAY,CAACM,MAAb,GAAsB,EAAtB;;AAEA,SAAK5D,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuH,SAAS,GAAG,CAA5B,EAA+BvH,CAAC,EAAhC,EACA;AACIsD,MAAAA,YAAY,CAACM,MAAb,CAAoBJ,IAApB,CAAyByB,CAAC,GAAGwC,IAAI,CAACE,GAAL,CAASH,GAAG,GAAGxH,CAAf,IAAoBmF,KAAjD,EACyBD,CAAC,GAAGuC,IAAI,CAACG,GAAL,CAASJ,GAAG,GAAGxH,CAAf,IAAoBoF,MADjD;AAEH;;AAED,SAAKd,SAAL,CAAehB,YAAf,EAA6B9C,SAA7B;AAEA8C,IAAAA,YAAY,CAACM,MAAb,GAAsBiC,UAAtB;AACH;AACJ,CAxED;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7G,gBAAgB,CAACO,SAAjB,CAA2B+E,SAA3B,GAAuC,UAAUhB,YAAV,EAAwB9C,SAAxB,EACvC;AACI;AACA,MAAIR,CAAC,GAAG,CAAR;AACA,MAAI4D,MAAM,GAAGN,YAAY,CAACM,MAA1B;;AAEA,MAAIA,MAAM,CAAC3D,MAAP,KAAkB,CAAtB,EACA;AACI;AACH,GARL,CAUI;;;AACA,MAAIqD,YAAY,CAACe,SAAb,GAAuB,CAA3B,EACA;AACI,SAAKrE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4D,MAAM,CAAC3D,MAAvB,EAA+BD,CAAC,EAAhC,EACA;AACI4D,MAAAA,MAAM,CAAC5D,CAAD,CAAN,IAAa,GAAb;AACH;AACJ,GAjBL,CAmBI;;;AACA,MAAI6H,UAAU,GAAG,IAAInJ,IAAI,CAACoJ,KAAT,CAAelE,MAAM,CAAC,CAAD,CAArB,EAA0BA,MAAM,CAAC,CAAD,CAAhC,CAAjB;AACA,MAAImE,SAAS,GAAG,IAAIrJ,IAAI,CAACoJ,KAAT,CAAelE,MAAM,CAACA,MAAM,CAAC3D,MAAP,GAAgB,CAAjB,CAArB,EAA0C2D,MAAM,CAACA,MAAM,CAAC3D,MAAP,GAAgB,CAAjB,CAAhD,CAAhB,CArBJ,CAuBI;;AACA,MAAI4H,UAAU,CAAC5C,CAAX,KAAiB8C,SAAS,CAAC9C,CAA3B,IAAgC4C,UAAU,CAAC3C,CAAX,KAAiB6C,SAAS,CAAC7C,CAA/D,EACA;AACI;AACAtB,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,EAAT;AAEAF,IAAAA,MAAM,CAACmB,GAAP;AACAnB,IAAAA,MAAM,CAACmB,GAAP;AAEAgD,IAAAA,SAAS,GAAG,IAAIrJ,IAAI,CAACoJ,KAAT,CAAelE,MAAM,CAACA,MAAM,CAAC3D,MAAP,GAAgB,CAAjB,CAArB,EAA0C2D,MAAM,CAACA,MAAM,CAAC3D,MAAP,GAAgB,CAAjB,CAAhD,CAAZ;AAEA,QAAI+H,SAAS,GAAGD,SAAS,CAAC9C,CAAV,GAAc,CAAC4C,UAAU,CAAC5C,CAAX,GAAe8C,SAAS,CAAC9C,CAA1B,IAA8B,GAA5D;AACA,QAAIgD,SAAS,GAAGF,SAAS,CAAC7C,CAAV,GAAc,CAAC2C,UAAU,CAAC3C,CAAX,GAAe6C,SAAS,CAAC7C,CAA1B,IAA8B,GAA5D;AAEAtB,IAAAA,MAAM,CAACsE,OAAP,CAAeF,SAAf,EAA0BC,SAA1B;AACArE,IAAAA,MAAM,CAACJ,IAAP,CAAYwE,SAAZ,EAAuBC,SAAvB;AACH;;AAED,MAAItC,KAAK,GAAGnF,SAAS,CAACoD,MAAtB;AACA,MAAI/B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AACA,MAAI5B,MAAM,GAAG2D,MAAM,CAAC3D,MAAP,GAAgB,CAA7B;AACA,MAAIkI,UAAU,GAAGvE,MAAM,CAAC3D,MAAxB;AACA,MAAImI,UAAU,GAAGzC,KAAK,CAAC1F,MAAN,GAAa,CAA9B,CA7CJ,CA+CI;;AACA,MAAIkF,KAAK,GAAG7B,YAAY,CAACe,SAAb,GAAyB,CAArC,CAhDJ,CAkDI;;AACA,MAAIgB,KAAK,GAAG7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAAC+E,SAA3B,CAAZ;AACA,MAAI9G,KAAK,GAAG+B,YAAY,CAACgF,SAAzB;AACA,MAAI9C,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,MAAIkE,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,MAAImE,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AAEA,MAAIgH,EAAJ,EAAQC,EAAR,EAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,GAArC;AACA,MAAIC,KAAJ,EAAWC,KAAX,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,MAA1C;AACA,MAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB;AACA,MAAIC,KAAJ,EAAWC,KAAX,EAAkBC,IAAlB;AAEApB,EAAAA,GAAG,GAAG7E,MAAM,CAAC,CAAD,CAAZ;AACA8E,EAAAA,GAAG,GAAG9E,MAAM,CAAC,CAAD,CAAZ;AAEA+E,EAAAA,GAAG,GAAG/E,MAAM,CAAC,CAAD,CAAZ;AACAgF,EAAAA,GAAG,GAAGhF,MAAM,CAAC,CAAD,CAAZ;AAEAmF,EAAAA,KAAK,GAAG,EAAEL,GAAG,GAAGE,GAAR,CAAR;AACAI,EAAAA,KAAK,GAAIP,GAAG,GAAGE,GAAf;AAEAkB,EAAAA,IAAI,GAAGpC,IAAI,CAACqC,IAAL,CAAUf,KAAK,GAACA,KAAN,GAAcC,KAAK,GAACA,KAA9B,CAAP;AAEAD,EAAAA,KAAK,IAAIc,IAAT;AACAb,EAAAA,KAAK,IAAIa,IAAT;AACAd,EAAAA,KAAK,IAAI5D,KAAT;AACA6D,EAAAA,KAAK,IAAI7D,KAAT,CA5EJ,CA8EI;;AACAQ,EAAAA,KAAK,CAACnC,IAAN,CAAWiF,GAAG,GAAGM,KAAjB,EAAyBL,GAAG,GAAGM,KAA/B,EACYxD,CADZ,EACeC,CADf,EACkBC,CADlB,EACqBnE,KADrB;AAGAoE,EAAAA,KAAK,CAACnC,IAAN,CAAWiF,GAAG,GAAGM,KAAjB,EAAyBL,GAAG,GAAGM,KAA/B,EACYxD,CADZ,EACeC,CADf,EACkBC,CADlB,EACqBnE,KADrB;;AAGA,OAAKvB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAM,GAAC,CAAvB,EAA0BD,CAAC,EAA3B,EACA;AACIyI,IAAAA,GAAG,GAAG7E,MAAM,CAAC,CAAC5D,CAAC,GAAC,CAAH,IAAM,CAAP,CAAZ;AACA0I,IAAAA,GAAG,GAAG9E,MAAM,CAAC,CAAC5D,CAAC,GAAC,CAAH,IAAM,CAAN,GAAU,CAAX,CAAZ;AAEA2I,IAAAA,GAAG,GAAG/E,MAAM,CAAE5D,CAAD,GAAI,CAAL,CAAZ;AACA4I,IAAAA,GAAG,GAAGhF,MAAM,CAAE5D,CAAD,GAAI,CAAJ,GAAQ,CAAT,CAAZ;AAEA6I,IAAAA,GAAG,GAAGjF,MAAM,CAAC,CAAC5D,CAAC,GAAC,CAAH,IAAM,CAAP,CAAZ;AACA8I,IAAAA,GAAG,GAAGlF,MAAM,CAAC,CAAC5D,CAAC,GAAC,CAAH,IAAM,CAAN,GAAU,CAAX,CAAZ;AAEA+I,IAAAA,KAAK,GAAG,EAAEL,GAAG,GAAGE,GAAR,CAAR;AACAI,IAAAA,KAAK,GAAGP,GAAG,GAAGE,GAAd;AAEAkB,IAAAA,IAAI,GAAGpC,IAAI,CAACqC,IAAL,CAAUf,KAAK,GAACA,KAAN,GAAcC,KAAK,GAACA,KAA9B,CAAP;AACAD,IAAAA,KAAK,IAAIc,IAAT;AACAb,IAAAA,KAAK,IAAIa,IAAT;AACAd,IAAAA,KAAK,IAAI5D,KAAT;AACA6D,IAAAA,KAAK,IAAI7D,KAAT;AAEA8D,IAAAA,MAAM,GAAG,EAAEL,GAAG,GAAGE,GAAR,CAAT;AACAI,IAAAA,MAAM,GAAGP,GAAG,GAAGE,GAAf;AAEAgB,IAAAA,IAAI,GAAGpC,IAAI,CAACqC,IAAL,CAAUb,MAAM,GAACA,MAAP,GAAgBC,MAAM,GAACA,MAAjC,CAAP;AACAD,IAAAA,MAAM,IAAIY,IAAV;AACAX,IAAAA,MAAM,IAAIW,IAAV;AACAZ,IAAAA,MAAM,IAAI9D,KAAV;AACA+D,IAAAA,MAAM,IAAI/D,KAAV;AAEAkE,IAAAA,EAAE,GAAI,CAACL,KAAD,GAASN,GAAV,IAAkB,CAACM,KAAD,GAASJ,GAA3B,CAAL;AACAU,IAAAA,EAAE,GAAI,CAACP,KAAD,GAASJ,GAAV,IAAkB,CAACI,KAAD,GAASN,GAA3B,CAAL;AACAc,IAAAA,EAAE,GAAG,CAAC,CAACR,KAAD,GAASN,GAAV,KAAkB,CAACO,KAAD,GAASJ,GAA3B,IAAkC,CAAC,CAACG,KAAD,GAASJ,GAAV,KAAkB,CAACK,KAAD,GAASN,GAA3B,CAAvC;AACAc,IAAAA,EAAE,GAAI,CAACN,MAAD,GAAUJ,GAAX,IAAmB,CAACI,MAAD,GAAUN,GAA7B,CAAL;AACAa,IAAAA,EAAE,GAAI,CAACR,MAAD,GAAUN,GAAX,IAAmB,CAACM,MAAD,GAAUJ,GAA7B,CAAL;AACAa,IAAAA,EAAE,GAAG,CAAC,CAACT,MAAD,GAAUJ,GAAX,KAAmB,CAACK,MAAD,GAAUN,GAA7B,IAAoC,CAAC,CAACK,MAAD,GAAUN,GAAX,KAAmB,CAACO,MAAD,GAAUJ,GAA7B,CAAzC;AAEAa,IAAAA,KAAK,GAAGN,EAAE,GAACI,EAAH,GAAQD,EAAE,GAACF,EAAnB;;AAEA,QAAI7B,IAAI,CAACsC,GAAL,CAASJ,KAAT,IAAkB,GAAtB,EACA;AAEIA,MAAAA,KAAK,IAAE,IAAP;AACAhE,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGI,KAAjB,EAAyBH,GAAG,GAAGI,KAA/B,EACIxD,CADJ,EACOC,CADP,EACUC,CADV,EACanE,KADb;AAGAoE,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGI,KAAjB,EAAyBH,GAAG,GAAGI,KAA/B,EACIxD,CADJ,EACOC,CADP,EACUC,CADV,EACanE,KADb;AAGA;AACH;;AAEDgH,IAAAA,EAAE,GAAG,CAACe,EAAE,GAACI,EAAH,GAAQD,EAAE,GAACF,EAAZ,IAAgBI,KAArB;AACAnB,IAAAA,EAAE,GAAG,CAACgB,EAAE,GAACD,EAAH,GAAQF,EAAE,GAACK,EAAZ,IAAgBC,KAArB;AAGAC,IAAAA,KAAK,GAAG,CAACrB,EAAE,GAAEI,GAAL,KAAaJ,EAAE,GAAEI,GAAjB,KAAyBH,EAAE,GAAEI,GAA7B,KAAqCJ,EAAE,GAAEI,GAAzC,CAAR;;AAGA,QAAIgB,KAAK,GAAG,MAAM,GAAlB,EACA;AACIT,MAAAA,MAAM,GAAGJ,KAAK,GAAGE,MAAjB;AACAG,MAAAA,MAAM,GAAGJ,KAAK,GAAGE,MAAjB;AAEAW,MAAAA,IAAI,GAAGpC,IAAI,CAACqC,IAAL,CAAUX,MAAM,GAACA,MAAP,GAAgBC,MAAM,GAACA,MAAjC,CAAP;AACAD,MAAAA,MAAM,IAAIU,IAAV;AACAT,MAAAA,MAAM,IAAIS,IAAV;AACAV,MAAAA,MAAM,IAAIhE,KAAV;AACAiE,MAAAA,MAAM,IAAIjE,KAAV;AAEAQ,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGQ,MAAjB,EAAyBP,GAAG,GAAEQ,MAA9B;AACAzD,MAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGQ,MAAjB,EAAyBP,GAAG,GAAEQ,MAA9B;AACAzD,MAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGQ,MAAjB,EAAyBP,GAAG,GAAEQ,MAA9B;AACAzD,MAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEA4G,MAAAA,UAAU;AACb,KArBD,MAuBA;AAEIxC,MAAAA,KAAK,CAACnC,IAAN,CAAW+E,EAAX,EAAgBC,EAAhB;AACA7C,MAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,MAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,IAAIJ,EAAE,GAACI,GAAP,CAAd,EAA2BC,GAAG,IAAIJ,EAAE,GAAGI,GAAT,CAA9B;AACAjD,MAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AACH;AACJ;;AAEDkH,EAAAA,GAAG,GAAG7E,MAAM,CAAC,CAAC3D,MAAM,GAAC,CAAR,IAAW,CAAZ,CAAZ;AACAyI,EAAAA,GAAG,GAAG9E,MAAM,CAAC,CAAC3D,MAAM,GAAC,CAAR,IAAW,CAAX,GAAe,CAAhB,CAAZ;AAEA0I,EAAAA,GAAG,GAAG/E,MAAM,CAAC,CAAC3D,MAAM,GAAC,CAAR,IAAW,CAAZ,CAAZ;AACA2I,EAAAA,GAAG,GAAGhF,MAAM,CAAC,CAAC3D,MAAM,GAAC,CAAR,IAAW,CAAX,GAAe,CAAhB,CAAZ;AAEA8I,EAAAA,KAAK,GAAG,EAAEL,GAAG,GAAGE,GAAR,CAAR;AACAI,EAAAA,KAAK,GAAGP,GAAG,GAAGE,GAAd;AAEAkB,EAAAA,IAAI,GAAGpC,IAAI,CAACqC,IAAL,CAAUf,KAAK,GAACA,KAAN,GAAcC,KAAK,GAACA,KAA9B,CAAP;AACAD,EAAAA,KAAK,IAAIc,IAAT;AACAb,EAAAA,KAAK,IAAIa,IAAT;AACAd,EAAAA,KAAK,IAAI5D,KAAT;AACA6D,EAAAA,KAAK,IAAI7D,KAAT;AAEAQ,EAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGI,KAAjB,EAAyBH,GAAG,GAAGI,KAA/B;AACArD,EAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAoE,EAAAA,KAAK,CAACnC,IAAN,CAAWmF,GAAG,GAAGI,KAAjB,EAAyBH,GAAG,GAAGI,KAA/B;AACArD,EAAAA,KAAK,CAACnC,IAAN,CAAWgC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBnE,KAApB;AAEAM,EAAAA,OAAO,CAAC2B,IAAR,CAAa4E,UAAb;;AAEA,OAAKpI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmI,UAAhB,EAA4BnI,CAAC,EAA7B,EACA;AACI6B,IAAAA,OAAO,CAAC2B,IAAR,CAAa4E,UAAU,EAAvB;AACH;;AAEDvG,EAAAA,OAAO,CAAC2B,IAAR,CAAa4E,UAAU,GAAC,CAAxB;AACH,CA9MD;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApJ,gBAAgB,CAACO,SAAjB,CAA2B6E,gBAA3B,GAA8C,UAAUd,YAAV,EAAwB9C,SAAxB,EAC9C;AACI;AACA,MAAIoD,MAAM,GAAGN,YAAY,CAACM,MAAb,CAAoBE,KAApB,EAAb;;AAEA,MAAIF,MAAM,CAAC3D,MAAP,GAAgB,CAApB,EACA;AACI;AACH,GAPL,CASI;;;AACA,MAAI4B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AACArB,EAAAA,SAAS,CAACoD,MAAV,GAAmBA,MAAnB;AACApD,EAAAA,SAAS,CAACe,KAAV,GAAkB+B,YAAY,CAACiC,SAA/B;AACA/E,EAAAA,SAAS,CAAC6E,KAAV,GAAkB7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAACgC,SAA3B,CAAlB,CAbJ,CAeI;;AACA,MAAI0E,IAAI,GAAGC,QAAX;AACA,MAAIC,IAAI,GAAG,CAACD,QAAZ;AAEA,MAAIE,IAAI,GAAGF,QAAX;AACA,MAAIG,IAAI,GAAG,CAACH,QAAZ;AAEA,MAAIhF,CAAJ,EAAMC,CAAN,CAtBJ,CAwBI;;AACA,OAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4D,MAAM,CAAC3D,MAA3B,EAAmCD,CAAC,IAAE,CAAtC,EACA;AACIiF,IAAAA,CAAC,GAAGrB,MAAM,CAAC5D,CAAD,CAAV;AACAkF,IAAAA,CAAC,GAAGtB,MAAM,CAAC5D,CAAC,GAAC,CAAH,CAAV;AAEAgK,IAAAA,IAAI,GAAG/E,CAAC,GAAG+E,IAAJ,GAAW/E,CAAX,GAAe+E,IAAtB;AACAE,IAAAA,IAAI,GAAGjF,CAAC,GAAGiF,IAAJ,GAAWjF,CAAX,GAAeiF,IAAtB;AAEAC,IAAAA,IAAI,GAAGjF,CAAC,GAAGiF,IAAJ,GAAWjF,CAAX,GAAeiF,IAAtB;AACAC,IAAAA,IAAI,GAAGlF,CAAC,GAAGkF,IAAJ,GAAWlF,CAAX,GAAekF,IAAtB;AACH,GAnCL,CAqCI;;;AACAxG,EAAAA,MAAM,CAACJ,IAAP,CAAYwG,IAAZ,EAAkBG,IAAlB,EACYD,IADZ,EACkBC,IADlB,EAEYD,IAFZ,EAEkBE,IAFlB,EAGYJ,IAHZ,EAGkBI,IAHlB,EAtCJ,CA2CI;AAEA;;AACA,MAAInK,MAAM,GAAG2D,MAAM,CAAC3D,MAAP,GAAgB,CAA7B;;AACA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAhB,EAAwBD,CAAC,EAAzB,EACA;AACI6B,IAAAA,OAAO,CAAC2B,IAAR,CAAcxD,CAAd;AACH;AAEJ,CArDD;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,gBAAgB,CAACO,SAAjB,CAA2B4E,SAA3B,GAAuC,UAAUb,YAAV,EAAwB9C,SAAxB,EACvC;AACI,MAAIoD,MAAM,GAAGN,YAAY,CAACM,MAA1B;;AAEA,MAAIA,MAAM,CAAC3D,MAAP,GAAgB,CAApB,EACA;AACI;AACH,GANL,CAQI;;;AACA,MAAI0F,KAAK,GAAGnF,SAAS,CAACoD,MAAtB;AACA,MAAI/B,OAAO,GAAGrB,SAAS,CAACqB,OAAxB;AAEA,MAAI5B,MAAM,GAAG2D,MAAM,CAAC3D,MAAP,GAAgB,CAA7B,CAZJ,CAcI;;AACA,MAAIoF,KAAK,GAAG7G,KAAK,CAACgE,OAAN,CAAcc,YAAY,CAACgC,SAA3B,CAAZ;AACA,MAAI/D,KAAK,GAAG+B,YAAY,CAACiC,SAAzB;AACA,MAAIC,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,MAAIkE,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AACA,MAAImE,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW9D,KAAnB;AAEA,MAAI4E,SAAS,GAAGpH,MAAM,CAAC6E,MAAD,EAAS,IAAT,EAAe,CAAf,CAAtB;;AAEA,MAAI,CAACuC,SAAL,EAAgB;AACZ,WAAO,KAAP;AACH;;AAED,MAAIP,OAAO,GAAGD,KAAK,CAAC1F,MAAN,GAAe,CAA7B;AAEA,MAAID,CAAC,GAAG,CAAR;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmG,SAAS,CAAClG,MAA1B,EAAkCD,CAAC,IAAE,CAArC,EACA;AACI6B,IAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAD,CAAT,GAAe4F,OAA5B;AACA/D,IAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAD,CAAT,GAAe4F,OAA5B;AACA/D,IAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAiB4F,OAA9B;AACA/D,IAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAgB4F,OAA7B;AACA/D,IAAAA,OAAO,CAAC2B,IAAR,CAAa2C,SAAS,CAACnG,CAAC,GAAC,CAAH,CAAT,GAAiB4F,OAA9B;AACH;;AAED,OAAK5F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAhB,EAAwBD,CAAC,EAAzB,EACA;AACI2F,IAAAA,KAAK,CAACnC,IAAN,CAAWI,MAAM,CAAC5D,CAAC,GAAG,CAAL,CAAjB,EAA0B4D,MAAM,CAAC5D,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhC,EACWwF,CADX,EACcC,CADd,EACiBC,CADjB,EACoBnE,KADpB;AAEH;;AAED,SAAO,IAAP;AACH,CAhDD","sourcesContent":["var utils = require('../../utils'),\n    math = require('../../math'),\n    CONST = require('../../const'),\n    ObjectRenderer = require('../../renderers/webgl/utils/ObjectRenderer'),\n    WebGLRenderer = require('../../renderers/webgl/WebGLRenderer'),\n    WebGLGraphicsData = require('./WebGLGraphicsData'),\n    earcut = require('earcut');\n\n/**\n * Renders the graphics object.\n *\n * @class\n * @private\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n * @param renderer {WebGLRenderer} The renderer this object renderer works for.\n */\nfunction GraphicsRenderer(renderer)\n{\n    ObjectRenderer.call(this, renderer);\n\n    this.graphicsDataPool = [];\n\n    this.primitiveShader = null;\n    this.complexPrimitiveShader = null;\n\n    /**\n     * This is the maximum number of points a poly can contain before it is rendered as a complex polygon (using the stencil buffer)\n     * @type {Number}\n     */\n    this.maximumSimplePolySize = 200;\n}\n\nGraphicsRenderer.prototype = Object.create(ObjectRenderer.prototype);\nGraphicsRenderer.prototype.constructor = GraphicsRenderer;\nmodule.exports = GraphicsRenderer;\n\nWebGLRenderer.registerPlugin('graphics', GraphicsRenderer);\n\n/**\n * Called when there is a WebGL context change\n *\n * @private\n *\n */\nGraphicsRenderer.prototype.onContextChange = function()\n{\n\n};\n\n/**\n * Destroys this renderer.\n *\n */\nGraphicsRenderer.prototype.destroy = function () {\n    ObjectRenderer.prototype.destroy.call(this);\n\n    for (var i = 0; i < this.graphicsDataPool.length; ++i) {\n        this.graphicsDataPool[i].destroy();\n    }\n\n    this.graphicsDataPool = null;\n};\n\n/**\n * Renders a graphics object.\n *\n * @param graphics {Graphics} The graphics object to render.\n */\nGraphicsRenderer.prototype.render = function(graphics)\n{\n    var renderer = this.renderer;\n    var gl = renderer.gl;\n\n    var shader = renderer.shaderManager.plugins.primitiveShader,\n        webGLData;\n\n    if (graphics.dirty)\n    {\n        this.updateGraphics(graphics, gl);\n    }\n\n    var webGL = graphics._webGL[gl.id];\n\n    // This  could be speeded up for sure!\n\n    renderer.blendModeManager.setBlendMode( graphics.blendMode );\n\n//    var matrix =  graphics.worldTransform.clone();\n//    var matrix =  renderer.currentRenderTarget.projectionMatrix.clone();\n//    matrix.append(graphics.worldTransform);\n\n    for (var i = 0; i < webGL.data.length; i++)\n    {\n        if (webGL.data[i].mode === 1)\n        {\n            webGLData = webGL.data[i];\n\n            renderer.stencilManager.pushStencil(graphics, webGLData, renderer);\n\n            gl.uniform1f(renderer.shaderManager.complexPrimitiveShader.uniforms.alpha._location, graphics.worldAlpha * webGLData.alpha);\n\n            // render quad..\n            gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, ( webGLData.indices.length - 4 ) * 2 );\n\n            renderer.stencilManager.popStencil(graphics, webGLData, renderer);\n        }\n        else\n        {\n            webGLData = webGL.data[i];\n\n\n            shader = renderer.shaderManager.primitiveShader;\n\n            renderer.shaderManager.setShader( shader );//activatePrimitiveShader();\n\n            gl.uniformMatrix3fv(shader.uniforms.translationMatrix._location, false, graphics.worldTransform.toArray(true));\n\n            gl.uniformMatrix3fv(shader.uniforms.projectionMatrix._location, false, renderer.currentRenderTarget.projectionMatrix.toArray(true));\n\n            gl.uniform3fv(shader.uniforms.tint._location, utils.hex2rgb(graphics.tint));\n\n            gl.uniform1f(shader.uniforms.alpha._location, graphics.worldAlpha);\n\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);\n\n            gl.vertexAttribPointer(shader.attributes.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);\n            gl.vertexAttribPointer(shader.attributes.aColor, 4, gl.FLOAT, false,4 * 6, 2 * 4);\n\n            // set the index buffer!\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);\n            gl.drawElements(gl.TRIANGLE_STRIP,  webGLData.indices.length, gl.UNSIGNED_SHORT, 0 );\n        }\n    }\n};\n\n/**\n * Updates the graphics object\n *\n * @private\n * @param graphicsData {Graphics} The graphics object to update\n */\nGraphicsRenderer.prototype.updateGraphics = function(graphics)\n{\n    var gl = this.renderer.gl;\n\n     // get the contexts graphics object\n    var webGL = graphics._webGL[gl.id];\n\n    // if the graphics object does not exist in the webGL context time to create it!\n    if (!webGL)\n    {\n        webGL = graphics._webGL[gl.id] = {lastIndex:0, data:[], gl:gl};\n    }\n\n    // flag the graphics as not dirty as we are about to update it...\n    graphics.dirty = false;\n\n    var i;\n\n    // if the user cleared the graphics object we will need to clear every object\n    if (graphics.clearDirty)\n    {\n        graphics.clearDirty = false;\n\n        // loop through and return all the webGLDatas to the object pool so than can be reused later on\n        for (i = 0; i < webGL.data.length; i++)\n        {\n            var graphicsData = webGL.data[i];\n            graphicsData.reset();\n            this.graphicsDataPool.push( graphicsData );\n        }\n\n        // clear the array and reset the index..\n        webGL.data = [];\n        webGL.lastIndex = 0;\n    }\n\n    var webGLData;\n\n    // loop through the graphics datas and construct each one..\n    // if the object is a complex fill then the new stencil buffer technique will be used\n    // other wise graphics objects will be pushed into a batch..\n    for (i = webGL.lastIndex; i < graphics.graphicsData.length; i++)\n    {\n        var data = graphics.graphicsData[i];\n\n        if (data.type === CONST.SHAPES.POLY)\n        {\n            // need to add the points the the graphics object..\n            data.points = data.shape.points.slice();\n            if (data.shape.closed)\n            {\n                // close the poly if the value is true!\n                if (data.points[0] !== data.points[data.points.length-2] || data.points[1] !== data.points[data.points.length-1])\n                {\n                    data.points.push(data.points[0], data.points[1]);\n                }\n            }\n\n            // MAKE SURE WE HAVE THE CORRECT TYPE..\n            if (data.fill)\n            {\n                if (data.points.length >= 6)\n                {\n                    if (data.points.length < this.maximumSimplePolySize * 2)\n                    {\n                        webGLData = this.switchMode(webGL, 0);\n\n                        var canDrawUsingSimple = this.buildPoly(data, webGLData);\n\n                        if (!canDrawUsingSimple)\n                        {\n                            webGLData = this.switchMode(webGL, 1);\n                            this.buildComplexPoly(data, webGLData);\n                        }\n\n                    }\n                    else\n                    {\n                        webGLData = this.switchMode(webGL, 1);\n                        this.buildComplexPoly(data, webGLData);\n                    }\n                }\n            }\n\n            if (data.lineWidth > 0)\n            {\n                webGLData = this.switchMode(webGL, 0);\n                this.buildLine(data, webGLData);\n            }\n        }\n        else\n        {\n            webGLData = this.switchMode(webGL, 0);\n\n            if (data.type === CONST.SHAPES.RECT)\n            {\n                this.buildRectangle(data, webGLData);\n            }\n            else if (data.type === CONST.SHAPES.CIRC || data.type === CONST.SHAPES.ELIP)\n            {\n                this.buildCircle(data, webGLData);\n            }\n            else if (data.type === CONST.SHAPES.RREC)\n            {\n                this.buildRoundedRectangle(data, webGLData);\n            }\n        }\n\n        webGL.lastIndex++;\n    }\n\n    // upload all the dirty data...\n    for (i = 0; i < webGL.data.length; i++)\n    {\n        webGLData = webGL.data[i];\n\n        if (webGLData.dirty)\n        {\n            webGLData.upload();\n        }\n    }\n};\n\n/**\n *\n *\n * @private\n * @param webGL {WebGLRenderingContext} the current WebGL drawing context\n * @param type {number} TODO @Alvin\n */\nGraphicsRenderer.prototype.switchMode = function (webGL, type)\n{\n    var webGLData;\n\n    if (!webGL.data.length)\n    {\n        webGLData = this.graphicsDataPool.pop() || new WebGLGraphicsData(webGL.gl);\n        webGLData.mode = type;\n        webGL.data.push(webGLData);\n    }\n    else\n    {\n        webGLData = webGL.data[webGL.data.length-1];\n\n        if ((webGLData.points.length > 320000) || webGLData.mode !== type || type === 1)\n        {\n            webGLData = this.graphicsDataPool.pop() || new WebGLGraphicsData(webGL.gl);\n            webGLData.mode = type;\n            webGL.data.push(webGLData);\n        }\n    }\n\n    webGLData.dirty = true;\n\n    return webGLData;\n};\n\n/**\n * Builds a rectangle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildRectangle = function (graphicsData, webGLData)\n{\n    // --- //\n    // need to convert points to a nice regular data\n    //\n    var rectData = graphicsData.shape;\n    var x = rectData.x;\n    var y = rectData.y;\n    var width = rectData.width;\n    var height = rectData.height;\n\n    if (graphicsData.fill)\n    {\n        var color = utils.hex2rgb(graphicsData.fillColor);\n        var alpha = graphicsData.fillAlpha;\n\n        var r = color[0] * alpha;\n        var g = color[1] * alpha;\n        var b = color[2] * alpha;\n\n        var verts = webGLData.points;\n        var indices = webGLData.indices;\n\n        var vertPos = verts.length/6;\n\n        // start\n        verts.push(x, y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x + width, y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x , y + height);\n        verts.push(r, g, b, alpha);\n\n        verts.push(x + width, y + height);\n        verts.push(r, g, b, alpha);\n\n        // insert 2 dead triangles..\n        indices.push(vertPos, vertPos, vertPos+1, vertPos+2, vertPos+3, vertPos+3);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        var tempPoints = graphicsData.points;\n\n        graphicsData.points = [x, y,\n                  x + width, y,\n                  x + width, y + height,\n                  x, y + height,\n                  x, y];\n\n\n        this.buildLine(graphicsData, webGLData);\n\n        graphicsData.points = tempPoints;\n    }\n};\n\n/**\n * Builds a rounded rectangle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildRoundedRectangle = function (graphicsData, webGLData)\n{\n    var rrectData = graphicsData.shape;\n    var x = rrectData.x;\n    var y = rrectData.y;\n    var width = rrectData.width;\n    var height = rrectData.height;\n\n    var radius = rrectData.radius;\n\n    var recPoints = [];\n    recPoints.push(x, y + radius);\n    this.quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height, recPoints);\n    this.quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius, recPoints);\n    this.quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y, recPoints);\n    this.quadraticBezierCurve(x + radius, y, x, y, x, y + radius + 0.0000000001, recPoints);\n\n    // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n    // TODO - fix this properly, this is not very elegant.. but it works for now.\n\n    if (graphicsData.fill)\n    {\n        var color = utils.hex2rgb(graphicsData.fillColor);\n        var alpha = graphicsData.fillAlpha;\n\n        var r = color[0] * alpha;\n        var g = color[1] * alpha;\n        var b = color[2] * alpha;\n\n        var verts = webGLData.points;\n        var indices = webGLData.indices;\n\n        var vecPos = verts.length/6;\n\n        var triangles = earcut(recPoints, null, 2);\n\n        var i = 0;\n        for (i = 0; i < triangles.length; i+=3)\n        {\n            indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i+1] + vecPos);\n            indices.push(triangles[i+2] + vecPos);\n            indices.push(triangles[i+2] + vecPos);\n        }\n\n        for (i = 0; i < recPoints.length; i++)\n        {\n            verts.push(recPoints[i], recPoints[++i], r, g, b, alpha);\n        }\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        var tempPoints = graphicsData.points;\n\n        graphicsData.points = recPoints;\n\n        this.buildLine(graphicsData, webGLData);\n\n        graphicsData.points = tempPoints;\n    }\n};\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * @private\n * @param fromX {number} Origin point x\n * @param fromY {number} Origin point x\n * @param cpX {number} Control point x\n * @param cpY {number} Control point y\n * @param toX {number} Destination point x\n * @param toY {number} Destination point y\n * @param [out] {number[]} The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nGraphicsRenderer.prototype.quadraticBezierCurve = function (fromX, fromY, cpX, cpY, toX, toY, out)\n{\n    var xa,\n        ya,\n        xb,\n        yb,\n        x,\n        y,\n        n = 20,\n        points = out || [];\n\n    function getPt(n1 , n2, perc) {\n        var diff = n2 - n1;\n\n        return n1 + ( diff * perc );\n    }\n\n    var j = 0;\n    for (var i = 0; i <= n; i++ ) {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt( fromX , cpX , j );\n        ya = getPt( fromY , cpY , j );\n        xb = getPt( cpX , toX , j );\n        yb = getPt( cpY , toY , j );\n\n        // The Black Dot\n        x = getPt( xa , xb , j );\n        y = getPt( ya , yb , j );\n\n        points.push(x, y);\n    }\n\n    return points;\n};\n\n/**\n * Builds a circle to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object to draw\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildCircle = function (graphicsData, webGLData)\n{\n    // need to convert points to a nice regular data\n    var circleData = graphicsData.shape;\n    var x = circleData.x;\n    var y = circleData.y;\n    var width;\n    var height;\n\n    // TODO - bit hacky??\n    if (graphicsData.type === CONST.SHAPES.CIRC)\n    {\n        width = circleData.radius;\n        height = circleData.radius;\n    }\n    else\n    {\n        width = circleData.width;\n        height = circleData.height;\n    }\n\n    var totalSegs = 40;\n    var seg = (Math.PI * 2) / totalSegs ;\n\n    var i = 0;\n\n    if (graphicsData.fill)\n    {\n        var color = utils.hex2rgb(graphicsData.fillColor);\n        var alpha = graphicsData.fillAlpha;\n\n        var r = color[0] * alpha;\n        var g = color[1] * alpha;\n        var b = color[2] * alpha;\n\n        var verts = webGLData.points;\n        var indices = webGLData.indices;\n\n        var vecPos = verts.length/6;\n\n        indices.push(vecPos);\n\n        for (i = 0; i < totalSegs + 1 ; i++)\n        {\n            verts.push(x,y, r, g, b, alpha);\n\n            verts.push(x + Math.sin(seg * i) * width,\n                       y + Math.cos(seg * i) * height,\n                       r, g, b, alpha);\n\n            indices.push(vecPos++, vecPos++);\n        }\n\n        indices.push(vecPos-1);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        var tempPoints = graphicsData.points;\n\n        graphicsData.points = [];\n\n        for (i = 0; i < totalSegs + 1; i++)\n        {\n            graphicsData.points.push(x + Math.sin(seg * i) * width,\n                                     y + Math.cos(seg * i) * height);\n        }\n\n        this.buildLine(graphicsData, webGLData);\n\n        graphicsData.points = tempPoints;\n    }\n};\n\n/**\n * Builds a line to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildLine = function (graphicsData, webGLData)\n{\n    // TODO OPTIMISE!\n    var i = 0;\n    var points = graphicsData.points;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    if (graphicsData.lineWidth%2)\n    {\n        for (i = 0; i < points.length; i++)\n        {\n            points[i] += 0.5;\n        }\n    }\n\n    // get first and last point.. figure out the middle!\n    var firstPoint = new math.Point(points[0], points[1]);\n    var lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]);\n\n    // if the first point is the last point - gonna have issues :)\n    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        points.pop();\n        points.pop();\n\n        lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]);\n\n        var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) *0.5;\n        var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) *0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var length = points.length / 2;\n    var indexCount = points.length;\n    var indexStart = verts.length/6;\n\n    // DRAW the Line\n    var width = graphicsData.lineWidth / 2;\n\n    // sort color\n    var color = utils.hex2rgb(graphicsData.lineColor);\n    var alpha = graphicsData.lineAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n\n    var px, py, p1x, p1y, p2x, p2y, p3x, p3y;\n    var perpx, perpy, perp2x, perp2y, perp3x, perp3y;\n    var a1, b1, c1, a2, b2, c2;\n    var denom, pdist, dist;\n\n    p1x = points[0];\n    p1y = points[1];\n\n    p2x = points[2];\n    p2y = points[3];\n\n    perpx = -(p1y - p2y);\n    perpy =  p1x - p2x;\n\n    dist = Math.sqrt(perpx*perpx + perpy*perpy);\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    // start\n    verts.push(p1x - perpx , p1y - perpy,\n                r, g, b, alpha);\n\n    verts.push(p1x + perpx , p1y + perpy,\n                r, g, b, alpha);\n\n    for (i = 1; i < length-1; i++)\n    {\n        p1x = points[(i-1)*2];\n        p1y = points[(i-1)*2 + 1];\n\n        p2x = points[(i)*2];\n        p2y = points[(i)*2 + 1];\n\n        p3x = points[(i+1)*2];\n        p3y = points[(i+1)*2 + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt(perpx*perpx + perpy*perpy);\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt(perp2x*perp2x + perp2y*perp2y);\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        a1 = (-perpy + p1y) - (-perpy + p2y);\n        b1 = (-perpx + p2x) - (-perpx + p1x);\n        c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);\n        a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);\n\n        denom = a1*b2 - a2*b1;\n\n        if (Math.abs(denom) < 0.1 )\n        {\n\n            denom+=10.1;\n            verts.push(p2x - perpx , p2y - perpy,\n                r, g, b, alpha);\n\n            verts.push(p2x + perpx , p2y + perpy,\n                r, g, b, alpha);\n\n            continue;\n        }\n\n        px = (b1*c2 - b2*c1)/denom;\n        py = (a2*c1 - a1*c2)/denom;\n\n\n        pdist = (px -p2x) * (px -p2x) + (py -p2y) + (py -p2y);\n\n\n        if (pdist > 140 * 140)\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt(perp3x*perp3x + perp3y*perp3y);\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - perp3x, p2y -perp3y);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x + perp3x, p2y +perp3y);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - perp3x, p2y -perp3y);\n            verts.push(r, g, b, alpha);\n\n            indexCount++;\n        }\n        else\n        {\n\n            verts.push(px , py);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - (px-p2x), p2y - (py - p2y));\n            verts.push(r, g, b, alpha);\n        }\n    }\n\n    p1x = points[(length-2)*2];\n    p1y = points[(length-2)*2 + 1];\n\n    p2x = points[(length-1)*2];\n    p2y = points[(length-1)*2 + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt(perpx*perpx + perpy*perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - perpx , p2y - perpy);\n    verts.push(r, g, b, alpha);\n\n    verts.push(p2x + perpx , p2y + perpy);\n    verts.push(r, g, b, alpha);\n\n    indices.push(indexStart);\n\n    for (i = 0; i < indexCount; i++)\n    {\n        indices.push(indexStart++);\n    }\n\n    indices.push(indexStart-1);\n};\n\n/**\n * Builds a complex polygon to draw\n *\n * @private\n * @param graphicsData {Graphics} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildComplexPoly = function (graphicsData, webGLData)\n{\n    //TODO - no need to copy this as it gets turned into a FLoat32Array anyways..\n    var points = graphicsData.points.slice();\n\n    if (points.length < 6)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n    var indices = webGLData.indices;\n    webGLData.points = points;\n    webGLData.alpha = graphicsData.fillAlpha;\n    webGLData.color = utils.hex2rgb(graphicsData.fillColor);\n\n    // calclate the bounds..\n    var minX = Infinity;\n    var maxX = -Infinity;\n\n    var minY = Infinity;\n    var maxY = -Infinity;\n\n    var x,y;\n\n    // get size..\n    for (var i = 0; i < points.length; i+=2)\n    {\n        x = points[i];\n        y = points[i+1];\n\n        minX = x < minX ? x : minX;\n        maxX = x > maxX ? x : maxX;\n\n        minY = y < minY ? y : minY;\n        maxY = y > maxY ? y : maxY;\n    }\n\n    // add a quad to the end cos there is no point making another buffer!\n    points.push(minX, minY,\n                maxX, minY,\n                maxX, maxY,\n                minX, maxY);\n\n    // push a quad onto the end..\n\n    //TODO - this aint needed!\n    var length = points.length / 2;\n    for (i = 0; i < length; i++)\n    {\n        indices.push( i );\n    }\n\n};\n\n/**\n * Builds a polygon to draw\n *\n * @private\n * @param graphicsData {WebGLGraphicsData} The graphics object containing all the necessary properties\n * @param webGLData {object} an object containing all the webGL-specific information to create this shape\n */\nGraphicsRenderer.prototype.buildPoly = function (graphicsData, webGLData)\n{\n    var points = graphicsData.points;\n\n    if (points.length < 6)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n\n    var length = points.length / 2;\n\n    // sort color\n    var color = utils.hex2rgb(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n\n    var triangles = earcut(points, null, 2);\n\n    if (!triangles) {\n        return false;\n    }\n\n    var vertPos = verts.length / 6;\n\n    var i = 0;\n\n    for (i = 0; i < triangles.length; i+=3)\n    {\n        indices.push(triangles[i] + vertPos);\n        indices.push(triangles[i] + vertPos);\n        indices.push(triangles[i+1] + vertPos);\n        indices.push(triangles[i+2] +vertPos);\n        indices.push(triangles[i+2] + vertPos);\n    }\n\n    for (i = 0; i < length; i++)\n    {\n        verts.push(points[i * 2], points[i * 2 + 1],\n                   r, g, b, alpha);\n    }\n\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}