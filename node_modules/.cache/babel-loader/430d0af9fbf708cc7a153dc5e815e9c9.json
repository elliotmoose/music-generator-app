{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) {\n      var audioParamConnections;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              audioParamConnections = getAudioParamConnections(audioParam);\n              _context2.next = 3;\n              return Promise.all(Array.from(audioParamConnections.activeInputs).map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                  var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                          audioNodeRenderer = getAudioNodeRenderer(source);\n                          _context.next = 4;\n                          return audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n                        case 4:\n                          renderedNativeAudioNode = _context.sent;\n\n                          if (!isPartOfACycle(source)) {\n                            renderedNativeAudioNode.connect(nativeAudioParam, output);\n                          }\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x5) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["../../../src/factories/render-inputs-of-audio-param.ts"],"names":[],"mappings":";;;AAGA,OAAO,IAAM,8BAA8B,GAAqC,SAAnE,8BAAmE,CAC5E,oBAD4E,EAE5E,wBAF4E,EAG5E,cAH4E,EAI5E;AACA;AAAA,wEAAO,kBACH,UADG,EAEH,yBAFG,EAGH,gBAHG,EAIH,KAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAMG,cAAA,qBANH,GAM2B,wBAAwB,CAAI,UAAJ,CANnD;AAAA;AAAA,qBAQG,OAAO,CAAC,GAAR,CACF,KAAK,CAAC,IAAN,CAAW,qBAAqB,CAAC,YAAjC,EAA+C,GAA/C;AAAA,qFAAmD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAQ,MAAR,aAAgB,MAAhB;AACzC,0BAAA,iBADyC,GACrB,oBAAoB,CAAC,MAAD,CADC;AAAA;AAAA,iCAET,iBAAiB,CAAC,MAAlB,CAAyB,MAAzB,EAAiC,yBAAjC,EAA4D,KAA5D,CAFS;;AAAA;AAEzC,0BAAA,uBAFyC;;AAI/C,8BAAI,CAAC,cAAc,CAAC,MAAD,CAAnB,EAA6B;AACzB,4BAAA,uBAAuB,CAAC,OAAxB,CAAgC,gBAAhC,EAAkD,MAAlD;AACH;;AAN8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnD;;AAAA;AAAA;AAAA;AAAA,kBADE,CARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAmBH,CAxBM","sourceRoot":"","sourcesContent":["export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=render-inputs-of-audio-param.js.map"]},"metadata":{},"sourceType":"module"}