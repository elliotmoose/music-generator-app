{"ast":null,"code":"var Resource = require('resource-loader').Resource,\n    path = require('path'),\n    core = require('../core');\n\nmodule.exports = function () {\n  return function (resource, next) {\n    // skip if no data, its not json, or it isn't spritesheet data\n    if (!resource.data || !resource.isJson || !resource.data.frames) {\n      return next();\n    }\n\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      loadType: Resource.LOAD_TYPE.IMAGE\n    };\n    var route = path.dirname(resource.url.replace(this.baseUrl, ''));\n    var resolution = core.utils.getResolutionOfUrl(resource.url); // load the image for this sheet\n\n    this.add(resource.name + '_image', route + '/' + resource.data.meta.image, loadOptions, function (res) {\n      resource.textures = {};\n      var frames = resource.data.frames;\n\n      for (var i in frames) {\n        var rect = frames[i].frame;\n\n        if (rect) {\n          var size = null;\n          var trim = null;\n\n          if (frames[i].rotated) {\n            size = new core.Rectangle(rect.x, rect.y, rect.h, rect.w);\n          } else {\n            size = new core.Rectangle(rect.x, rect.y, rect.w, rect.h);\n          } //  Check to see if the sprite is trimmed\n\n\n          if (frames[i].trimmed) {\n            trim = new core.Rectangle(frames[i].spriteSourceSize.x / resolution, frames[i].spriteSourceSize.y / resolution, frames[i].sourceSize.w / resolution, frames[i].sourceSize.h / resolution);\n          } // flip the width and height!\n\n\n          if (frames[i].rotated) {\n            var temp = size.width;\n            size.width = size.height;\n            size.height = temp;\n          }\n\n          size.x /= resolution;\n          size.y /= resolution;\n          size.width /= resolution;\n          size.height /= resolution;\n          resource.textures[i] = new core.Texture(res.texture.baseTexture, size, size.clone(), trim, frames[i].rotated); // lets also add the frame to pixi's global cache for fromFrame and fromImage functions\n\n          core.utils.TextureCache[i] = resource.textures[i];\n        }\n      }\n\n      next();\n    });\n  };\n};","map":{"version":3,"sources":["/Users/thebe/Desktop/music-generator-app/node_modules/pixi.js/src/loaders/spritesheetParser.js"],"names":["Resource","require","path","core","module","exports","resource","next","data","isJson","frames","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","route","dirname","url","replace","baseUrl","resolution","utils","getResolutionOfUrl","add","name","meta","image","res","textures","i","rect","frame","size","trim","rotated","Rectangle","x","y","h","w","trimmed","spriteSourceSize","sourceSize","temp","width","height","Texture","texture","baseTexture","clone","TextureCache"],"mappings":"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","sourcesContent":["var Resource = require('resource-loader').Resource,\n    path = require('path'),\n    core = require('../core');\n\nmodule.exports = function ()\n{\n    return function (resource, next)\n    {\n        // skip if no data, its not json, or it isn't spritesheet data\n        if (!resource.data || !resource.isJson || !resource.data.frames)\n        {\n            return next();\n        }\n\n        var loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            loadType: Resource.LOAD_TYPE.IMAGE\n        };\n\n        var route = path.dirname(resource.url.replace(this.baseUrl, ''));\n\n        var resolution = core.utils.getResolutionOfUrl( resource.url );\n\n        // load the image for this sheet\n        this.add(resource.name + '_image', route + '/' + resource.data.meta.image, loadOptions, function (res)\n        {\n            resource.textures = {};\n\n            var frames = resource.data.frames;\n\n            for (var i in frames)\n            {\n                var rect = frames[i].frame;\n\n                if (rect)\n                {\n                    var size = null;\n                    var trim = null;\n\n                    if (frames[i].rotated) {\n                        size = new core.Rectangle(rect.x, rect.y, rect.h, rect.w);\n                    }\n                    else {\n                        size = new core.Rectangle(rect.x, rect.y, rect.w, rect.h);\n                    }\n\n                    //  Check to see if the sprite is trimmed\n                    if (frames[i].trimmed)\n                    {\n                        trim = new core.Rectangle(\n                            frames[i].spriteSourceSize.x / resolution,\n                            frames[i].spriteSourceSize.y / resolution,\n                            frames[i].sourceSize.w / resolution,\n                            frames[i].sourceSize.h / resolution\n                         );\n                    }\n\n                    // flip the width and height!\n                    if (frames[i].rotated)\n                    {\n                        var temp = size.width;\n                        size.width = size.height;\n                        size.height = temp;\n                    }\n\n                    size.x /= resolution;\n                    size.y /= resolution;\n                    size.width /= resolution;\n                    size.height /= resolution;\n\n                    resource.textures[i] = new core.Texture(res.texture.baseTexture, size, size.clone(), trim, frames[i].rotated);\n\n                    // lets also add the frame to pixi's global cache for fromFrame and fromImage functions\n                    core.utils.TextureCache[i] = resource.textures[i];\n                }\n            }\n\n            next();\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"script"}