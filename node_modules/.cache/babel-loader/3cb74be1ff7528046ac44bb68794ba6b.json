{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nexport var FatOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(FatOscillator, _Source);\n\n  var _super = _createSuper(FatOscillator);\n\n  function FatOscillator() {\n    var _this;\n\n    _classCallCheck(this, FatOscillator);\n\n    _this = _super.call(this, optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n    _this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    _this._oscillators = [];\n    var options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this._spread = options.spread;\n    _this._type = options.type;\n    _this._phase = options.phase;\n    _this._partials = options.partials;\n    _this._partialCount = options.partialCount; // set the count initially\n\n    _this.count = options.count;\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(FatOscillator, [{\n    key: \"_start\",\n\n    /**\n     * start the oscillator\n     */\n    value: function _start(time) {\n      time = this.toSeconds(time);\n\n      this._forEach(function (osc) {\n        return osc.start(time);\n      });\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._forEach(function (osc) {\n        return osc.stop(time);\n      });\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._forEach(function (osc) {\n        return osc.restart(time);\n      });\n    }\n    /**\n     * Iterate over all of the oscillators\n     */\n\n  }, {\n    key: \"_forEach\",\n    value: function _forEach(iterator) {\n      for (var i = 0; i < this._oscillators.length; i++) {\n        iterator(this._oscillators[i], i);\n      }\n    }\n    /**\n     * The type of the oscillator\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FatOscillator.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n      this.detune.dispose();\n\n      this._forEach(function (osc) {\n        return osc.dispose();\n      });\n\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      this._type = type;\n\n      this._forEach(function (osc) {\n        return osc.type = type;\n      });\n    }\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * const fatOsc = new Tone.FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._spread;\n    },\n    set: function set(spread) {\n      this._spread = spread;\n\n      if (this._oscillators.length > 1) {\n        var start = -spread / 2;\n        var step = spread / (this._oscillators.length - 1);\n\n        this._forEach(function (osc, i) {\n          return osc.detune.value = start + step * i;\n        });\n      }\n    }\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this._oscillators.length;\n    },\n    set: function set(count) {\n      var _this2 = this;\n\n      assertRange(count, 1);\n\n      if (this._oscillators.length !== count) {\n        // dispose the previous oscillators\n        this._forEach(function (osc) {\n          return osc.dispose();\n        });\n\n        this._oscillators = [];\n\n        for (var i = 0; i < count; i++) {\n          var osc = new Oscillator({\n            context: this.context,\n            volume: -6 - count * 1.1,\n            type: this._type,\n            phase: this._phase + i / count * 360,\n            partialCount: this._partialCount,\n            onstop: i === 0 ? function () {\n              return _this2.onstop(_this2);\n            } : noOp\n          });\n\n          if (this.type === \"custom\") {\n            osc.partials = this._partials;\n          }\n\n          this.frequency.connect(osc.frequency);\n          this.detune.connect(osc.detune);\n          osc.detune.overridden = false;\n          osc.connect(this.output);\n          this._oscillators[i] = osc;\n        } // set the spread\n\n\n        this.spread = this._spread;\n\n        if (this.state === \"started\") {\n          this._forEach(function (osc) {\n            return osc.start();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._phase;\n    },\n    set: function set(phase) {\n      var _this3 = this;\n\n      this._phase = phase;\n\n      this._forEach(function (osc, i) {\n        return osc.phase = _this3._phase + i / _this3.count * 360;\n      });\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._oscillators[0].baseType;\n    },\n    set: function set(baseType) {\n      this._forEach(function (osc) {\n        return osc.baseType = baseType;\n      });\n\n      this._type = this._oscillators[0].type;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._oscillators[0].partials;\n    },\n    set: function set(partials) {\n      this._partials = partials;\n      this._partialCount = this._partials.length;\n\n      if (partials.length) {\n        this._type = \"custom\";\n\n        this._forEach(function (osc) {\n          return osc.partials = partials;\n        });\n      }\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._oscillators[0].partialCount;\n    },\n    set: function set(partialCount) {\n      this._partialCount = partialCount;\n\n      this._forEach(function (osc) {\n        return osc.partialCount = partialCount;\n      });\n\n      this._type = this._oscillators[0].type;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        count: 3,\n        spread: 20,\n        type: \"sawtooth\"\n      });\n    }\n  }]);\n\n  return FatOscillator;\n}(Source);","map":{"version":3,"sources":["../../../../Tone/source/oscillator/FatOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source {\n    constructor() {\n        super(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n        this.name = \"FatOscillator\";\n        /**\n         * The array of oscillators\n         */\n        this._oscillators = [];\n        const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this._spread = options.spread;\n        this._type = options.type;\n        this._phase = options.phase;\n        this._partials = options.partials;\n        this._partialCount = options.partialCount;\n        // set the count initially\n        this.count = options.count;\n        readOnly(this, [\"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            count: 3,\n            spread: 20,\n            type: \"sawtooth\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._forEach(osc => osc.start(time));\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._forEach(osc => osc.stop(time));\n    }\n    _restart(time) {\n        this._forEach(osc => osc.restart(time));\n    }\n    /**\n     * Iterate over all of the oscillators\n     */\n    _forEach(iterator) {\n        for (let i = 0; i < this._oscillators.length; i++) {\n            iterator(this._oscillators[i], i);\n        }\n    }\n    /**\n     * The type of the oscillator\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        this._type = type;\n        this._forEach(osc => osc.type = type);\n    }\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * const fatOsc = new Tone.FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n    get spread() {\n        return this._spread;\n    }\n    set spread(spread) {\n        this._spread = spread;\n        if (this._oscillators.length > 1) {\n            const start = -spread / 2;\n            const step = spread / (this._oscillators.length - 1);\n            this._forEach((osc, i) => osc.detune.value = start + step * i);\n        }\n    }\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n    get count() {\n        return this._oscillators.length;\n    }\n    set count(count) {\n        assertRange(count, 1);\n        if (this._oscillators.length !== count) {\n            // dispose the previous oscillators\n            this._forEach(osc => osc.dispose());\n            this._oscillators = [];\n            for (let i = 0; i < count; i++) {\n                const osc = new Oscillator({\n                    context: this.context,\n                    volume: -6 - count * 1.1,\n                    type: this._type,\n                    phase: this._phase + (i / count) * 360,\n                    partialCount: this._partialCount,\n                    onstop: i === 0 ? () => this.onstop(this) : noOp,\n                });\n                if (this.type === \"custom\") {\n                    osc.partials = this._partials;\n                }\n                this.frequency.connect(osc.frequency);\n                this.detune.connect(osc.detune);\n                osc.detune.overridden = false;\n                osc.connect(this.output);\n                this._oscillators[i] = osc;\n            }\n            // set the spread\n            this.spread = this._spread;\n            if (this.state === \"started\") {\n                this._forEach(osc => osc.start());\n            }\n        }\n    }\n    get phase() {\n        return this._phase;\n    }\n    set phase(phase) {\n        this._phase = phase;\n        this._forEach((osc, i) => osc.phase = this._phase + (i / this.count) * 360);\n    }\n    get baseType() {\n        return this._oscillators[0].baseType;\n    }\n    set baseType(baseType) {\n        this._forEach(osc => osc.baseType = baseType);\n        this._type = this._oscillators[0].type;\n    }\n    get partials() {\n        return this._oscillators[0].partials;\n    }\n    set partials(partials) {\n        this._partials = partials;\n        this._partialCount = this._partials.length;\n        if (partials.length) {\n            this._type = \"custom\";\n            this._forEach(osc => osc.partials = partials);\n        }\n    }\n    get partialCount() {\n        return this._oscillators[0].partialCount;\n    }\n    set partialCount(partialCount) {\n        this._partialCount = partialCount;\n        this._forEach(osc => osc.partialCount = partialCount);\n        this._type = this._oscillators[0].type;\n    }\n    asArray(length = 1024) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._forEach(osc => osc.dispose());\n        return this;\n    }\n}\n//# sourceMappingURL=FatOscillator.js.map"]},"metadata":{},"sourceType":"module"}