{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\n\nexport var GreaterThan = /*#__PURE__*/function (_Signal) {\n  _inherits(GreaterThan, _Signal);\n\n  var _super = _createSuper(GreaterThan);\n\n  function GreaterThan() {\n    var _this;\n\n    _classCallCheck(this, GreaterThan);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n    _this.name = \"GreaterThan\";\n    _this.override = false;\n    var options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n    _this._subtract = _this.input = new Subtract({\n      context: _this.context,\n      value: options.value\n    });\n    _this._gtz = _this.output = new GreaterThanZero({\n      context: _this.context\n    });\n    _this.comparator = _this._param = _this._subtract.subtrahend;\n    readOnly(_assertThisInitialized(_this), \"comparator\"); // connect\n\n    _this._subtract.connect(_this._gtz);\n\n    return _this;\n  }\n\n  _createClass(GreaterThan, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GreaterThan.prototype), \"dispose\", this).call(this);\n\n      this._gtz.dispose();\n\n      this._subtract.dispose();\n\n      this.comparator.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n\n  return GreaterThan;\n}(Signal);","map":{"version":3,"sources":["../../../Tone/signal/GreaterThan.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,MAAT,QAAsC,UAAtC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAKA;;;;;;;;;;AAUG;;AACH,WAAa,WAAb;AAAA;;AAAA;;AAoCC,yBAAA;AAAA;;AAAA;;AACC,8BAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,WAAW,CAAC,WAAZ,EAAD,EAA4B,SAA5B,EAAuC,CAAC,OAAD,CAAvC,CAAlC,CAAN;AAnCQ,UAAA,IAAA,GAAe,aAAf;AAEA,UAAA,QAAA,GAAoB,KAApB;AAkCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC,WAAZ,EAAD,EAA4B,SAA5B,EAAuC,CAAC,OAAD,CAAvC,CAApC;AAEA,UAAK,SAAL,GAAiB,MAAK,KAAL,GAAa,IAAI,QAAJ,CAAa;AAC1C,MAAA,OAAO,EAAE,MAAK,OAD4B;AAE1C,MAAA,KAAK,EAAE,OAAO,CAAC;AAF2B,KAAb,CAA9B;AAIA,UAAK,IAAL,GAAY,MAAK,MAAL,GAAc,IAAI,eAAJ,CAAoB;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAApB,CAA1B;AAEA,UAAK,UAAL,GAAkB,MAAK,MAAL,GAAc,MAAK,SAAL,CAAe,UAA/C;AACA,IAAA,QAAQ,gCAAO,YAAP,CAAR,CAXD,CAaC;;AACA,UAAK,SAAL,CAAe,OAAf,CAAuB,MAAK,IAA5B;;AAdD;AAeC;;AAnDF;AAAA;AAAA,8BA2DQ;AACN;;AACA,WAAK,IAAL,CAAU,OAAV;;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,WAAK,UAAL,CAAgB,OAAhB;AACA,aAAO,IAAP;AACA;AAjEF;AAAA;AAAA,kCAqDmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,QAAA,KAAK,EAAE;AADmC,OAApC,CAAP;AAGA;AAzDF;;AAAA;AAAA,EAAiC,MAAjC","sourceRoot":"","sourcesContent":["import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThan extends Signal {\n    constructor() {\n        super(Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n        this.name = \"GreaterThan\";\n        this.override = false;\n        const options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n        this._subtract = this.input = new Subtract({\n            context: this.context,\n            value: options.value\n        });\n        this._gtz = this.output = new GreaterThanZero({ context: this.context });\n        this.comparator = this._param = this._subtract.subtrahend;\n        readOnly(this, \"comparator\");\n        // connect\n        this._subtract.connect(this._gtz);\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._gtz.dispose();\n        this._subtract.dispose();\n        this.comparator.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=GreaterThan.js.map"]},"metadata":{},"sourceType":"module"}