{"ast":null,"code":"import _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\n\nexport var AutoFilter = /*#__PURE__*/function (_LFOEffect) {\n  _inherits(AutoFilter, _LFOEffect);\n\n  var _super = _createSuper(AutoFilter);\n\n  function AutoFilter() {\n    var _this;\n\n    _classCallCheck(this, AutoFilter);\n\n    _this = _super.call(this, optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    _this.name = \"AutoFilter\";\n    var options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    })); // connections\n\n    _this.connectEffect(_this.filter);\n\n    _this._lfo.connect(_this.filter.frequency);\n\n    _this.octaves = options.octaves;\n    _this.baseFrequency = options.baseFrequency;\n    return _this;\n  }\n\n  _createClass(AutoFilter, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoFilter.prototype), \"dispose\", this).call(this);\n\n      this.filter.dispose();\n      return this;\n    }\n  }, {\n    key: \"baseFrequency\",\n\n    /**\n     * The minimum value of the filter's cutoff frequency.\n     */\n    get: function get() {\n      return this._lfo.min;\n    },\n    set: function set(freq) {\n      this._lfo.min = this.toFrequency(freq); // and set the max\n\n      this.octaves = this._octaves;\n    }\n    /**\n     * The maximum value of the filter's cutoff frequency.\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(oct) {\n      this._octaves = oct;\n      this._lfo.max = this._lfo.min * Math.pow(2, oct);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(LFOEffect.getDefaults(), {\n        baseFrequency: 200,\n        octaves: 2.6,\n        filter: {\n          type: \"lowpass\",\n          rolloff: -12,\n          Q: 1\n        }\n      });\n    }\n  }]);\n\n  return AutoFilter;\n}(LFOEffect);","map":{"version":3,"sources":["../../../Tone/effect/AutoFilter.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,MAAT,QAAsC,4BAAtC;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AAQA;;;;;;;;;;;AAWG;;AACH,WAAa,UAAb;AAAA;;AAAA;;AAqBC,wBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAA1B;AArBQ,UAAA,IAAA,GAAe,YAAf;AAsBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAApC;AAEA,UAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,MAAtB,EAA8B;AACtD,MAAA,OAAO,EAAE,MAAK;AADwC,KAA9B,CAAX,CAAd,CALD,CASC;;AACA,UAAK,aAAL,CAAmB,MAAK,MAAxB;;AACA,UAAK,IAAL,CAAU,OAAV,CAAkB,MAAK,MAAL,CAAY,SAA9B;;AACA,UAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA,UAAK,aAAL,GAAqB,OAAO,CAAC,aAA7B;AAbD;AAcC;;AAnCF;AAAA;AAAA,8BAwEQ;AACN;;AACA,WAAK,MAAL,CAAY,OAAZ;AACA,aAAO,IAAP;AACA;AA5EF;AAAA;;AAiDC;;AAEG;AAnDJ,wBAoDkB;AAChB,aAAO,KAAK,IAAL,CAAU,GAAjB;AACA,KAtDF;AAAA,sBAuDmB,IAvDnB,EAuDuB;AACrB,WAAK,IAAL,CAAU,GAAV,GAAgB,KAAK,WAAL,CAAiB,IAAjB,CAAhB,CADqB,CAErB;;AACA,WAAK,OAAL,GAAe,KAAK,QAApB;AACA;AAED;;AAEG;;AA/DJ;AAAA;AAAA,wBAgEY;AACV,aAAO,KAAK,QAAZ;AACA,KAlEF;AAAA,sBAmEa,GAnEb,EAmEgB;AACd,WAAK,QAAL,GAAgB,GAAhB;AACA,WAAK,IAAL,CAAU,GAAV,GAAgB,KAAK,IAAL,CAAU,GAAV,GAAgB,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAhC;AACA;AAtEF;AAAA;AAAA,kCAqCmB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,QAAA,aAAa,EAAE,GAD8B;AAE7C,QAAA,OAAO,EAAE,GAFoC;AAG7C,QAAA,MAAM,EAAE;AACP,UAAA,IAAI,EAAE,SADC;AAEP,UAAA,OAAO,EAAE,CAAC,EAFH;AAGP,UAAA,CAAC,EAAE;AAHI;AAHqC,OAAvC,CAAP;AASA;AA/CF;;AAAA;AAAA,EAAgC,SAAhC","sourceRoot":"","sourcesContent":["import { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect {\n    constructor() {\n        super(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n        this.name = \"AutoFilter\";\n        const options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n        this.filter = new Filter(Object.assign(options.filter, {\n            context: this.context,\n        }));\n        // connections\n        this.connectEffect(this.filter);\n        this._lfo.connect(this.filter.frequency);\n        this.octaves = options.octaves;\n        this.baseFrequency = options.baseFrequency;\n    }\n    static getDefaults() {\n        return Object.assign(LFOEffect.getDefaults(), {\n            baseFrequency: 200,\n            octaves: 2.6,\n            filter: {\n                type: \"lowpass\",\n                rolloff: -12,\n                Q: 1,\n            }\n        });\n    }\n    /**\n     * The minimum value of the filter's cutoff frequency.\n     */\n    get baseFrequency() {\n        return this._lfo.min;\n    }\n    set baseFrequency(freq) {\n        this._lfo.min = this.toFrequency(freq);\n        // and set the max\n        this.octaves = this._octaves;\n    }\n    /**\n     * The maximum value of the filter's cutoff frequency.\n     */\n    get octaves() {\n        return this._octaves;\n    }\n    set octaves(oct) {\n        this._octaves = oct;\n        this._lfo.max = this._lfo.min * Math.pow(2, oct);\n    }\n    dispose() {\n        super.dispose();\n        this.filter.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AutoFilter.js.map"]},"metadata":{},"sourceType":"module"}