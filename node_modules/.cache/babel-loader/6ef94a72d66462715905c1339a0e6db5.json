{"ast":null,"code":"import _objectSpread from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/thebe/Desktop/music-generator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport var createWaveShaperNodeConstructor = function createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(WaveShaperNode, _audioNodeConstructor);\n\n    var _super = _createSuper(WaveShaperNode);\n\n    function WaveShaperNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, WaveShaperNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      _this = _super.call(this, context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      _this._isCurveNullified = false;\n      _this._nativeWaveShaperNode = nativeWaveShaperNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(WaveShaperNode, [{\n      key: \"curve\",\n      get: function get() {\n        if (this._isCurveNullified) {\n          return null;\n        }\n\n        return this._nativeWaveShaperNode.curve;\n      },\n      set: function set(value) {\n        // Bug #103: Safari does not allow to set the curve to null.\n        if (value === null) {\n          this._isCurveNullified = true;\n          this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n        } else {\n          // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n          // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n          if (value.length < 2) {\n            throw createInvalidStateError();\n          }\n\n          this._isCurveNullified = false;\n          this._nativeWaveShaperNode.curve = value;\n        }\n      }\n    }, {\n      key: \"oversample\",\n      get: function get() {\n        return this._nativeWaveShaperNode.oversample;\n      },\n      set: function set(value) {\n        this._nativeWaveShaperNode.oversample = value;\n      }\n    }]);\n\n    return WaveShaperNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/wave-shaper-node-constructor.ts"],"names":[],"mappings":";;;;;;AAGA,IAAM,eAAe,GAAG;AACpB,EAAA,YAAY,EAAE,CADM;AAEpB,EAAA,gBAAgB,EAAE,KAFE;AAGpB,EAAA,qBAAqB,EAAE,UAHH;AAIpB,EAAA,KAAK,EAAE,IAJa;AAKpB,EAAA,UAAU,EAAE;AALQ,CAAxB;AAQA,OAAO,IAAM,+BAA+B,GAAsC,SAArE,+BAAqE,CAC9E,oBAD8E,EAE9E,uBAF8E,EAG9E,0BAH8E,EAI9E,4BAJ8E,EAK9E,gBAL8E,EAM9E,2BAN8E,EAO9E,oBAP8E,EAQ9E;AACA;AAAA;;AAAA;;AAKI,4BAAY,OAAZ,EAAwB,OAAxB,EAA6D;AAAA;;AAAA;;AACzD,UAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;;AACA,UAAM,aAAa,mCAAQ,eAAR,GAA4B,OAA5B,CAAnB;;AACA,UAAM,oBAAoB,GAAG,0BAA0B,CAAC,aAAD,EAAgB,aAAhB,CAAvD;AACA,UAAM,SAAS,GAAG,2BAA2B,CAAC,aAAD,CAA7C;AACA,UAAM,sBAAsB,GAAiC,SAAS,GAAG,4BAA4B,EAA/B,GAAoC,IAA1G,CALyD,CAOzD;;AACA,gCAAM,OAAN,EAAe,IAAf,EAAqB,oBAArB,EAA2C,sBAA3C;AAEA,YAAK,iBAAL,GAAyB,KAAzB;AACA,YAAK,qBAAL,GAA6B,oBAA7B,CAXyD,CAazD;;AACA,MAAA,oBAAoB,gCAAO,CAAP,CAApB;AAdyD;AAe5D;;AApBL;AAAA;AAAA,0BAsBa;AACL,YAAI,KAAK,iBAAT,EAA4B;AACxB,iBAAO,IAAP;AACH;;AAED,eAAO,KAAK,qBAAL,CAA2B,KAAlC;AACH,OA5BL;AAAA,wBA8Bc,KA9Bd,EA8BmB;AACX;AACA,YAAI,KAAK,KAAK,IAAd,EAAoB;AAChB,eAAK,iBAAL,GAAyB,IAAzB;AACA,eAAK,qBAAL,CAA2B,KAA3B,GAAmC,IAAI,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAnC;AACH,SAHD,MAGO;AACH;AACA;AACA,cAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AAClB,kBAAM,uBAAuB,EAA7B;AACH;;AAED,eAAK,iBAAL,GAAyB,KAAzB;AACA,eAAK,qBAAL,CAA2B,KAA3B,GAAmC,KAAnC;AACH;AACJ;AA7CL;AAAA;AAAA,0BA+CkB;AACV,eAAO,KAAK,qBAAL,CAA2B,UAAlC;AACH,OAjDL;AAAA,wBAmDmB,KAnDnB,EAmDwB;AAChB,aAAK,qBAAL,CAA2B,UAA3B,GAAwC,KAAxC;AACH;AArDL;;AAAA;AAAA,IAAwD,oBAAxD;AAuDH,CAhEM","sourceRoot":"","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = (isOffline ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=wave-shaper-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}