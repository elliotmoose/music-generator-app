[{"/Users/thebe/Desktop/music-generator-app/src/index.js":"1","/Users/thebe/Desktop/music-generator-app/src/App.js":"2","/Users/thebe/Desktop/music-generator-app/src/reportWebVitals.js":"3","/Users/thebe/Desktop/music-generator-app/src/Player.js":"4","/Users/thebe/Desktop/music-generator-app/src/components/Playbar.js":"5","/Users/thebe/Desktop/music-generator-app/src/public/data.js":"6"},{"size":500,"mtime":1606984616432,"results":"7","hashOfConfig":"8"},{"size":3986,"mtime":1607018883985,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606984616432,"results":"10","hashOfConfig":"8"},{"size":2551,"mtime":1607019246191,"results":"11","hashOfConfig":"8"},{"size":706,"mtime":1606993930757,"results":"12","hashOfConfig":"8"},{"size":569,"mtime":1607018160400,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16olp9d",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/thebe/Desktop/music-generator-app/src/index.js",[],["28","29"],"/Users/thebe/Desktop/music-generator-app/src/App.js",["30","31"],"import './App.css';\nimport { useEffect, useState } from 'react'\nimport Player from './Player';\nimport * as Tone from 'tone'\nimport PlayBar from './components/Playbar'\nimport data from './public/data'\n\n\nlet interval;\nfunction App() {\n  let SampleChords = data.sampleChords\n  const [play, setPlay] = useState(false)\n  const [player, setPlayer] = useState(new Player());\n  const [playerTwo, setPlayerTwo] = useState(new Player());\n  const [notes, setNotes] = useState([]);\n  const [playheadTime, setPlayheadTime] = useState(0);\n  const [presetNotes, setPresetNotes] = useState([])\n\n  useEffect(() => {\n    player.setup();\n    setPlayer(player);\n    playerTwo.setupTwo();\n    setPlayerTwo(playerTwo);\n    setPresetNotes(SampleChords)\n    // console.log(\"set up\")\n    if (!interval) {\n      setInterval(() => {\n        setPlayheadTime(Tone.context.currentTime * DURATION_FACTOR)\n      }, 10);\n    }\n  }, [playerTwo,player]);\n\n  useEffect(() => {\n    if (play) {\n      player.setup();\n      setPlayer(player);\n      console.log(\"set up\")\n      console.log(\"prepping notes\");\n      (async () => {\n        setNotes(await player.notesFromMidiFile('ABeautifulFriendship.mid'));\n        await player.playMidiFile('ABeautifulFriendship.mid');\n      })()\n\n      setPlay(false);\n    }\n  }, [play,player])\n\n  const MAX_MIDI = 88\n  const NOTE_HEIGHT = 8\n  const DURATION_FACTOR = 100\n\n  async function handleEvent(e){\n    await playerTwo.playChord(e.target.value);\n  }\n\n  async function handleKeyDown(e){\n    console.log(e.key);\n    if(e.key === e.target.id){\n      console.log(e.target.name)\n      await playerTwo.playChord(e.target.value);\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n          <div style={{width:\"20%\",textTransform:\"uppercase\"}}>2.5K only<br></br> music generation <br></br> project</div>\n          <PlayBar onClickPlay={() => setPlay(true)} onClickPause={() => {setPlay(false)}} onClickStop={async ()=>{await player.stopMidiFile();setNotes([]);setPlay(false);}}></PlayBar>\n          <div style={{width:\"20%\"}}></div>\n\n      </div>\n      {/* <button onClick={() => setPlay(true)}>begin</button>    */}\n\n      {/* <div style={{height: '100%', width: 4, position: 'absolute', left: playheadTime, top: 0, backgroundColor: 'black', transition: '0.2s', zIndex: 999}}/> */}\n      {/* {notes.map((note, i) => {\n        // const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n        const noteDescription = `${note.name}`\n        return <div\n          key={`${i}`}\n          style={{ position: 'absolute', left: note.time * DURATION_FACTOR - playheadTime, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: 'tomato' }}\n        >{noteDescription}</div>\n      }\n      )} */}\n      <div className=\"App-piano\">\n        {notes.map((note, i) => {\n          // const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n          const noteDescription = `${note.name}`\n          return <div\n            key={`${i}`}\n            style={{position:\"absolute\",left: note.time * DURATION_FACTOR - playheadTime, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: '#7Ec291' }}\n          ></div>\n        }\n        )}\n      </div>\n      {/* <div style={{backgroundColor:\"yellow\",position:\"relative\"}}> HELLO</div> */}\n      <div className=\"App-preset-container\">\n        {presetNotes.map((data)=> {\n          return <button className=\"App-preset\" onClick={handleEvent} value={data.array} id={`${data.key}`} name={`${data.name}`} onKeyDown={handleKeyDown} >\n            <div style={{paddingTop:\"2.5vw\",fontSize:\"1.25vw\"}}>{data.name}</div>\n            <div style={{paddingTop:\"1.25vw\",fontSize:\"1vw\",color:\"#E37B7B\"}}>{data.key}</div>\n          </button>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/thebe/Desktop/music-generator-app/src/reportWebVitals.js",[],"/Users/thebe/Desktop/music-generator-app/src/Player.js",[],"/Users/thebe/Desktop/music-generator-app/src/components/Playbar.js",[],"/Users/thebe/Desktop/music-generator-app/src/public/data.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":31,"column":6,"nodeType":"38","endLine":31,"endColumn":24,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":89,"column":17,"nodeType":"42","messageId":"43","endLine":89,"endColumn":32},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'SampleChords'. Either include it or remove the dependency array.","ArrayExpression",["46"],"no-unused-vars","'noteDescription' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [playerTwo, player, SampleChords]",{"range":"49","text":"50"},[899,917],"[playerTwo, player, SampleChords]"]