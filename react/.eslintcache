[{"/Users/thebe/Desktop/music-generator-app/react/src/index.js":"1","/Users/thebe/Desktop/music-generator-app/react/src/reportWebVitals.js":"2","/Users/thebe/Desktop/music-generator-app/react/src/App.js":"3","/Users/thebe/Desktop/music-generator-app/react/src/components/Playbar.js":"4","/Users/thebe/Desktop/music-generator-app/react/src/public/data.js":"5","/Users/thebe/Desktop/music-generator-app/react/src/Recorder.js":"6","/Users/thebe/Desktop/music-generator-app/react/src/Player.js":"7","/Users/thebe/Desktop/music-generator-app/react/src/Model.js":"8","/Users/thebe/Desktop/music-generator-app/react/src/components/Instructions.js":"9"},{"size":769,"mtime":1607524269743,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1607338898629,"results":"12","hashOfConfig":"11"},{"size":8510,"mtime":1607527615978,"results":"13","hashOfConfig":"11"},{"size":2511,"mtime":1607527104104,"results":"14","hashOfConfig":"11"},{"size":940,"mtime":1607527104103,"results":"15","hashOfConfig":"11"},{"size":3189,"mtime":1607524269744,"results":"16","hashOfConfig":"11"},{"size":3047,"mtime":1607501223285,"results":"17","hashOfConfig":"11"},{"size":3862,"mtime":1607524269743,"results":"18","hashOfConfig":"11"},{"size":4256,"mtime":1607528577806,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1su2d94",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/thebe/Desktop/music-generator-app/react/src/index.js",[],["42","43"],"/Users/thebe/Desktop/music-generator-app/react/src/reportWebVitals.js",[],"/Users/thebe/Desktop/music-generator-app/react/src/App.js",["44","45","46","47","48","49","50","51","52","53"],"import './App.css';\nimport { useEffect, useState } from 'react'\nimport Player from './Player';\nimport * as Tone from 'tone'\nimport PlayBar from './components/Playbar'\nimport Insturction from './components/Instructions'\nimport data from './public/data'\nimport Recorder from './Recorder';\nimport Mousetrap from 'mousetrap'\nimport Model from './Model';\nimport { CircularProgress, Button, withTheme }  from '@material-ui/core'\n\n\nlet interval;\nfunction App() {\n\tlet SampleChords = data.sampleChords\n\tconst [recording, setRecording] = useState(false);\n\tconst [initializingGeneration, setInitializingGeneration] = useState(false);\n\tconst [isGenerating, setIsGenerating] = useState(false);\n\tconst [loadingText, setLoadingText] = useState('WAKING A.I. UP...\\n');\n\tconst [player, setPlayer] = useState(new Player());\n\tconst [playerTwo, setPlayerTwo] = useState(new Player());\n\tconst [recorder, setRecorder] = useState(new Recorder());\n\tconst [model, setModel] = useState(new Model());\n\tconst [notes, setNotes] = useState([]);\n\tconst [playheadTime, setPlayheadTime] = useState(0);\n\tconst [presentChords, setPresetChords] = useState([]);\n\n\tconst [currentChord, setCurrentChord] = useState(null);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait player.setup();\n\t\t\tplayer.sync();\n\t\t\tsetPlayer(player);\n\t\t\tawait playerTwo.setup();\n\t\t\tsetPlayerTwo(playerTwo);\n\n\t\t\tsetPresetChords(SampleChords)\n\t\t\t\n\t\t\tif (!interval) {\n\t\t\t\tinterval = setInterval(() => {\n\t\t\t\t\tsetPlayheadTime(Tone.Transport.seconds * DURATION_FACTOR)\n\t\t\t\t\t\n\t\t\t\t\t//retrieve recording state\n\t\t\t\t\tsetRecording(recording=>{\n\t\t\t\t\t\tif(recording) {\n\t\t\t\t\t\t\tlet notes = recorder.getVisualNotes();\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetNotes(notes);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn recording;\n\t\t\t\t\t})\n\t\t\t\t}, 50);\n\t\t\t}\n\n\n\t\t\trecorder.onFinishRecording = async (result)=>{\n\t\t\t\tconst time_interval = 1250\n\t\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\t\tsetLoadingText(text => text+'BRUSHING TEETH...\\n')\n\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\tsetLoadingText(text=> text+'ALMOST READY...\\n')\t\t\t\t\t\t\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tsetLoadingText(text=> text+'DESTROYING GPUs...\\n')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\t\tsetLoadingText(text=> text+'MAKING MUSIC...\\n')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, time_interval);\n\t\t\t\t\t\t}, time_interval);\n\t\t\t\t\t}, time_interval);\n\t\t\t\t}, time_interval);\n\n\t\t\t\tsetRecording(false);\n\t\t\t\tTone.Transport.stop()\n\t\t\t\tsetIsGenerating(true)\n\t\t\t\tsetInitializingGeneration(true);\n\t\t\t\tlet midiFile = await model.userInputToMidi(result);\n\t\t\t\tlet playbackNotes = player.notesFromMidiFile(midiFile);\n\t\t\t\tfor(let note of playbackNotes) {\n\t\t\t\t\tnote.user = true\n\t\t\t\t}\n\t\t\t\tplayer.addNotes(playbackNotes);\n\t\t\t\t\n\t\t\t\tlet {midi: generatedMidiFile, slicesBeforeGenerated } = await model.generateNext();\n\t\t\t\tlet timeOffset = slicesBeforeGenerated * recorder.timeSlice;\n\t\t\t\tlet generatedNotes = player.notesFromMidiFile(generatedMidiFile, timeOffset);\t\t\t\t\t\n\t\t\t\tplayer.addNotes(generatedNotes);\t\t\t\t\t\n\t\t\t\tsetNotes(notes=>[...notes, ...playbackNotes, ...generatedNotes]);\t\t\t\n\t\t\t\tsetInitializingGeneration(false);\n\n\t\t\t\tclearTimeout(timeout)\n\t\t\t\tsetLoadingText('WAKING A.I. UP...\\n')\n\n\t\t\t\tfor(let i=0; i<999; i++) {\n\t\t\t\t\tlet {midi: generatedMidiFile, slicesBeforeGenerated } = await model.generateNext();\n\t\t\t\t\tlet timeOffset = slicesBeforeGenerated * recorder.timeSlice;\n\t\t\t\t\tlet generatedNotes = player.notesFromMidiFile(generatedMidiFile, timeOffset);\t\t\t\t\t\n\t\t\t\t\tplayer.addNotes(generatedNotes);\n\t\t\t\t\tsetNotes(notes=>[...notes, ...generatedNotes]);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tlet shouldStop = false;\n\t\t\t\t\tsetIsGenerating(isGenerating => {\n\t\t\t\t\t\tshouldStop = !isGenerating;\n\t\t\t\t\t\treturn isGenerating;\n\t\t\t\t\t})\n\n\t\t\t\t\tif(shouldStop) {\n\t\t\t\t\t\tconsole.log(\"Stopped Generating!\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t})()\n\t}, []); //on component mount\n\n\tconst MAX_MIDI = 88\n\tconst NOTE_HEIGHT = 8\n\tconst DURATION_FACTOR = 100\n\n\tasync function onChordDown(chord) {\n\t\tif (chord != currentChord) {\n\t\t\tawait playerTwo.triggerChordAttack(chord.array);\n\t\t\tsetCurrentChord(chord);\n\t\t}\n\t\t\n\t\trecorder.onChordPressed(chord);\n\t}\n\t\n\tasync function onChordUp(chord) {\n\t\t// console.log(chord)\n\t\tif (chord == currentChord) {\n\t\t\tsetCurrentChord(null)\n\t\t}\n\t\tawait playerTwo.triggerChordRelease(chord.array);\n\t\t\n\t\trecorder.onChordReleased(chord);\n\t}\n\n\tfor (let chord of data.sampleChords) {\n\t\tMousetrap.bind(chord.key, () => onChordDown(chord), 'keypress');\n\t\tMousetrap.bind(chord.key, () => onChordUp(chord), 'keyup');\n\t}\n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div style={{position: 'absolute', top: 10, right: 20, color: 'tomato'}}>{recorder.windowLength - recorder.slices.length}</div>\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<div style={{ width: \"20%\", textTransform: \"uppercase\" }}>2.5K only<br></br> music generation <br></br> project</div>\n\t\t\t\t<PlayBar\n\t\t\t\t\tonClickPlay={async () => {\n\t\t\t\t\t\tif(notes.length == 0) {\n\t\t\t\t\t\t\tlet midiFile = await player.midiFileFromUrl('/ABeautifulFriendship.mid');\n\t\t\t\t\t\t\tlet notes = player.notesFromMidiFile(midiFile);\n\t\t\t\t\t\t\tplayer.addNotes(notes);\n\t\t\t\t\t\t\tsetNotes(notes);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(Tone.context.state == 'suspended') {\n\t\t\t\t\t\t\tTone.start()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tTone.Transport.start()\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t\tonClickPause={() => player.pausePlayback()}\n\t\t\t\t\tonClickStop={async () => {\n\t\t\t\t\t\tawait player.stopMidiFile();\t\t\t\t\t\t\n\t\t\t\t\t\tsetIsGenerating(false);\n\t\t\t\t\t\tsetNotes([]);\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRecord={async () => {\n\t\t\t\t\t\t//reset\n\t\t\t\t\t\trecorder.reset();\n\t\t\t\t\t\tmodel.reset();\n\t\t\t\t\t\tawait player.stopMidiFile();\t\t\t\t\t\t\n\t\t\t\t\t\tsetIsGenerating(false);\n\t\t\t\t\t\tsetNotes([]);\n\n\t\t\t\t\t\tTone.Transport.start() //to start time\n\t\t\t\t\t\trecorder.startRecording();\n\t\t\t\t\t\tsetRecording(true);\n\t\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRecordStop={() => {\n\t\t\t\t\t\trecorder.finishRecording();\t\t\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRewind={() => {\n\t\t\t\t\t\tTone.Transport.pause()\n\t\t\t\t\t\tTone.Transport.seconds = 0\n\t\t\t\t\t}}\n\t\t\t\t\trecordingState = {recording}\n\t\t\t\t/>\n\t\t\t\t{/* <div style={{ width: \"20%\" }}></div> */}\n\t\t\t\t<Insturction></Insturction>\n\t\t\t</div>\n\t\t\t{/* <button onClick={() => setPlay(true)}>begin</button>    */}\n\n\t\t\t{/* {notes.map((note, i) => {\n\t\t\t\t// const noteDescription = `${note.name} note: ${note.midi} dur:${note.duration} time:${note.time}`\n\t\t\t\tconst noteDescription = `${note.name}`\n\t\t\t\treturn <div\n\t\t\t\tkey={`${i}`}\n\t\t\t\tstyle={{ position: 'absolute', left: note.time * DURATION_FACTOR - playheadTime, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: 'tomato' }}\n\t\t\t\t>{noteDescription}</div>\n\t\t\t}\n\t\t)} */}\n\t\t\t<div className=\"App-piano\">\t\t\t\t\n\t\t\t\t{initializingGeneration && <div style={{height: '100%', width: '100%', position: 'absolute',left: 0, top: 0, zIndex: 1000, display: 'flex'}}>\n\t\t\t\t\t<div style={{height: '100%', width: '100%', position: 'absolute',left: 0, top: 0, backgroundColor: 'black', opacity: 0.3, zIndex: 10}}/>\n\t\t\t\t\t<p style={{position: 'absolute', whiteSpace: 'pre-wrap', left: 50, top: 6, fontSize: 12, fontFamily: 'monospace', color: '#7Ec291', zIndex: 50}}>{loadingText}</p>\n\t\t\t\t\t<CircularProgress color='primary' size={14} style={{marginLeft: 12, marginTop: 20}}/>\n\t\t\t\t</div>}\n\t\t\t\t<div style={{height: '100%', width: 6, position: 'absolute', left: 500, top: 0, backgroundColor: 'white', zIndex: 999, borderRadius: 3}}/>\n\t\t\t\t{notes.map((note, i) => {\n\t\t\t\t\tlet isFar = Math.abs(note.time * DURATION_FACTOR - playheadTime) > 2000;\n\t\t\t\t\tif(isFar) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet recorded = note.user || false;\n\t\t\t\t\t// let offset = recording ? 0 : playheadTime\n\t\t\t\t\tlet offset = playheadTime - 500\n\t\t\t\t\treturn <div\n\t\t\t\t\t\tkey={`${i}`}\n\t\t\t\t\t\tstyle={{ position: \"absolute\", left: note.time * DURATION_FACTOR - offset, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: recorded ? 'tomato' : '#7Ec291' }}\n\t\t\t\t\t></div>\n\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{/* <div style={{backgroundColor:\"yellow\",position:\"relative\"}}> HELLO</div> */}\n\t\t\t<div className=\"App-preset-container\">\n\t\t\t\t{presentChords.map((chord) => {\n\t\t\t\t\treturn <button\n\t\t\t\t\t\tclassName=\"App-preset\"\n\t\t\t\t\t\tid={`${chord.key}`}\n\t\t\t\t\t\tkey={`${chord.key}`}\n\t\t\t\t\t\tname={`${chord.name}`}\n\t\t\t\t\t\tonPointerUp={(e) => onChordUp(chord)}\n\t\t\t\t\t\tonPointerDown={(e) => onChordDown(chord)}\n\t\t\t\t\t// onKeyUp={(e)=>onChordUp(chord)}\n\t\t\t\t\t// onKeyDown={(e)=>onChordDown(chord)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div style={{ paddingTop: \"2.5vw\", fontSize: \"1.25vw\" }}>{chord.name}</div>\n\t\t\t\t\t\t<div style={{ paddingTop: \"1.25vw\", fontSize: \"1vw\", color: \"#E37B7B\" }}>{chord.key}</div>\n\t\t\t\t\t</button>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App\n","/Users/thebe/Desktop/music-generator-app/react/src/components/Playbar.js",[],"/Users/thebe/Desktop/music-generator-app/react/src/public/data.js",[],"/Users/thebe/Desktop/music-generator-app/react/src/Recorder.js",["54"],"const bpm = 120 \nexport default class Recorder\n{\n    constructor() {\n        this.bpm = bpm;\n        this.timeSlice = 1/(this.bpm*4/60); //time slice - time of 16th notes\n        this.windowLength = 20; //number of time slices\n        this.slices = [];\n        this.currentChord = null;\n\n        //callbacks \n        this.onFinishRecording = null;\n    }\n\n    reset() {\n        this.slices = [];\n        this.currentChord = null;\n    }\n    \n    onChordPressed(chord) {\n        this.currentChord = chord;\n    }\n\n    onChordReleased(chord) {\n        if(this.currentChord == chord) {\n            this.currentChord = null;\n        }\n    }\n\n    startRecording() {\n        console.log('started recording!')\n        this.recording = true;\n\n        //start slice tracking clock\n        this.interval = setInterval(() => {\n            this.captureSlice();    \n        }, this.timeSlice * 1000);\n    }\n\n    stopRecording() {\n        this.recording = false;\n\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    finishRecording() {\n        this.stopRecording();\n\n        if(this.onFinishRecording) {\n            let result = this.slices;\n            //convert slices to parsable midi combination tuples\n\n            let tuples = []\n            for(let slice of result) {\n                //rest\n                if(!slice) {\n                    tuples.push([])\n                    continue;\n                }\n\n                let tuple = []\n                for(let note of slice.array) {\n                    let midi = noteStringToMidi(note)\n                    tuple.push(midi)\n                }\n\n                tuples.push(tuple)\n            }\n\n            this.onFinishRecording(tuples);\n        }\n    }\n\n    captureSlice() {\n        if(!this.recording) {\n            return;\n        }\n\n        if(this.slices.length > this.windowLength) {\n            this.finishRecording();\n        }\n\n        // console.log('recording slice: ', this.currentChord)\n        this.slices.push(this.currentChord);\n    }\n\n    getVisualNotes() {\n        let output = []\n        this.slices.forEach((slice, i) => {\n            if(!slice) {\n                return;\n            }\n            slice.array.forEach(noteString => {\n                let midi = noteStringToMidi(noteString); //C6 => 60 \n                output.push({\n                    time: i*this.timeSlice,\n                    duration: this.timeSlice,\n                    midi,\n                    user: true\n                })\n            });\n        })\n\n        return output;\n    }\n}\n\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\nconst noteStringToMidi = (noteString) => {\n    let components = noteString.match(/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i)\n    let pitch = components[1]\n    let octave = components[2]\n    const index = noteToScaleIndex[pitch.toLowerCase()];\n    const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n    return noteNumber;\n}","/Users/thebe/Desktop/music-generator-app/react/src/Player.js",[],"/Users/thebe/Desktop/music-generator-app/react/src/Model.js",["55","56","57","58","59"],"import { Midi } from '@tonejs/midi';\nimport axios from 'axios';\nimport fileDownload from 'js-file-download'\n\nconst server = 'http://localhost:5000'\n\nexport default class Model {\n\n    constructor() {\n        this.lastTokenSequence = []\n        this.fullTokenSequence = []\n    }\n\n    async userInputToMidi(userInput) {\n        let token_sequence = await this.userCombiToTokenSequence(userInput);\n        this.lastTokenSequence = token_sequence;\n        this.fullTokenSequence = token_sequence;\n        let userInputMidi = await this.tokenSequenceToMidi(token_sequence);        \n        return userInputMidi;\n    }\n\n    async generateNext() {\n        let sliceOffsetCount = this.fullTokenSequence.length; //the slice count before it was generated\n        let generatedTokenSequence = await this.generateNextTokenSequence();\n        let generatedMidi = await this.tokenSequenceToMidi(generatedTokenSequence);\n        return {\n            midi: generatedMidi,\n            tokens: generatedTokenSequence,\n            slicesBeforeGenerated: sliceOffsetCount\n        };\n    }\n\n    async generateNextTokenSequence() {\n        if(this.lastTokenSequence.length == 0) {\n            console.error('Last token sequence missing. Please record first')\n        }\n\n        let window = 300\n        let refTokenSequence = this.fullTokenSequence.length >= window ? this.fullTokenSequence.slice(this.fullTokenSequence.length-window) : this.fullTokenSequence; //if the full length is too short, just send the short one and let server side pad\n        let generatedTokenSequence = await this.generateTokenSequenceFromTokenSequence(refTokenSequence)\n        this.fullTokenSequence = [...this.fullTokenSequence, ...generatedTokenSequence]; //append token sequence\n        this.lastTokenSequence = generatedTokenSequence;\n        return generatedTokenSequence;\n    }\n    \n    async userCombiToTokenSequence(user_combi) {\n        // let url = server + '/generate_from_user_input'\n        let response = await axios({            \n            url: server + '/user_combi_to_token_sequence',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'json',\n            data: { user_combi }\n        })\n        \n        if(response.status == 200 && response.data) {\n            let token_sequence = response.data\n            return token_sequence\n        }\n\n        console.error('userCombiToTokenSequence: invalid response from server');\n        return null;\n    }\n    \n    async tokenSequenceToMidi(token_sequence) {\n        let response = await axios({            \n            url: server + '/token_sequence_to_midi',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'arraybuffer',\n            data: { token_sequence }\n        })\n\n        if(response.status == 200 && response.data) {\n            let midiFile = new Midi(response.data)\n            this.lastMidiChunk = midiFile;\n            return midiFile;\n        }\n\n        console.error('tokenSequenceToMidi: invalid response from server');\n        return null;\n    }\n\n    async generateTokenSequenceFromTokenSequence(last_token_sequence) {\n        \n        let response = await axios({            \n            url: server + '/generate_next_token_sequence',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'json',\n            data: { token_sequence: last_token_sequence }\n        })\n\n        if(response.status == 200 && response.data) {\n            let token_sequence = response.data;\n            return token_sequence;\n        }\n\n        console.error('tokenSequenceToGeneratedTokenSequence: invalid response from server');\n        return null;\n    }\n\n    reset() {\n        this.lastTokenSequence = []\n        this.fullTokenSequence = []\n    }\n}","/Users/thebe/Desktop/music-generator-app/react/src/components/Instructions.js",["60","61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":11,"column":28,"nodeType":"69","messageId":"70","endLine":11,"endColumn":34},{"ruleId":"67","severity":1,"message":"71","line":11,"column":36,"nodeType":"69","messageId":"70","endLine":11,"endColumn":45},{"ruleId":"67","severity":1,"message":"72","line":19,"column":9,"nodeType":"69","messageId":"70","endLine":19,"endColumn":21},{"ruleId":"67","severity":1,"message":"73","line":23,"column":19,"nodeType":"69","messageId":"70","endLine":23,"endColumn":30},{"ruleId":"67","severity":1,"message":"74","line":24,"column":16,"nodeType":"69","messageId":"70","endLine":24,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":113,"column":5,"nodeType":"77","endLine":113,"endColumn":7,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":120,"column":13,"nodeType":"81","messageId":"82","endLine":120,"endColumn":15},{"ruleId":"79","severity":1,"message":"83","line":130,"column":13,"nodeType":"81","messageId":"82","endLine":130,"endColumn":15},{"ruleId":"79","severity":1,"message":"83","line":151,"column":23,"nodeType":"81","messageId":"82","endLine":151,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":158,"column":29,"nodeType":"81","messageId":"82","endLine":158,"endColumn":31},{"ruleId":"79","severity":1,"message":"83","line":24,"column":30,"nodeType":"81","messageId":"82","endLine":24,"endColumn":32},{"ruleId":"67","severity":1,"message":"84","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":20},{"ruleId":"79","severity":1,"message":"83","line":34,"column":42,"nodeType":"81","messageId":"82","endLine":34,"endColumn":44},{"ruleId":"79","severity":1,"message":"83","line":56,"column":28,"nodeType":"81","messageId":"82","endLine":56,"endColumn":30},{"ruleId":"79","severity":1,"message":"83","line":74,"column":28,"nodeType":"81","messageId":"82","endLine":74,"endColumn":30},{"ruleId":"79","severity":1,"message":"83","line":95,"column":28,"nodeType":"81","messageId":"82","endLine":95,"endColumn":30},{"ruleId":"67","severity":1,"message":"85","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":19},{"ruleId":"67","severity":1,"message":"86","line":4,"column":18,"nodeType":"69","messageId":"70","endLine":4,"endColumn":22},{"ruleId":"67","severity":1,"message":"87","line":4,"column":24,"nodeType":"69","messageId":"70","endLine":4,"endColumn":34},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'withTheme' is defined but never used.","'isGenerating' is assigned a value but never used.","'setRecorder' is assigned a value but never used.","'setModel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'SampleChords', 'model', 'player', 'playerTwo', and 'recorder'. Either include them or remove the dependency array. You can also do a functional update 'setPlayer(p => ...)' if you only need 'player' in the 'setPlayer' call.","ArrayExpression",["90"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'fileDownload' is defined but never used.","'useEffect' is defined but never used.","'Icon' is defined but never used.","'IconButton' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [SampleChords, model, player, playerTwo, recorder]",{"range":"93","text":"94"},[3712,3714],"[SampleChords, model, player, playerTwo, recorder]"]